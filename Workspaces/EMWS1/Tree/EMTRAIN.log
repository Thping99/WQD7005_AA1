*------------------------------------------------------------*
* Training Log
Date:                January 07, 2024
Time:                02:26:49
*------------------------------------------------------------*
14715  proc freq data=EMWS1.Tree_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.TreeMETA;
14717  run;

NOTE: There were 13 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
      

14718  proc print data=WORK.TreeMETA label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;

NOTE: There were 6 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      

14724  title10;

14725  %let EMNORLEN = %DMNORLEN;
EMWS1.Part_TRAIN EMWS1.Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN 
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN 
>>>>>>>>>>>>>> TARGET(   USE='Y' 
                         REPORT='N' 
                         NAME='Churn' 
                         ROLE='TARGET' 
                         LEVEL='INTERVAL' 
                         ORDER='' 
                         CREATOR='' 
                         FORMATTYPE='QUANTITY' 
                         FAMILY='' 
                         LOWERLIMIT=. 
                         UPPERLIMIT=. 
                         DISTRIBUTION='' 
                         COMMENT='' 
                         PRICE=. 
                         TYPE='N' 
                         LABEL='' 
                         FORMAT='BEST12.0' 
                         INFORMAT='BEST32.0' 
                         INDEX='N' 
                         INDEXTYPE='NONE' 
                         LENGTH=8 
                      )[11691] 
PERFORMANCE  DETAILS
WORK.EM_DMDB WORK.EM_DMDB 
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB 
"No decisions defined for target "Churn"." 
14786  proc print data = EMWS1.Tree_Churn_DM noobs label;
14787  var _type_ variable label;
14788  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14789  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14790  title9 ' ';
14791  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14792  run;

NOTE: There were 3 observations read from the data set EMWS1.TREE_CHURN_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14793  title10;

14794  %let EMEXCEPTIONSTRING=;
15291  *------------------------------------------------------------*;
15292  * Tree: Generation of macros and macro variables;
15293  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15294  *------------------------------------------------------------*;

15295  %let EMEXCEPTIONSTRING=;
15296  *------------------------------------------------------------*;
15297  * TRAIN: Tree;
15298  *------------------------------------------------------------*;
15299  %let EM_ACTION = TRAIN;
15300  %let syscc = 0;
15301  %macro main;
15302  
15303    %if %upcase(&EM_ACTION) = CREATE %then %do;
15304      filename temp catalog 'sashelp.emmodl.tree_create.source';
15305      %include temp;
15306      filename temp;
15307  
15308      %em_tree_create;
15309    %end;
15310  
15311     %else
15312     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15313  
15314         filename temp catalog 'sashelp.emmodl.tree_train.source';
15315         %include temp;
15316         filename temp;
15317         %em_tree_train;
15318     %end;
15319  
15320    %else
15321    %if %upcase(&EM_ACTION) = SCORE %then %do;
15322      filename temp catalog 'sashelp.emmodl.tree_score.source';
15323      %include temp;
15324      filename temp;
15325  
15326      %em_tree_score;
15327  
15328    %end;
15329  
15330    %else
15331    %if %upcase(&EM_ACTION) = REPORT %then %do;
15332  
15333         filename temp catalog 'sashelp.emmodl.tree_report.source';
15334         %include temp;
15335         filename temp;
15336  
15337         %em_tree_report;
15338     %end;
15339  
15340    %else
15341    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15342  
15343         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15344         %include temp;
15345         filename temp;
15346         %EM_TREE_OPENTREEVIEWER;
15347  
15348     %end;
15349  
15350    %else
15351    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15352  
15353         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15354         %include temp;
15355         filename temp;
15356         %EM_TREE_CLOSETREEVIEWER;
15357  
15358     %end;
15359  
15360  
15361     %doendm:
15362  %mend main;
15363  
15364  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15366 +%macro em_tree_train;
15368 +   %if &EM_IMPORT_DATA eq %then %do;
15369 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15370 +       %put &em_codebar;
15371 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15372 +       %put &errormsg;
15373 +       %put &em_codebar;
15374 +       %goto doendm;
15375 +   %end;
15376 +   %else
15377 +       %let EMEXCEPTIONSTRING =;
15379 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15380 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15381 +        %put &em_codebar;
15382 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15383 +        %put &errormsg;
15384 +        %put &em_codebar;
15385 +        %goto doendm;
15386 +   %end;
15388 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15389 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15390 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15391 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15392 +        %put &em_codebar;
15393 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15394 +        %put &errormsg;
15395 +        %put &em_codebar;
15396 +        %goto doendm;
15397 +   %end;
15399 +   /* Initialize property macro variables */
15400 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15401 +   %include temp;
15402 +   filename temp;
15404 +   %EM_SetProperties;
15406 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15407 +   %EM_GETNAME(key=EMTREE, type=DATA);
15408 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15409 +     /* if import eq Y and no importtable defined, throw an exception */
15410 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15411 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15412 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15413 +         %put &em_codebar;
15414 +         %put &errmsg;
15415 +         %put &em_codebar;
15416 +         %goto doendm;
15417 +      %end;
15418 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15419 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15420 +         %put &em_codebar;
15421 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15422 +         %put &errormsg;
15423 +         %put &em_codebar;
15424 +         %goto doendm;
15425 +      %end;
15426 +      %else %do;
15427 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15428 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15429 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15430 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15431 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15432 +         %let dsid = %sysfunc(close(&dsid));
15433 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15434 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15435 +            %put &em_codebar;
15436 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15437 +            %put &errormsg;
15438 +            %put &em_codebar;
15439 +            %goto doendm;
15440 +         %end;
15441 +      %end;
15442 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15443 +         proc delete data=&EM_USER_EMTREE;
15444 +         run;
15445 +      %end;
15446 +   %end;
15447 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15448 +      proc delete data=&EM_USER_EMTREE;
15449 +      run;
15450 +   %end;
15452 +   /* load tree macros */
15453 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15454 +   %include temp;
15455 +   filename temp;
15457 +   /* data sets */
15458 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15459 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15460 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15462 +   /* files */
15463 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15465 +   /* check actual num of target levels */
15466 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15467 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15468 +                              nLevel=_nTargetLevel );
15469 +      %if &_nTargetLevel  > 2 %then %do;
15470 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15471 +        %put &em_codebar;
15472 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15473 +        %put &errormsg;
15474 +        %put &em_codebar;
15475 +        %goto doendm;
15476 +      %end;
15477 +   %end;
15479 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15480 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15481 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15482 +        %let costflag=0;
15483 +        data _null_;
15484 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15485 +          if eof then call symput("costflag", _N_);
15486 +        run;
15487 +        %if &costflag gt 0 %then %do;
15488 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15489 +          %put &em_codebar;
15490 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15491 +          %put &errormsg;
15492 +          %put &em_codebar;
15493 +          %goto doendm;
15494 +       %end;
15495 +     %end;
15496 +   %end;
15498 +   /* determine if multiple targets will be processed */
15499 +   %let em_tree_multipleTargets=N;
15500 +   %let em_tree_numTarget = 1;
15501 +   %let em_tree_targetVars=;
15503 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15504 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15505 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15506 +         %let em_tree_multipleTargets=N;
15507 +      %end;
15508 +      %else %do;
15509 +         /* create macro array of targets  */
15510 +         data _null_;
15511 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15512 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15513 +           if eof then
15514 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15515 +        run;
15517 +        %if &em_tree_numTarget gt 1 %then %do;
15518 +           %let em_tree_multipleTargets=Y;
15519 +        %end;
15520 +      %end;
15521 +   %end;
15523 +   /* create view of only necessary variable for performance reasons */
15524 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15525 +   data &tempData / view=&tempData;
15526 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15527 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15528 +       %EM_TARGET
15529 +     %end;
15530 +     %else %do;
15531 +       %if &em_tree_numTarget ne 0 %then %do;
15532 +         %do i=1 %to &em_tree_numTarget;
15533 +            &&em_tree_targetVars&i
15534 +         %end;
15535 +       %end;
15536 +     %end;
15537 +     );
15538 +   run;
15540 +   /* run Tree procedure */
15541 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15543 +   /* Check return code and throw exception if error is detected */
15544 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15545 +   %if &syserr %then %do;
15546 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15547 +     %goto doendm;
15548 +   %end;
15550 +   /* add decision score code if multiple targets are processed */
15551 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15552 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15553 +   %end;
15555 +   /* create outfit dataset if multiple score statements have been executed */
15556 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15558 +   /* create English Rules */
15559 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15560 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15561 +       %em_tree_makeEnglishRules;
15563 +       /* English Rules */
15564 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15566 +     %end;
15567 +   filename x;
15569 +   %doendm:
15570 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15571 +%macro EM_SetProperties;
15573 +   /* train properties */
15574 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15575 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15576 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15577 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15578 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15579 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15580 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15581 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15582 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15583 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15584 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15585 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15586 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15587 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15588 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15589 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15590 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15591 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15592 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15602 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15603 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15604 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15606 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15607 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15608 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15609 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15610 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15611 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15616 +   /* properties for interactive sample */
15617 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15622 +   /* report properties */
15623 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15637 +   /* score properties */
15638 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15641 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15643 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15644 +  %global &nLevel;
15645 +  proc dmdb batch data=&indata
15646 +    classout=_tmp_dmdbout;
15647 +    class &target;
15648 +  run;
15649 +  data _tmp_dmdbout;
15650 +    set _tmp_dmdbout;
15651 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15652 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15653 +  run;
15654 +  data _null_;
15655 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15656 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15657 +    %let dsid = %sysfunc(close(&dsid));
15658 +     call symput("&nLevel", put(&_obs, Best12.));
15659 +  run;
15661 +  proc datasets lib=work nolist;
15662 +     delete _tmp_dmdbout;
15663 +  run;
15664 +  quit;
15665 +%Mend EM_CheckBinaryTargetLevel;
15668 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15670 +  /* determine the number of obs in training data */
15671 +  proc sql;
15672 +    reset noprint;
15673 +    select count(*) into :em_nobs from &indata;
15674 +  quit;
15676 +  /* determine the number of input variables */
15677 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15678 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15680 +  /* retrieve targetEvent from decmeta */
15681 +  %let targetEvent=;
15682 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15683 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15684 +      data _null_;
15685 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15686 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15687 +      run;
15688 +    %end;
15689 +  %end;
15691 +  /* create targetTable if multipleTar eq Y */
15692 +  data temptarget;
15693 +    set &EM_DATA_VARIABLESET;
15694 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15695 +  run;
15697 + /* data sets */
15698 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15699 + %EM_GETNAME(key=EMTREE,        type=DATA);
15700 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15701 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15702 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15703 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15704 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15705 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15706 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15707 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15709 + /* files */
15710 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15711 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15713 + /* turn on pmml if requested */
15714 + %let nnpmml=0;
15715 + %if %symexist(EM_PMML) %then %do;
15716 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15717 +       %let nnpmml=1;
15719 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15720 +%end;
15722 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15724 + %if &nnpmml or &numClassTarget %then %do;
15726 +       /* create dmdb needed for pmml generation */
15727 +       %let tree_maxlevel = 512;
15728 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15729 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15730 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15731 +         %end;
15732 +       %end;
15733 +       %if &tree_maxlevel gt 0 %then %do;
15734 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15735 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15736 +       %end;
15738 +       %let targetOrderString =;
15739 +       %let targetString = ;
15740 +       data _null_;
15741 +          length orderString nameString $10000;
15742 +          retain orderString nameString;
15743 +          set &em_data_variableset end=eof;
15744 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15745 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15746 +          %end;
15747 +          %else %do;
15748 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15749 +          %end;          select(order);
15750 +            when('')        order ='DESC';
15751 +            when('FMTASC')  order='ASCFMT';
15752 +            when('FMTDESC') order='DESFMT';
15753 +            otherwise;
15754 +          end;
15755 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15756 +          nameString = trim(nameString)!!' '!!trim(NAME);
15758 +          if eof then do;
15759 +             call symput('targetOrderString', trim(orderString));
15760 +             call symput('targetString', trim(nameString));
15761 +          end;
15762 +       run;
15764 +       %let arborkluge= "work._treeDMDB";
15766 +       proc dmdb batch data=&indata
15767 +       %if &nnpmml %then %do;
15768 +           PMML
15769 +       %end;
15770 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15773 +   %if &nnpmml %then %do;
15774 +        %if "%EM_ID" ne "" %then %do;
15775 +          id %EM_ID;
15776 +        %end;
15777 +        %if &EM_NUM_CLASS gt 0 %then %do;
15778 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15779 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15780 +               &targetOrderString;
15781 +        %end;
15782 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15783 +          var %EM_INTERVAL;
15784 +        %end;
15785 +        target &targetString %EM_INTERVAL_TARGET;
15786 +        %if "%EM_FREQ" ne "" %then %do;
15787 +          freq %EM_FREQ;
15788 +        %end;
15789 +  %end;
15790 +  %else %do;
15791 +      class  &targetOrderString;
15792 +      target &targetString %EM_INTERVAL_TARGET;
15793 +  %end;
15794 +       run;
15795 +       quit;
15797 +       proc datasets lib=work nolist;
15798 +          delete classout varout;
15799 +       run;
15800 +       quit;
15802 +    %end;
15803 + %end;
15805 + /* run Arbor procedure */
15806 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15807 +  proc arbor data=&INDATA
15809 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15810 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15811 +  %end;
15813 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15814 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15815 +  %end;
15817 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15818 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15819 +  %end;
15821 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15822 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15823 +  %end;
15825 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15826 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15827 +  %end;
15829 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15830 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15831 +  %end;
15832 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15833 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15834 +  %end;
15835 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15836 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15837 +  %end;
15839 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15840 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15841 +      alpha = &EM_PROPERTY_SIGLEVEL
15842 +    %end;
15843 +  %end;
15845 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15846 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15847 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15848 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15849 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15851 +        padjust =
15852 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15853 +          &chaid
15854 +        %end;
15855 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15856 +          DEPTH
15857 +        %end;
15858 +      %end;
15859 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15860 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15861 +         pvars = &num_inputs
15862 +      %end;
15863 +    %end;
15864 +  %end;
15865 +  %else %do;
15866 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15867 +         padjust = NONE
15868 +      %end;
15869 +  %end;
15871 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15872 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15873 +    Maxrules = &num_nrules
15874 +  %end;
15876 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15877 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15878 +    Maxsurrs = &num_nsurrs
15879 +  %end;
15881 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15882 +     Missing=&EM_PROPERTY_MISSINGVALUE
15883 +  %end;
15885 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15886 +     USEVARONCE
15887 +  %end;
15889 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15890 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15891 +  %end;
15894 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15895 +    event = "&targetEvent"
15896 +  %end;
15898 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15899 +     DECSEARCH
15900 +  %end;
15902 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15903 +     PRIORSSEARCH
15904 +  %end;
15906 +  %if &arbor_1 ne %then %do;
15907 +    &arbor_1
15908 +  %end;
15910 +  %if &em_arbor ne %then %do;
15911 +     &em_arbor
15912 +  %end;
15913 +  ;
15914 + %end;
15915 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15916 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15917 +       interact;
15918 + %end;
15919 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15920 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15921 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15922 +    %put &em_codebar;
15923 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15924 +    %put &errormsg;
15925 +    %put &em_codebar;
15926 +    %goto doendm;
15927 +   %end;
15928 +   %else %do;
15929 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15930 +       interact;
15931 +   %end;
15932 + %end;
15934 + %else %do;
15935 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15936 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15937 +    %put &em_codebar;
15938 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15939 +    %put &errormsg;
15940 +    %put &em_codebar;
15941 +    %goto doendm;
15942 +   %end;
15943 +   %else %do;
15944 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15945 +        interact;
15946 +   %end;
15947 + %end;
15949 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15950 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15951 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15952 +    %end;
15954 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15955 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15956 +    %end;
15958 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15959 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15960 +    %end;
15962 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15963 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15964 +    %end;
15966 +    %if "%EM_FREQ" ne "" %then %do;
15967 +       freq %EM_FREQ;
15968 +    %end;
15970 +    %if "&multipleTar" eq "Y" %then %do;
15971 +       /* cycle through all target vars in variableset */
15972 +       %let tdsid = %sysfunc(open(temptarget));
15973 +       %if &tdsid %then %do;
15974 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15975 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15976 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15977 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15978 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15979 +             target &var / level = &lvl
15980 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15981 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
15982 +             %end;
15983 +             %else %if "&lvl" eq "INTERVAL" %then %do;
15984 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
15985 +             %end;
15986 +             %else %if "&lvl" eq "ORDINAL" %then %do;
15987 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
15988 +             %end;
15989 +          %end;
15990 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
15991 +       %end;
15992 +       useTarget variable = %EM_TARGET;
15993 +    %end;
15994 +    %else %do;
15995 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
15996 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
15997 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
15998 +      %end;
15999 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16000 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16001 +      %end;
16002 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16003 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16004 +      %end;
16005 +    %end;
16007 +    %if "&multipleTar" eq "N" %then %do;
16008 +      &EM_DEC_STATEMENT;
16009 +    %end;
16011 +    Performance &EM_PROPERTY_PERFORMANCE
16012 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16013 +      nodesize=&EM_PROPERTY_NODESAMPLE
16014 +    %end;
16015 +    ;
16017 +    %if "&intFlag" eq "Y" %then %do;
16018 +       INTERACT Largest;
16019 +       Train maxnewdepth=0;
16020 +    %end;
16022 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16023 +         Assess
16024 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16025 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16026 +              %put &em_codebar;
16027 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16028 +              %put &errormsg;
16029 +              %put &em_codebar;
16030 +            %end;
16031 +            %else %do;
16032 +               Validata=&EM_IMPORT_VALIDATE
16033 +            %end;
16034 +         %end;
16035 +         %else %do;
16036 +           NoValidata
16037 +         %end;
16038 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16039 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16040 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16041 +               %if &dsid %then %do;
16042 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16043 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16044 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16045 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16046 +                   %else %do;
16047 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16048 +                      %else %let measure= MISC;
16049 +                   %end;
16050 +                 %end;
16051 +               %end;
16052 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16053 +            %end;
16054 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16055 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16056 +                 %let measure=ASE;
16057 +              %end;
16058 +              %else %do;
16059 +                 %let measure=MISC;
16060 +              %end;
16061 +            %end;
16062 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16063 +              %let measure=ASE;
16064 +            %end;
16065 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16066 +               %let measure = LIFT;
16067 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16068 +               %if &dsid %then %do;
16069 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16070 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16071 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16072 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16073 +                 %end;
16074 +               %end;
16075 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16076 +            %end;
16077 +            measure=&measure
16078 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16079 +               event = "&targetEvent"
16080 +            %end;
16081 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16082 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16083 +            %end;
16084 +         %end;
16085 +         %if "&multipleTar" eq "N" %then %do;
16086 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16087 +               CV
16088 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16089 +                 CVNITer = &EM_PROPERTY_CVNITER
16090 +               %end;
16091 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16092 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16093 +               %end;
16094 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16095 +                 CVSeed = &EM_PROPERTY_CVSEED
16096 +               %end;
16097 +            %end;
16098 +         %end;
16099 +       %end;
16100 +      ;
16102 +      %if "&intFlag" ne "Y" %then %do;
16103 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16104 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16105 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16106 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16108 +          SUBTREE &subtree
16109 +          %if "&subtree" eq "NLEAVES" %then %do;
16110 +            =&EM_PROPERTY_NSUBTREE
16111 +          %end;
16112 +          ;
16113 +        %end;
16115 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16116 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16117 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16118 +          %end;
16119 +       %end;
16120 +      %end;
16121 + %end;
16124 + MakeMacro nleaves = nleaves;
16125 + save
16126 + %if "&EM_USER_EMTREE" ne "" %then %do;
16127 +   MODEL=&EM_USER_EMTREE
16128 + %end;
16129 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16130 +   SEQUENCE=&EM_USER_OUTSEQ
16131 + %end;
16132 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16133 +   IMPORTANCE=&EM_USER_OUTIMPORT
16134 + %end;
16135 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16136 +   NODESTAT=&EM_USER_OUTNODES
16137 + %end;
16138 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16139 +   SUMMARY=&EM_USER_OUTSUMMARY
16140 + %end;
16141 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16142 +   STATSBYNODE=&EM_USER_OUTSTATS
16143 + %end;
16144 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16145 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16146 + %end;
16147 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16148 +   Pathlistnonmissing=&EM_USER_OUTPATH
16149 + %end;
16150 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16151 +   RULES = &EM_USER_OUTRULES
16152 + %end;
16153 + ;
16155 + %if "&intFlag" ne "Y" %then %do;
16157 +   %let lookupString = ;
16158 +   %if ^%symexist(EM_OPTION) %then
16159 +      %let EM_OPTION=;
16161 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16162 +      %let lookupString = LOOKUP=SELECT;
16163 +   %end;
16165 +   %let codetext=;
16166 +   %let norescodetxt=;
16168 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16169 +     %let codetext=&codetext DUMMY;
16170 +     %let norescodetxt=&norescodetxt DUMMY;
16171 +   %end;
16172 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16173 +     %let codetext=&codetext NOLEAFID;
16174 +     %let norescodetxt=&norescodetxt NOLEAFID;
16175 +   %end;
16176 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16177 +     %let norescodetxt=&norescodetxt NOPRED;
16178 +   %end;
16180 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16181 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16183 +   %if &nnpmml %then %do;
16184 +     code pmml;
16185 +   %end;
16187 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16188 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16189 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16190 +   %end;
16191 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16192 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16193 +   %end;
16194 + %end;
16196 + run;
16197 + quit;
16199 + /*%em_checkerror(); */
16200 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16201 +   /* Delete DMDB catalog */
16202 +   proc datasets lib=work nolist;
16203 +       delete _treeDMDB / mt=cat;
16204 +  run;
16205 +  %end;
16207 + %if &nnpmml %then %do;
16208 +    ods pmml close;
16209 + %end;
16211 +  %doendm:
16213 +%mend em_tree_runTreeProcedure;
16215 +%macro em_tree_createFitStats( multipleTar= );
16218 +  /* create targetTable is multipleTar eq Y */
16219 +  data temptarget;
16220 +    set &EM_DATA_VARIABLESET;
16221 +    where ROLE="TARGET";
16222 +  run;
16224 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16225 +   data &EM_USER_EMOUTFIT;
16226 +     length target $32;
16227 +     merge work.fit_train
16228 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16229 +       work.fit_valid
16230 +     %end;
16231 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16232 +       work.fit_test
16233 +     %end;
16234 +     ;
16235 +     %if "&multipleTar" eq "N" %then %do;
16236 +       target="%EM_TARGET";
16237 +     %end;
16238 +     %else %do;
16239 +       target = _TARGET_;
16240 +     %end;
16241 +     drop _NW_ _SUMW_
16242 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16243 +        _VSUMW_
16244 +     %end;
16245 +     ;
16246 +   run;
16248 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16249 +     proc datasets library=work nolist;
16250 +       delete fit_valid;
16251 +     run;
16252 +   %end;
16253 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16254 +     proc datasets library=work nolist;
16255 +       delete fit_test;
16256 +     run;
16257 +   %end;
16259 +%mend em_tree_createFitStats;
16262 +%macro em_tree_makeEnglishRules;
16264 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16265 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16267 +  /* verify that necessary tables exist and if not, skip processing */
16268 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16269 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16270 +    %goto doendm;
16271 +  %end;
16272 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16273 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16274 +    %goto doendm;
16275 +  %end;
16277 +  /* determine length of variable in outpath dataset */
16278 +  %let vlength= ;
16279 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16280 +  %if &dsid ne %then %do;
16281 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16282 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16283 +  %end;
16284 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16286 +  data tempoutpath;
16287 +    length varname $&vlength;
16288 +    retain varname;
16289 +    set &EM_USER_OUTPATH;
16291 +    if ^missing(variable) then varname=variable;
16292 +    else if ^missing(var_name) then varname=var_name;
16293 +    output;
16294 +  run;
16296 +  /* create an array of generated predicted variable names */
16297 +  %let tree_pred_vars = ;
16298 +  %let tree_pred_label = ;
16299 +  %let numpred= 0;
16300 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16302 +    data _null_;
16303 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16304 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16305 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16306 +     if eof then
16307 +       call symput('numpred', strip(put(_N_, BEST.)));
16308 +    run;
16309 +  %end;
16311 +  /* determine if NPRIORS exists in outnodes  */
16312 +  %local nprior_flag;
16313 +  data _null_;
16314 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16315 +    if eof then do;
16316 +      call symput('nprior_flag', strip(put(npriors, best.)));
16317 +    end;
16318 +  run;
16320 +  proc sort data=tempoutpath; by node; run;
16321 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16323 +  data tempoutpath;
16324 +    merge tempoutpath(in=_a) outnodes(keep= node
16325 +    %if "&nprior_flag" ne "." %then %do;
16326 +      NPRIORS
16327 +    %end;
16328 +    %else %do;
16329 +      N
16330 +    %end;
16331 +    %if &numpred gt 0 %then %do;
16332 +      %do i=1 %to &numpred;
16333 +        &&tree_pred_vars&i
16334 +      %end;
16335 +    %end;
16336 +    );
16337 +    by node;
16338 +    if _a;
16339 +  run;
16341 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16343 +  data _null_;
16344 +    file x;
16345 +    set tempoutpath;
16346 +    by node descending varname;
16347 +    retain origvar oldnode string;
16348 +    length origvar $32 oldnode 8 string $200;
16350 +    if _N_ = 1 then do;
16351 +      origvar = varname;
16352 +      oldnode = node;
16353 +    end;
16355 +    if first.node then do;
16356 +       put "&EM_CODEBAR";
16357 +       put " Node = " node;
16358 +       put "&EM_CODEBAR";
16359 +    end;
16361 +      if first.varname then do;
16362 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16363 +            if MISSING(CHARACTER_VALUE) then do;
16364 +             if NUMERIC_VALUE ne .  then do;
16365 +              if ^first.node then do;
16366 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16367 +              end;
16368 +              else do;
16369 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16370 +              end;
16371 +             end;
16372 +            end;
16373 +            else do;
16374 +              if ^first.node then do;
16375 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16376 +              end;
16377 +              else do;
16378 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16379 +              end;
16380 +             end;
16381 +         end;
16382 +         else if RELATION in ("=") then do;
16383 +            if ^first.node then do;
16384 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16385 +            end;
16386 +            else do;
16387 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16388 +            end;
16389 +         end;
16390 +         else if RELATION in ("ISMISSING") then do;
16391 +            if ^first.node then do;
16392 +              string = " AND "|| strip(varname) || " equals Missing";
16393 +            end;
16394 +            else do;
16395 +              string = "if "|| strip(varname) ||" equals Missing";
16396 +            end;
16397 +         end;
16398 +         else if RELATION in ("ISNOTMISSING") then do;
16399 +            if ^first.node then do;
16400 +              string = " AND "|| strip(varname) || " equals All Values";
16401 +            end;
16402 +            else do;
16403 +              string = "if "|| strip(varname) ||" equals All Values";
16404 +            end;
16405 +         end;
16406 +         if ^missing(varname) then origvar = varname;
16407 +         oldnode=node;
16409 +      end;
16410 +      else do;
16411 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16412 +          if MISSING(CHARACTER_VALUE) then do;
16413 +           if  NUMERIC_VALUE ne .  then do;
16414 +            if ^MISSING(string) then
16415 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16416 +            else
16417 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16418 +           end;
16419 +          end;
16420 +          else do;
16421 +            if ^MISSING(string) then
16422 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16423 +            else
16424 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16425 +          end;
16427 +         end;
16428 +         else if RELATION in ("=") then do;
16429 +           string = strip(string)||", "||strip(character_value);
16430 +         end;
16431 +         else if RELATION in ("ISMISSING") then do;
16433 +         end;
16434 +         if ^missing(varname) then origvar = varname;
16435 +         oldnode=node;
16436 +      end;
16437 +      if last.varname then do;
16438 +         if RELATION in ("ISMISSING") then do;
16439 +           if ^first.varname then do;
16440 +             string = strip(string) || " or MISSING";
16441 +           end;
16442 +         end;
16443 +         put string;
16444 +         if ^missing(varname) then origvar = varname;
16445 +         oldnode=node;
16446 +      end;
16448 +      if last.node then do;
16449 +         put "then ";
16450 +         put " Tree Node Identifier   = " node;
16452 +         %if "&nprior_flag" ne "." %then %do;
16453 +           put " Number of Observations = " NPRIORS;
16454 +         %end;
16455 +         %else %do;
16456 +           put " Number of Observations = " N;
16457 +         %end;
16459 +         %if &numpred gt 0 %then %do;
16460 +           %do i=1 %to &numpred;
16461 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16462 +           %end;
16463 +         %end;
16465 +         put " ";
16466 +         if ^missing(varname) then origvar = varname;
16467 +         oldnode=node;
16468 +      end;
16470 +  run;
16472 +  proc datasets lib=work nolist;
16473 +    delete tempoutpath outnodes;
16474 +  run;
16476 +  %doendm:
16477 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.

NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      
NOTE: There were 108 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: 1601202 kilobytes of physical memory.
NOTE: Will use 108 out of 108 training cases.
NOTE: Using memory pool with 54597632 bytes.
NOTE: Passed training data 7 times.
NOTE: Training used 36760 bytes of work memory.
NOTE: The subtree sequence contains 4 subtrees. The largest has 7 nodes and 4 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Created macro variable NLEAVES equal to 4.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 327 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 7 observations and 16 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 23 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 71 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 4 observations and 18 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 42 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 7 observations and 5 variables.
NOTE: External file C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
      
NOTE: There were 108 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 7 variables.


NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
      
NOTE: There were 108 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 108 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      


NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.FIT_VALID (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.FIT_TEST (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 23 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 1 observations read from the data set EMWS1.TREE_CHURN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 7 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 7 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 7 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195   
NOTE: The file X is:
      Filename=C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=07Jan2024:02:26:51,
      Create Time=07Jan2024:02:08:51

NOTE: 41 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
      


NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      


NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
      

NOTE: Fileref X has been deassigned.
16479  
16480  *------------------------------------------------------------*;
16481  * End TRAIN: Tree;
16482  *------------------------------------------------------------*;

16483  *------------------------------------------------------------*;
16484  * Close any missing semi colons;
16485  *------------------------------------------------------------*;
16486  ;
16487  ;
16488  ;
16489  ;
16490  quit;
16491  *------------------------------------------------------------*;
16492  * Close any unbalanced quotes;
16493  *------------------------------------------------------------*;
16494  /*; *"; *'; */
16495  ;
16496  run;
16497  quit;
16498  /* Reset EM Options */
16499  options formchar="|----|+|---+=|-/\<>*";
16500  options nocenter ls=256 ps=10000;
16501  goptions reset=all device=GIF NODISPLAY;

16502  proc sort data=WORK.EM_USER_REPORT;
16503  by ID VIEW;
16504  run;

NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

