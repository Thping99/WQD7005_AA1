*------------------------------------------------------------*
User:                Tsu
Date:                January 07, 2024
Time:                02:26:55
Site:                12601940
Platform:            W32_8HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                January 07, 2024
Time:                02:26:49
*------------------------------------------------------------*
14715  proc freq data=EMWS1.Tree_VariableSet noprint;
14716  table ROLE*LEVEL/out=WORK.TreeMETA;
14717  run;
 
NOTE: There were 13 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.TREEMETA has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
14718  proc print data=WORK.TreeMETA label noobs;
14719  var ROLE LEVEL COUNT;
14720  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14721  title9 ' ';
14722  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14723  run;
 
NOTE: There were 6 observations read from the data set WORK.TREEMETA.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
14724  title10;
 
14725  %let EMNORLEN = %DMNORLEN;
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
>>>>>>>>>>>>>> TARGET(   USE='Y'
                         REPORT='N'
                         NAME='Churn'
                         ROLE='TARGET'
                         LEVEL='INTERVAL'
                         ORDER=''
                         CREATOR=''
                         FORMATTYPE='QUANTITY'
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='N'
                         LABEL=''
                         FORMAT='BEST12.0'
                         INFORMAT='BEST32.0'
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=8
                      )[11691]
PERFORMANCE  DETAILS
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
"No decisions defined for target "Churn"."
14786  proc print data = EMWS1.Tree_Churn_DM noobs label;
14787  var _type_ variable label;
14788  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14789  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14790  title9 ' ';
14791  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14792  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_CHURN_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14793  title10;
 
14794  %let EMEXCEPTIONSTRING=;
15291  *------------------------------------------------------------*;
15292  * Tree: Generation of macros and macro variables;
15293  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15294  *------------------------------------------------------------*;
 
15295  %let EMEXCEPTIONSTRING=;
15296  *------------------------------------------------------------*;
15297  * TRAIN: Tree;
15298  *------------------------------------------------------------*;
15299  %let EM_ACTION = TRAIN;
15300  %let syscc = 0;
15301  %macro main;
15302
15303    %if %upcase(&EM_ACTION) = CREATE %then %do;
15304      filename temp catalog 'sashelp.emmodl.tree_create.source';
15305      %include temp;
15306      filename temp;
15307
15308      %em_tree_create;
15309    %end;
15310
15311     %else
15312     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15313
15314         filename temp catalog 'sashelp.emmodl.tree_train.source';
15315         %include temp;
15316         filename temp;
15317         %em_tree_train;
15318     %end;
15319
15320    %else
15321    %if %upcase(&EM_ACTION) = SCORE %then %do;
15322      filename temp catalog 'sashelp.emmodl.tree_score.source';
15323      %include temp;
15324      filename temp;
15325
15326      %em_tree_score;
15327
15328    %end;
15329
15330    %else
15331    %if %upcase(&EM_ACTION) = REPORT %then %do;
15332
15333         filename temp catalog 'sashelp.emmodl.tree_report.source';
15334         %include temp;
15335         filename temp;
15336
15337         %em_tree_report;
15338     %end;
15339
15340    %else
15341    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15342
15343         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15344         %include temp;
15345         filename temp;
15346         %EM_TREE_OPENTREEVIEWER;
15347
15348     %end;
15349
15350    %else
15351    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15352
15353         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15354         %include temp;
15355         filename temp;
15356         %EM_TREE_CLOSETREEVIEWER;
15357
15358     %end;
15359
15360
15361     %doendm:
15362  %mend main;
15363
15364  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15366 +%macro em_tree_train;
15368 +   %if &EM_IMPORT_DATA eq %then %do;
15369 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15370 +       %put &em_codebar;
15371 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15372 +       %put &errormsg;
15373 +       %put &em_codebar;
15374 +       %goto doendm;
15375 +   %end;
15376 +   %else
15377 +       %let EMEXCEPTIONSTRING =;
15379 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15380 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15381 +        %put &em_codebar;
15382 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15383 +        %put &errormsg;
15384 +        %put &em_codebar;
15385 +        %goto doendm;
15386 +   %end;
15388 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15389 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15390 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15391 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15392 +        %put &em_codebar;
15393 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15394 +        %put &errormsg;
15395 +        %put &em_codebar;
15396 +        %goto doendm;
15397 +   %end;
15399 +   /* Initialize property macro variables */
15400 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15401 +   %include temp;
15402 +   filename temp;
15404 +   %EM_SetProperties;
15406 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15407 +   %EM_GETNAME(key=EMTREE, type=DATA);
15408 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15409 +     /* if import eq Y and no importtable defined, throw an exception */
15410 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15411 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15412 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15413 +         %put &em_codebar;
15414 +         %put &errmsg;
15415 +         %put &em_codebar;
15416 +         %goto doendm;
15417 +      %end;
15418 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15419 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15420 +         %put &em_codebar;
15421 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15422 +         %put &errormsg;
15423 +         %put &em_codebar;
15424 +         %goto doendm;
15425 +      %end;
15426 +      %else %do;
15427 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15428 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15429 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15430 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15431 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15432 +         %let dsid = %sysfunc(close(&dsid));
15433 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15434 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15435 +            %put &em_codebar;
15436 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15437 +            %put &errormsg;
15438 +            %put &em_codebar;
15439 +            %goto doendm;
15440 +         %end;
15441 +      %end;
15442 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15443 +         proc delete data=&EM_USER_EMTREE;
15444 +         run;
15445 +      %end;
15446 +   %end;
15447 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15448 +      proc delete data=&EM_USER_EMTREE;
15449 +      run;
15450 +   %end;
15452 +   /* load tree macros */
15453 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15454 +   %include temp;
15455 +   filename temp;
15457 +   /* data sets */
15458 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15459 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15460 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15462 +   /* files */
15463 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15465 +   /* check actual num of target levels */
15466 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15467 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15468 +                              nLevel=_nTargetLevel );
15469 +      %if &_nTargetLevel  > 2 %then %do;
15470 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15471 +        %put &em_codebar;
15472 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15473 +        %put &errormsg;
15474 +        %put &em_codebar;
15475 +        %goto doendm;
15476 +      %end;
15477 +   %end;
15479 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15480 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15481 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15482 +        %let costflag=0;
15483 +        data _null_;
15484 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15485 +          if eof then call symput("costflag", _N_);
15486 +        run;
15487 +        %if &costflag gt 0 %then %do;
15488 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15489 +          %put &em_codebar;
15490 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15491 +          %put &errormsg;
15492 +          %put &em_codebar;
15493 +          %goto doendm;
15494 +       %end;
15495 +     %end;
15496 +   %end;
15498 +   /* determine if multiple targets will be processed */
15499 +   %let em_tree_multipleTargets=N;
15500 +   %let em_tree_numTarget = 1;
15501 +   %let em_tree_targetVars=;
15503 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15504 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15505 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15506 +         %let em_tree_multipleTargets=N;
15507 +      %end;
15508 +      %else %do;
15509 +         /* create macro array of targets  */
15510 +         data _null_;
15511 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15512 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15513 +           if eof then
15514 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15515 +        run;
15517 +        %if &em_tree_numTarget gt 1 %then %do;
15518 +           %let em_tree_multipleTargets=Y;
15519 +        %end;
15520 +      %end;
15521 +   %end;
15523 +   /* create view of only necessary variable for performance reasons */
15524 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15525 +   data &tempData / view=&tempData;
15526 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15527 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15528 +       %EM_TARGET
15529 +     %end;
15530 +     %else %do;
15531 +       %if &em_tree_numTarget ne 0 %then %do;
15532 +         %do i=1 %to &em_tree_numTarget;
15533 +            &&em_tree_targetVars&i
15534 +         %end;
15535 +       %end;
15536 +     %end;
15537 +     );
15538 +   run;
15540 +   /* run Tree procedure */
15541 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15543 +   /* Check return code and throw exception if error is detected */
15544 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15545 +   %if &syserr %then %do;
15546 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15547 +     %goto doendm;
15548 +   %end;
15550 +   /* add decision score code if multiple targets are processed */
15551 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15552 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15553 +   %end;
15555 +   /* create outfit dataset if multiple score statements have been executed */
15556 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15558 +   /* create English Rules */
15559 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15560 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15561 +       %em_tree_makeEnglishRules;
15563 +       /* English Rules */
15564 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15566 +     %end;
15567 +   filename x;
15569 +   %doendm:
15570 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15571 +%macro EM_SetProperties;
15573 +   /* train properties */
15574 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15575 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15576 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15577 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15578 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15579 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15580 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15581 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15582 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15583 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15584 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15585 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15586 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15587 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15588 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15589 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15590 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15591 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15592 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15595 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15596 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15597 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15601 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15602 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15603 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15604 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15606 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15607 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15608 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15609 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15610 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15611 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15616 +   /* properties for interactive sample */
15617 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15618 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15620 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15622 +   /* report properties */
15623 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15624 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15625 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15626 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15627 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15628 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15629 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15630 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15631 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15632 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15633 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15634 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15635 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15637 +   /* score properties */
15638 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15639 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15641 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Deleting EMWS1.TREE_EMTREE (memtype=DATA).
NOTE: PROCEDURE DELETE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15643 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15644 +  %global &nLevel;
15645 +  proc dmdb batch data=&indata
15646 +    classout=_tmp_dmdbout;
15647 +    class &target;
15648 +  run;
15649 +  data _tmp_dmdbout;
15650 +    set _tmp_dmdbout;
15651 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15652 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15653 +  run;
15654 +  data _null_;
15655 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15656 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15657 +    %let dsid = %sysfunc(close(&dsid));
15658 +     call symput("&nLevel", put(&_obs, Best12.));
15659 +  run;
15661 +  proc datasets lib=work nolist;
15662 +     delete _tmp_dmdbout;
15663 +  run;
15664 +  quit;
15665 +%Mend EM_CheckBinaryTargetLevel;
15668 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15670 +  /* determine the number of obs in training data */
15671 +  proc sql;
15672 +    reset noprint;
15673 +    select count(*) into :em_nobs from &indata;
15674 +  quit;
15676 +  /* determine the number of input variables */
15677 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15678 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15680 +  /* retrieve targetEvent from decmeta */
15681 +  %let targetEvent=;
15682 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15683 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15684 +      data _null_;
15685 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15686 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15687 +      run;
15688 +    %end;
15689 +  %end;
15691 +  /* create targetTable if multipleTar eq Y */
15692 +  data temptarget;
15693 +    set &EM_DATA_VARIABLESET;
15694 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15695 +  run;
15697 + /* data sets */
15698 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15699 + %EM_GETNAME(key=EMTREE,        type=DATA);
15700 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15701 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15702 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15703 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15704 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15705 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15706 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15707 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15709 + /* files */
15710 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15711 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15713 + /* turn on pmml if requested */
15714 + %let nnpmml=0;
15715 + %if %symexist(EM_PMML) %then %do;
15716 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15717 +       %let nnpmml=1;
15719 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15720 +%end;
15722 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15724 + %if &nnpmml or &numClassTarget %then %do;
15726 +       /* create dmdb needed for pmml generation */
15727 +       %let tree_maxlevel = 512;
15728 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15729 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15730 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15731 +         %end;
15732 +       %end;
15733 +       %if &tree_maxlevel gt 0 %then %do;
15734 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15735 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15736 +       %end;
15738 +       %let targetOrderString =;
15739 +       %let targetString = ;
15740 +       data _null_;
15741 +          length orderString nameString $10000;
15742 +          retain orderString nameString;
15743 +          set &em_data_variableset end=eof;
15744 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15745 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15746 +          %end;
15747 +          %else %do;
15748 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15749 +          %end;          select(order);
15750 +            when('')        order ='DESC';
15751 +            when('FMTASC')  order='ASCFMT';
15752 +            when('FMTDESC') order='DESFMT';
15753 +            otherwise;
15754 +          end;
15755 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15756 +          nameString = trim(nameString)!!' '!!trim(NAME);
15758 +          if eof then do;
15759 +             call symput('targetOrderString', trim(orderString));
15760 +             call symput('targetString', trim(nameString));
15761 +          end;
15762 +       run;
15764 +       %let arborkluge= "work._treeDMDB";
15766 +       proc dmdb batch data=&indata
15767 +       %if &nnpmml %then %do;
15768 +           PMML
15769 +       %end;
15770 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15773 +   %if &nnpmml %then %do;
15774 +        %if "%EM_ID" ne "" %then %do;
15775 +          id %EM_ID;
15776 +        %end;
15777 +        %if &EM_NUM_CLASS gt 0 %then %do;
15778 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15779 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15780 +               &targetOrderString;
15781 +        %end;
15782 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15783 +          var %EM_INTERVAL;
15784 +        %end;
15785 +        target &targetString %EM_INTERVAL_TARGET;
15786 +        %if "%EM_FREQ" ne "" %then %do;
15787 +          freq %EM_FREQ;
15788 +        %end;
15789 +  %end;
15790 +  %else %do;
15791 +      class  &targetOrderString;
15792 +      target &targetString %EM_INTERVAL_TARGET;
15793 +  %end;
15794 +       run;
15795 +       quit;
15797 +       proc datasets lib=work nolist;
15798 +          delete classout varout;
15799 +       run;
15800 +       quit;
15802 +    %end;
15803 + %end;
15805 + /* run Arbor procedure */
15806 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15807 +  proc arbor data=&INDATA
15809 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15810 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15811 +  %end;
15813 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15814 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15815 +  %end;
15817 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15818 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15819 +  %end;
15821 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15822 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15823 +  %end;
15825 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15826 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15827 +  %end;
15829 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15830 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15831 +  %end;
15832 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15833 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15834 +  %end;
15835 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15836 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15837 +  %end;
15839 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15840 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15841 +      alpha = &EM_PROPERTY_SIGLEVEL
15842 +    %end;
15843 +  %end;
15845 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15846 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15847 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15848 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15849 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15851 +        padjust =
15852 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15853 +          &chaid
15854 +        %end;
15855 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15856 +          DEPTH
15857 +        %end;
15858 +      %end;
15859 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15860 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15861 +         pvars = &num_inputs
15862 +      %end;
15863 +    %end;
15864 +  %end;
15865 +  %else %do;
15866 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15867 +         padjust = NONE
15868 +      %end;
15869 +  %end;
15871 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15872 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15873 +    Maxrules = &num_nrules
15874 +  %end;
15876 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15877 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15878 +    Maxsurrs = &num_nsurrs
15879 +  %end;
15881 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15882 +     Missing=&EM_PROPERTY_MISSINGVALUE
15883 +  %end;
15885 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15886 +     USEVARONCE
15887 +  %end;
15889 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15890 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15891 +  %end;
15894 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15895 +    event = "&targetEvent"
15896 +  %end;
15898 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15899 +     DECSEARCH
15900 +  %end;
15902 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15903 +     PRIORSSEARCH
15904 +  %end;
15906 +  %if &arbor_1 ne %then %do;
15907 +    &arbor_1
15908 +  %end;
15910 +  %if &em_arbor ne %then %do;
15911 +     &em_arbor
15912 +  %end;
15913 +  ;
15914 + %end;
15915 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15916 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15917 +       interact;
15918 + %end;
15919 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15920 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15921 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15922 +    %put &em_codebar;
15923 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15924 +    %put &errormsg;
15925 +    %put &em_codebar;
15926 +    %goto doendm;
15927 +   %end;
15928 +   %else %do;
15929 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15930 +       interact;
15931 +   %end;
15932 + %end;
15934 + %else %do;
15935 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15936 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15937 +    %put &em_codebar;
15938 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15939 +    %put &errormsg;
15940 +    %put &em_codebar;
15941 +    %goto doendm;
15942 +   %end;
15943 +   %else %do;
15944 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15945 +        interact;
15946 +   %end;
15947 + %end;
15949 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15950 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15951 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15952 +    %end;
15954 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15955 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15956 +    %end;
15958 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15959 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15960 +    %end;
15962 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15963 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15964 +    %end;
15966 +    %if "%EM_FREQ" ne "" %then %do;
15967 +       freq %EM_FREQ;
15968 +    %end;
15970 +    %if "&multipleTar" eq "Y" %then %do;
15971 +       /* cycle through all target vars in variableset */
15972 +       %let tdsid = %sysfunc(open(temptarget));
15973 +       %if &tdsid %then %do;
15974 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15975 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15976 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15977 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15978 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15979 +             target &var / level = &lvl
15980 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15981 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
15982 +             %end;
15983 +             %else %if "&lvl" eq "INTERVAL" %then %do;
15984 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
15985 +             %end;
15986 +             %else %if "&lvl" eq "ORDINAL" %then %do;
15987 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
15988 +             %end;
15989 +          %end;
15990 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
15991 +       %end;
15992 +       useTarget variable = %EM_TARGET;
15993 +    %end;
15994 +    %else %do;
15995 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
15996 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
15997 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
15998 +      %end;
15999 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
16000 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
16001 +      %end;
16002 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
16003 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
16004 +      %end;
16005 +    %end;
16007 +    %if "&multipleTar" eq "N" %then %do;
16008 +      &EM_DEC_STATEMENT;
16009 +    %end;
16011 +    Performance &EM_PROPERTY_PERFORMANCE
16012 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
16013 +      nodesize=&EM_PROPERTY_NODESAMPLE
16014 +    %end;
16015 +    ;
16017 +    %if "&intFlag" eq "Y" %then %do;
16018 +       INTERACT Largest;
16019 +       Train maxnewdepth=0;
16020 +    %end;
16022 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16023 +         Assess
16024 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16025 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16026 +              %put &em_codebar;
16027 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16028 +              %put &errormsg;
16029 +              %put &em_codebar;
16030 +            %end;
16031 +            %else %do;
16032 +               Validata=&EM_IMPORT_VALIDATE
16033 +            %end;
16034 +         %end;
16035 +         %else %do;
16036 +           NoValidata
16037 +         %end;
16038 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16039 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16040 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16041 +               %if &dsid %then %do;
16042 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16043 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16044 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16045 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16046 +                   %else %do;
16047 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16048 +                      %else %let measure= MISC;
16049 +                   %end;
16050 +                 %end;
16051 +               %end;
16052 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16053 +            %end;
16054 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16055 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16056 +                 %let measure=ASE;
16057 +              %end;
16058 +              %else %do;
16059 +                 %let measure=MISC;
16060 +              %end;
16061 +            %end;
16062 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16063 +              %let measure=ASE;
16064 +            %end;
16065 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16066 +               %let measure = LIFT;
16067 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16068 +               %if &dsid %then %do;
16069 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16070 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16071 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16072 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16073 +                 %end;
16074 +               %end;
16075 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16076 +            %end;
16077 +            measure=&measure
16078 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16079 +               event = "&targetEvent"
16080 +            %end;
16081 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16082 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16083 +            %end;
16084 +         %end;
16085 +         %if "&multipleTar" eq "N" %then %do;
16086 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16087 +               CV
16088 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16089 +                 CVNITer = &EM_PROPERTY_CVNITER
16090 +               %end;
16091 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16092 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16093 +               %end;
16094 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16095 +                 CVSeed = &EM_PROPERTY_CVSEED
16096 +               %end;
16097 +            %end;
16098 +         %end;
16099 +       %end;
16100 +      ;
16102 +      %if "&intFlag" ne "Y" %then %do;
16103 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16104 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16105 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16106 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16108 +          SUBTREE &subtree
16109 +          %if "&subtree" eq "NLEAVES" %then %do;
16110 +            =&EM_PROPERTY_NSUBTREE
16111 +          %end;
16112 +          ;
16113 +        %end;
16115 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16116 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16117 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16118 +          %end;
16119 +       %end;
16120 +      %end;
16121 + %end;
16124 + MakeMacro nleaves = nleaves;
16125 + save
16126 + %if "&EM_USER_EMTREE" ne "" %then %do;
16127 +   MODEL=&EM_USER_EMTREE
16128 + %end;
16129 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16130 +   SEQUENCE=&EM_USER_OUTSEQ
16131 + %end;
16132 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16133 +   IMPORTANCE=&EM_USER_OUTIMPORT
16134 + %end;
16135 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16136 +   NODESTAT=&EM_USER_OUTNODES
16137 + %end;
16138 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16139 +   SUMMARY=&EM_USER_OUTSUMMARY
16140 + %end;
16141 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16142 +   STATSBYNODE=&EM_USER_OUTSTATS
16143 + %end;
16144 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16145 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16146 + %end;
16147 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16148 +   Pathlistnonmissing=&EM_USER_OUTPATH
16149 + %end;
16150 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16151 +   RULES = &EM_USER_OUTRULES
16152 + %end;
16153 + ;
16155 + %if "&intFlag" ne "Y" %then %do;
16157 +   %let lookupString = ;
16158 +   %if ^%symexist(EM_OPTION) %then
16159 +      %let EM_OPTION=;
16161 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16162 +      %let lookupString = LOOKUP=SELECT;
16163 +   %end;
16165 +   %let codetext=;
16166 +   %let norescodetxt=;
16168 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16169 +     %let codetext=&codetext DUMMY;
16170 +     %let norescodetxt=&norescodetxt DUMMY;
16171 +   %end;
16172 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16173 +     %let codetext=&codetext NOLEAFID;
16174 +     %let norescodetxt=&norescodetxt NOLEAFID;
16175 +   %end;
16176 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16177 +     %let norescodetxt=&norescodetxt NOPRED;
16178 +   %end;
16180 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16181 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16183 +   %if &nnpmml %then %do;
16184 +     code pmml;
16185 +   %end;
16187 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16188 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16189 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16190 +   %end;
16191 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16192 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16193 +   %end;
16194 + %end;
16196 + run;
16197 + quit;
16199 + /*%em_checkerror(); */
16200 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16201 +   /* Delete DMDB catalog */
16202 +   proc datasets lib=work nolist;
16203 +       delete _treeDMDB / mt=cat;
16204 +  run;
16205 +  %end;
16207 + %if &nnpmml %then %do;
16208 +    ods pmml close;
16209 + %end;
16211 +  %doendm:
16213 +%mend em_tree_runTreeProcedure;
16215 +%macro em_tree_createFitStats( multipleTar= );
16218 +  /* create targetTable is multipleTar eq Y */
16219 +  data temptarget;
16220 +    set &EM_DATA_VARIABLESET;
16221 +    where ROLE="TARGET";
16222 +  run;
16224 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16225 +   data &EM_USER_EMOUTFIT;
16226 +     length target $32;
16227 +     merge work.fit_train
16228 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16229 +       work.fit_valid
16230 +     %end;
16231 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16232 +       work.fit_test
16233 +     %end;
16234 +     ;
16235 +     %if "&multipleTar" eq "N" %then %do;
16236 +       target="%EM_TARGET";
16237 +     %end;
16238 +     %else %do;
16239 +       target = _TARGET_;
16240 +     %end;
16241 +     drop _NW_ _SUMW_
16242 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16243 +        _VSUMW_
16244 +     %end;
16245 +     ;
16246 +   run;
16248 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16249 +     proc datasets library=work nolist;
16250 +       delete fit_valid;
16251 +     run;
16252 +   %end;
16253 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16254 +     proc datasets library=work nolist;
16255 +       delete fit_test;
16256 +     run;
16257 +   %end;
16259 +%mend em_tree_createFitStats;
16262 +%macro em_tree_makeEnglishRules;
16264 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16265 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16267 +  /* verify that necessary tables exist and if not, skip processing */
16268 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16269 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16270 +    %goto doendm;
16271 +  %end;
16272 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16273 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16274 +    %goto doendm;
16275 +  %end;
16277 +  /* determine length of variable in outpath dataset */
16278 +  %let vlength= ;
16279 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16280 +  %if &dsid ne %then %do;
16281 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16282 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16283 +  %end;
16284 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16286 +  data tempoutpath;
16287 +    length varname $&vlength;
16288 +    retain varname;
16289 +    set &EM_USER_OUTPATH;
16291 +    if ^missing(variable) then varname=variable;
16292 +    else if ^missing(var_name) then varname=var_name;
16293 +    output;
16294 +  run;
16296 +  /* create an array of generated predicted variable names */
16297 +  %let tree_pred_vars = ;
16298 +  %let tree_pred_label = ;
16299 +  %let numpred= 0;
16300 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16302 +    data _null_;
16303 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16304 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16305 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16306 +     if eof then
16307 +       call symput('numpred', strip(put(_N_, BEST.)));
16308 +    run;
16309 +  %end;
16311 +  /* determine if NPRIORS exists in outnodes  */
16312 +  %local nprior_flag;
16313 +  data _null_;
16314 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16315 +    if eof then do;
16316 +      call symput('nprior_flag', strip(put(npriors, best.)));
16317 +    end;
16318 +  run;
16320 +  proc sort data=tempoutpath; by node; run;
16321 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16323 +  data tempoutpath;
16324 +    merge tempoutpath(in=_a) outnodes(keep= node
16325 +    %if "&nprior_flag" ne "." %then %do;
16326 +      NPRIORS
16327 +    %end;
16328 +    %else %do;
16329 +      N
16330 +    %end;
16331 +    %if &numpred gt 0 %then %do;
16332 +      %do i=1 %to &numpred;
16333 +        &&tree_pred_vars&i
16334 +      %end;
16335 +    %end;
16336 +    );
16337 +    by node;
16338 +    if _a;
16339 +  run;
16341 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16343 +  data _null_;
16344 +    file x;
16345 +    set tempoutpath;
16346 +    by node descending varname;
16347 +    retain origvar oldnode string;
16348 +    length origvar $32 oldnode 8 string $200;
16350 +    if _N_ = 1 then do;
16351 +      origvar = varname;
16352 +      oldnode = node;
16353 +    end;
16355 +    if first.node then do;
16356 +       put "&EM_CODEBAR";
16357 +       put " Node = " node;
16358 +       put "&EM_CODEBAR";
16359 +    end;
16361 +      if first.varname then do;
16362 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16363 +            if MISSING(CHARACTER_VALUE) then do;
16364 +             if NUMERIC_VALUE ne .  then do;
16365 +              if ^first.node then do;
16366 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16367 +              end;
16368 +              else do;
16369 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16370 +              end;
16371 +             end;
16372 +            end;
16373 +            else do;
16374 +              if ^first.node then do;
16375 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16376 +              end;
16377 +              else do;
16378 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16379 +              end;
16380 +             end;
16381 +         end;
16382 +         else if RELATION in ("=") then do;
16383 +            if ^first.node then do;
16384 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16385 +            end;
16386 +            else do;
16387 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16388 +            end;
16389 +         end;
16390 +         else if RELATION in ("ISMISSING") then do;
16391 +            if ^first.node then do;
16392 +              string = " AND "|| strip(varname) || " equals Missing";
16393 +            end;
16394 +            else do;
16395 +              string = "if "|| strip(varname) ||" equals Missing";
16396 +            end;
16397 +         end;
16398 +         else if RELATION in ("ISNOTMISSING") then do;
16399 +            if ^first.node then do;
16400 +              string = " AND "|| strip(varname) || " equals All Values";
16401 +            end;
16402 +            else do;
16403 +              string = "if "|| strip(varname) ||" equals All Values";
16404 +            end;
16405 +         end;
16406 +         if ^missing(varname) then origvar = varname;
16407 +         oldnode=node;
16409 +      end;
16410 +      else do;
16411 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16412 +          if MISSING(CHARACTER_VALUE) then do;
16413 +           if  NUMERIC_VALUE ne .  then do;
16414 +            if ^MISSING(string) then
16415 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16416 +            else
16417 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16418 +           end;
16419 +          end;
16420 +          else do;
16421 +            if ^MISSING(string) then
16422 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16423 +            else
16424 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16425 +          end;
16427 +         end;
16428 +         else if RELATION in ("=") then do;
16429 +           string = strip(string)||", "||strip(character_value);
16430 +         end;
16431 +         else if RELATION in ("ISMISSING") then do;
16433 +         end;
16434 +         if ^missing(varname) then origvar = varname;
16435 +         oldnode=node;
16436 +      end;
16437 +      if last.varname then do;
16438 +         if RELATION in ("ISMISSING") then do;
16439 +           if ^first.varname then do;
16440 +             string = strip(string) || " or MISSING";
16441 +           end;
16442 +         end;
16443 +         put string;
16444 +         if ^missing(varname) then origvar = varname;
16445 +         oldnode=node;
16446 +      end;
16448 +      if last.node then do;
16449 +         put "then ";
16450 +         put " Tree Node Identifier   = " node;
16452 +         %if "&nprior_flag" ne "." %then %do;
16453 +           put " Number of Observations = " NPRIORS;
16454 +         %end;
16455 +         %else %do;
16456 +           put " Number of Observations = " N;
16457 +         %end;
16459 +         %if &numpred gt 0 %then %do;
16460 +           %do i=1 %to &numpred;
16461 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16462 +           %end;
16463 +         %end;
16465 +         put " ";
16466 +         if ^missing(varname) then origvar = varname;
16467 +         oldnode=node;
16468 +      end;
16470 +  run;
16472 +  proc datasets lib=work nolist;
16473 +    delete tempoutpath outnodes;
16474 +  run;
16476 +  %doendm:
16477 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: There were 108 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1601202 kilobytes of physical memory.
NOTE: Will use 108 out of 108 training cases.
NOTE: Using memory pool with 54597632 bytes.
NOTE: Passed training data 7 times.
NOTE: Training used 36760 bytes of work memory.
NOTE: The subtree sequence contains 4 subtrees. The largest has 7 nodes and 4 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Created macro variable NLEAVES equal to 4.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS1.TREE_EMTREE has 327 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTNODES has 7 observations and 16 variables.
NOTE: The data set EMWS1.TREE_OUTPATH has 23 observations and 7 variables.
NOTE: The data set EMWS1.TREE_OUTRULES has 71 observations and 6 variables.
NOTE: The data set EMWS1.TREE_OUTSEQ has 4 observations and 18 variables.
NOTE: The data set EMWS1.TREE_OUTSTATS has 42 observations and 4 variables.
NOTE: The data set EMWS1.TREE_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS1.TREE_OUTTOPOLOGY has 7 observations and 5 variables.
NOTE: External file C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\TREEFLOW.sas opened.
NOTE: External file C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
NOTE: There were 108 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 7 variables.
 
 
NOTE: View EMWS1.EM_TREE.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
 
NOTE: There were 108 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 108 observations read from the data set EMWS1.EM_TREE.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS1.TREE_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_CHURN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.OUTNODES has 7 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 7 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195
NOTE: The file X is:
      Filename=C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=07Jan2024:02:26:51,
      Create Time=07Jan2024:02:08:51
 
NOTE: 41 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
NOTE: Fileref X has been deassigned.
16479
16480  *------------------------------------------------------------*;
16481  * End TRAIN: Tree;
16482  *------------------------------------------------------------*;
 
16483  *------------------------------------------------------------*;
16484  * Close any missing semi colons;
16485  *------------------------------------------------------------*;
16486  ;
16487  ;
16488  ;
16489  ;
16490  quit;
16491  *------------------------------------------------------------*;
16492  * Close any unbalanced quotes;
16493  *------------------------------------------------------------*;
16494  /*; *"; *'; */
16495  ;
16496  run;
16497  quit;
16498  /* Reset EM Options */
16499  options formchar="|----|+|---+=|-/\<>*";
16500  options nocenter ls=256 ps=10000;
16501  goptions reset=all device=GIF NODISPLAY;
 
16502  proc sort data=WORK.EM_USER_REPORT;
16503  by ID VIEW;
16504  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                January 07, 2024
Time:                02:26:52
*------------------------------------------------------------*
16606  %let EMEXCEPTIONSTRING=;
16607  *------------------------------------------------------------*;
16608  * SCORE: Tree;
16609  *------------------------------------------------------------*;
16610  %let EM_ACTION = SCORE;
16611  %let syscc = 0;
16612  %macro main;
16613
16614    %if %upcase(&EM_ACTION) = CREATE %then %do;
16615      filename temp catalog 'sashelp.emmodl.tree_create.source';
16616      %include temp;
16617      filename temp;
16618
16619      %em_tree_create;
16620    %end;
16621
16622     %else
16623     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16624
16625         filename temp catalog 'sashelp.emmodl.tree_train.source';
16626         %include temp;
16627         filename temp;
16628         %em_tree_train;
16629     %end;
16630
16631    %else
16632    %if %upcase(&EM_ACTION) = SCORE %then %do;
16633      filename temp catalog 'sashelp.emmodl.tree_score.source';
16634      %include temp;
16635      filename temp;
16636
16637      %em_tree_score;
16638
16639    %end;
16640
16641    %else
16642    %if %upcase(&EM_ACTION) = REPORT %then %do;
16643
16644         filename temp catalog 'sashelp.emmodl.tree_report.source';
16645         %include temp;
16646         filename temp;
16647
16648         %em_tree_report;
16649     %end;
16650
16651    %else
16652    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16653
16654         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16655         %include temp;
16656         filename temp;
16657         %EM_TREE_OPENTREEVIEWER;
16658
16659     %end;
16660
16661    %else
16662    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16663
16664         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16665         %include temp;
16666         filename temp;
16667         %EM_TREE_CLOSETREEVIEWER;
16668
16669     %end;
16670
16671
16672     %doendm:
16673  %mend main;
16674
16675  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16677 +%macro em_tree_score;
16679 +   /* determine if multiple targets will be processed */
16680 +   %let em_tree_multipleTargets=N;
16681 +   %let em_tree_numTarget=1;
16682 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16683 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16684 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16685 +         %let em_tree_multipleTargets=N;
16686 +      %end;
16687 +      %else %do;
16688 +         /* create macro array of targets  */
16689 +         data _null_;
16690 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16691 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16692 +           if eof then
16693 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16694 +        run;
16696 +        %if &em_tree_numTarget gt 1 %then %do;
16697 +           %let em_tree_multipleTargets=Y;
16698 +        %end;
16699 +      %end;
16700 +   %end;
16702 +   /* build flow and publish scoring code */
16703 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16704 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16706 +   filename treeflow "&EM_USER_TREEFLOW";
16707 +   filename treepub "&EM_USER_TREEPUBLISH";
16709 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16710 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16712 +   %em_copyfile(infref=treeflow, outfref=flowref);
16713 +   %em_copyfile(infref=treepub, outfref=pubref);
16715 +   filename treeflow;
16716 +   filename treepub;
16718 +   /* if priors are used, add code to generate unadjusted residuals in export */
16719 +   %let useAdjPriors = N;
16720 +   data _null_;
16721 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16722 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16723 +   run;
16724 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16725 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16726 +      %include temp;
16727 +      filename temp;
16729 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16730 +      filename adjref "&EM_USER_adjResidualCode";
16731 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16733 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16735 +      filename adjref;
16736 +   %end;
16738 +   /* LEAF */
16739 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16740 +      data _null_;
16741 +        file flowref mod;
16742 +        put 'drop _LEAF_;';
16743 +      run;
16745 +      data _null_;
16746 +        file pubref mod;
16747 +        put 'drop _LEAF_;';
16748 +      run;
16750 +   %end;
16752 +   filename flowref;
16753 +   filename pubref;
16755 +   /* em_metachange code */
16756 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16757 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16758 +   %end;
16760 +   /* variable selection based on importance stat    */
16761 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16762 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16763 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16764 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16765 +     %let obs = %sysfunc(fetch(&dsid));
16766 +     %do %while(&obs=0);
16767 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16768 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16769 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16770 +       %let obs = %sysfunc(fetch(&dsid));
16771 +     %end;
16772 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16773 +   %end;
16775 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16776 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16777 +    %let tree_pred_vars = ;
16778 +    %let tree_pred_lvl =;
16779 +    %let numpred= 0;
16781 +    data _null_;
16782 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16783 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16784 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16785 +     if eof then
16786 +       call symput('numpred', strip(put(_N_, BEST.)));
16787 +    run;
16788 +   %end;
16790 +   %if &numpred ne 0 %then %do;
16791 +    %do i=1 %to &numpred;
16792 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16793 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16794 +    %end;
16795 +   %end;
16797 +   /* determine if multiple targets will be processed */
16798 +   %let em_tree_multipleTargets=N;
16799 +   %let em_tree_numTarget=1;
16800 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16801 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16802 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16803 +         %let em_tree_multipleTargets=N;
16804 +      %end;
16805 +      %else %do;
16806 +        data _null_;
16807 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16808 +          if eof then
16809 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16810 +        run;
16812 +        %if &em_tree_numTarget gt 1 %then %do;
16813 +           %let em_tree_multipleTargets=Y;
16814 +        %end;
16815 +     %end;
16816 +   %end;
16818 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16819 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16821 +      /* variable importance */
16822 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16823 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16825 +         %let validexist=0;
16826 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16827 +           %let validexist=1;
16828 +         %end;
16830 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16831 +         /* and the columns may not be generated                                                                                 */
16832 +         %let em_tree_cvexists=;
16833 +         %let em_tree_surrexists=.;
16834 +         data _null_;
16835 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16836 +            if eof then do ;
16837 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16838 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16839 +            end;
16840 +         run;
16842 +         data &EM_USER_OUTIMPORT;
16843 +            set &EM_USER_OUTIMPORT;
16845 +            /* format columns based on Precison value specified */
16846 +            format importance 15.&EM_PROPERTY_PRECISION
16847 +                 %if &validexist %then %do;
16848 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16849 +                 %end;
16850 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16851 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16852 +                 %end;
16853 +            ;
16854 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16855 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16856 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16857 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16858 +                 %if "&em_tree_surrexists" ne "" %then %do;
16859 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16860 +                 %end;
16861 +                 %if &validexist %then %do;
16862 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16863 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16864 +                 %end;
16865 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16866 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16867 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16868 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16869 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16870 +                 %end;
16871 +            ;
16872 +         run;
16874 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16875 +      %end;
16876 +   %end;
16878 +   %doendm:
16879 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=07Jan2024:02:26:51,
      Create Time=07Jan2024:02:08:51
 
NOTE: 58 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=07Jan2024:02:26:51,
      Create Time=07Jan2024:02:08:51
 
NOTE: 53 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_CHURN_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=1909,
      Last Modified=07Jan2024:02:26:51,
      Create Time=07Jan2024:02:08:51
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=1757,
      Last Modified=07Jan2024:02:26:51,
      Create Time=07Jan2024:02:08:51
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_CHURN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16880
16881  *------------------------------------------------------------*;
16882  * End SCORE: Tree;
16883  *------------------------------------------------------------*;
 
16884  proc sort data=WORK.EM_METACHANGE;
16885  by key uname;
16886  run;
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16887  filename x "C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas";
16888  data _null_;
16889  file x;
16890  put 'if upcase(NAME) = "FAVORITECATEGORY" then do;';
16891  put 'ROLE = "REJECTED";';
16892  put 'end;';
16893  put 'else ';
16894  put 'if upcase(NAME) = "GENDER" then do;';
16895  put 'ROLE = "REJECTED";';
16896  put 'end;';
16897  put 'else ';
16898  put 'if upcase(NAME) = "LOCATION" then do;';
16899  put 'ROLE = "REJECTED";';
16900  put 'end;';
16901  put 'else ';
16902  put 'if upcase(NAME) = "MEMBERSHIPLEVEL" then do;';
16903  put 'ROLE = "REJECTED";';
16904  put 'end;';
16905  put 'else ';
16906  put 'if upcase(NAME) = "OCCUPTATION" then do;';
16907  put 'ROLE = "REJECTED";';
16908  put 'end;';
16909  put 'else ';
16910  put 'if upcase(NAME) = "Q_CHURN" then do;';
16911  put 'ROLE = "ASSESS";';
16912  put 'end;';
16913  put 'else ';
16914  put 'if upcase(NAME) = "WEBSITEVISITSPERMONTH" then do;';
16915  put 'ROLE = "REJECTED";';
16916  put 'end;';
16917  put 'else ';
16918  put 'if upcase(NAME) = "_NODE_" then do;';
16919  put 'ROLE = "SEGMENT";';
16920  put 'LEVEL = "NOMINAL";';
16921  put 'end;';
16922  run;
 
NOTE: The file X is:
      Filename=C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=07Jan2024:02:26:52,
      Create Time=07Jan2024:01:50:14
 
NOTE: 32 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16923  filename x;
NOTE: Fileref X has been deassigned.
 
16924  filename emflow "C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
16925  *------------------------------------------------------------*;
16926  * Tree: Scoring DATA data;
16927  *------------------------------------------------------------*;
16928  data EMWS1.Tree_TRAIN
16929  / view=EMWS1.Tree_TRAIN
16930  ;
16931  set EMWS1.Part_TRAIN
16932  ;
16933  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
16934 +****************************************************************;
16935 +******             DECISION TREE SCORING CODE             ******;
16936 +****************************************************************;
16937 +
16938 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16939 +LENGTH _WARN_  $    4;
16940 +
16941 +******              LABELS FOR NEW VARIABLES              ******;
16942 +label _NODE_ = 'Node' ;
16943 +label _LEAF_ = 'Leaf' ;
16944 +label P_Churn = 'Predicted: Churn' ;
16945 +label V_Churn = 'Validated: Churn' ;
16946 +label R_Churn = 'Residual: Churn' ;
16947 +label _WARN_ = 'Warnings' ;
16948 +
16949 +
16950 +
16951 +******             ASSIGN OBSERVATION TO NODE             ******;
16952 +IF  NOT MISSING(TotalPurchases ) AND
16953 +  TotalPurchases  <                 14.5 THEN DO;
16954 +  _NODE_  =                    2;
16955 +  _LEAF_  =                    1;
16956 +  P_Churn  =                    1;
16957 +  V_Churn  =                    1;
16958 +  END;
16959 +ELSE DO;
16960 +  IF  NOT MISSING(Age ) AND
16961 +    Age  <                 37.5 THEN DO;
16962 +    IF  NOT MISSING(TotalSpent ) AND
16963 +                    2350.6 <= TotalSpent  THEN DO;
16964 +      _NODE_  =                    7;
16965 +      _LEAF_  =                    3;
16966 +      P_Churn  =     0.66666666666666;
16967 +      V_Churn  =                    1;
16968 +      END;
16969 +    ELSE DO;
16970 +      _NODE_  =                    6;
16971 +      _LEAF_  =                    2;
16972 +      P_Churn  =                 0.04;
16973 +      V_Churn  =  2.3140940118987E-18;
16974 +      END;
16975 +    END;
16976 +  ELSE DO;
16977 +    _NODE_  =                    5;
16978 +    _LEAF_  =                    4;
16979 +    P_Churn  =                    0;
16980 +    V_Churn  =                    0;
16981 +    END;
16982 +  END;
16983 +
16984 +*****  RESIDUALS R_ *************;
16985 +IF MISSING( Churn ) THEN R_Churn  = .;
16986 +ELSE R_Churn  = Churn  - P_Churn ;
16987 +
16988 +****************************************************************;
16989 +******          END OF DECISION TREE SCORING CODE         ******;
16990 +****************************************************************;
16991 +
16992 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
16993  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16994  quit;
16995  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
16996  filename emflow "C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
16997  *------------------------------------------------------------*;
16998  * Tree: Scoring VALIDATE data;
16999  *------------------------------------------------------------*;
17000  data EMWS1.Tree_VALIDATE
17001  / view=EMWS1.Tree_VALIDATE
17002  ;
17003  set EMWS1.Part_VALIDATE
17004  ;
17005  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17006 +****************************************************************;
17007 +******             DECISION TREE SCORING CODE             ******;
17008 +****************************************************************;
17009 +
17010 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17011 +LENGTH _WARN_  $    4;
17012 +
17013 +******              LABELS FOR NEW VARIABLES              ******;
17014 +label _NODE_ = 'Node' ;
17015 +label _LEAF_ = 'Leaf' ;
17016 +label P_Churn = 'Predicted: Churn' ;
17017 +label V_Churn = 'Validated: Churn' ;
17018 +label R_Churn = 'Residual: Churn' ;
17019 +label _WARN_ = 'Warnings' ;
17020 +
17021 +
17022 +
17023 +******             ASSIGN OBSERVATION TO NODE             ******;
17024 +IF  NOT MISSING(TotalPurchases ) AND
17025 +  TotalPurchases  <                 14.5 THEN DO;
17026 +  _NODE_  =                    2;
17027 +  _LEAF_  =                    1;
17028 +  P_Churn  =                    1;
17029 +  V_Churn  =                    1;
17030 +  END;
17031 +ELSE DO;
17032 +  IF  NOT MISSING(Age ) AND
17033 +    Age  <                 37.5 THEN DO;
17034 +    IF  NOT MISSING(TotalSpent ) AND
17035 +                    2350.6 <= TotalSpent  THEN DO;
17036 +      _NODE_  =                    7;
17037 +      _LEAF_  =                    3;
17038 +      P_Churn  =     0.66666666666666;
17039 +      V_Churn  =                    1;
17040 +      END;
17041 +    ELSE DO;
17042 +      _NODE_  =                    6;
17043 +      _LEAF_  =                    2;
17044 +      P_Churn  =                 0.04;
17045 +      V_Churn  =  2.3140940118987E-18;
17046 +      END;
17047 +    END;
17048 +  ELSE DO;
17049 +    _NODE_  =                    5;
17050 +    _LEAF_  =                    4;
17051 +    P_Churn  =                    0;
17052 +    V_Churn  =                    0;
17053 +    END;
17054 +  END;
17055 +
17056 +*****  RESIDUALS R_ *************;
17057 +IF MISSING( Churn ) THEN R_Churn  = .;
17058 +ELSE R_Churn  = Churn  - P_Churn ;
17059 +
17060 +****************************************************************;
17061 +******          END OF DECISION TREE SCORING CODE         ******;
17062 +****************************************************************;
17063 +
17064 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17065  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17066  quit;
17067  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17068  filename emflow "C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas";
17069  *------------------------------------------------------------*;
17070  * Tree: Scoring TEST data;
17071  *------------------------------------------------------------*;
17072  data EMWS1.Tree_TEST
17073  / view=EMWS1.Tree_TEST
17074  ;
17075  set EMWS1.Part_TEST
17076  ;
17077  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree\EMFLOWSCORE.sas.
17078 +****************************************************************;
17079 +******             DECISION TREE SCORING CODE             ******;
17080 +****************************************************************;
17081 +
17082 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17083 +LENGTH _WARN_  $    4;
17084 +
17085 +******              LABELS FOR NEW VARIABLES              ******;
17086 +label _NODE_ = 'Node' ;
17087 +label _LEAF_ = 'Leaf' ;
17088 +label P_Churn = 'Predicted: Churn' ;
17089 +label V_Churn = 'Validated: Churn' ;
17090 +label R_Churn = 'Residual: Churn' ;
17091 +label _WARN_ = 'Warnings' ;
17092 +
17093 +
17094 +
17095 +******             ASSIGN OBSERVATION TO NODE             ******;
17096 +IF  NOT MISSING(TotalPurchases ) AND
17097 +  TotalPurchases  <                 14.5 THEN DO;
17098 +  _NODE_  =                    2;
17099 +  _LEAF_  =                    1;
17100 +  P_Churn  =                    1;
17101 +  V_Churn  =                    1;
17102 +  END;
17103 +ELSE DO;
17104 +  IF  NOT MISSING(Age ) AND
17105 +    Age  <                 37.5 THEN DO;
17106 +    IF  NOT MISSING(TotalSpent ) AND
17107 +                    2350.6 <= TotalSpent  THEN DO;
17108 +      _NODE_  =                    7;
17109 +      _LEAF_  =                    3;
17110 +      P_Churn  =     0.66666666666666;
17111 +      V_Churn  =                    1;
17112 +      END;
17113 +    ELSE DO;
17114 +      _NODE_  =                    6;
17115 +      _LEAF_  =                    2;
17116 +      P_Churn  =                 0.04;
17117 +      V_Churn  =  2.3140940118987E-18;
17118 +      END;
17119 +    END;
17120 +  ELSE DO;
17121 +    _NODE_  =                    5;
17122 +    _LEAF_  =                    4;
17123 +    P_Churn  =                    0;
17124 +    V_Churn  =                    0;
17125 +    END;
17126 +  END;
17127 +
17128 +*****  RESIDUALS R_ *************;
17129 +IF MISSING( Churn ) THEN R_Churn  = .;
17130 +ELSE R_Churn  = Churn  - P_Churn ;
17131 +
17132 +****************************************************************;
17133 +******          END OF DECISION TREE SCORING CODE         ******;
17134 +****************************************************************;
17135 +
17136 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17137  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17138  quit;
17139  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
17141  proc sort data=WORK.EM_USER_REPORT;
17142  by ID VIEW;
17143  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17144  *------------------------------------------------------------*;
17145  * Tree: Computing metadata for TRAIN data;
17146  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
17525  data WORK.MODELTEMP_INFO;
17526  set EMWS1.Tree_EMINFO;
17527  where DATA='Tree' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
17528  run;
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_EMINFO.
      WHERE (DATA='Tree') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17529  data EMWS1.Tree_EMINFO;
17530  length TARGET KEY $32 DATA $43;
17531  input TARGET KEY DATA $;
17532  cards;
 
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17536  run;
17537  data EMWS1.Tree_EMINFO;
17538  set EMWS1.Tree_EMINFO WORK.MODELTEMP_INFO;
17539  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17540  proc sort data = EMWS1.Tree_EMINFO NOTHREADS;
17541  by TARGET KEY;
17542  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_EMINFO.
NOTE: The data set EMWS1.TREE_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
NOTE: View EMWS1.TREE_TEST.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                January 07, 2024
Time:                02:26:53
*------------------------------------------------------------*
17566  data EMWS1.Tree_EMOUTFIT;
17567  set EMWS1.Tree_EMOUTFIT;
17568  length TargetLabel $200;
17569  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
17570  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: The data set EMWS1.TREE_EMOUTFIT has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17571  proc sort data=EMWS1.Tree_EMREPORTFIT nothreads;
17572  by TARGET;
17573  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The data set EMWS1.TREE_EMREPORTFIT has 7 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
17574  %let _EMwarndup = 0;
17575  %let _EMtargetdup =;
17576  %let _EMASEtargetdup =;
17577  data _null_;
17578  set EMWS1.Tree_EMOUTFIT;
17579  if .<_ASE_<0.000001 then do;
17580  call symput('_EMwarndup', '1');
17581  call symput('_EMtargetdup', target);
17582  call symput('_EMASEtargetdup', put(_ASE_, best.));
17583  end;
17584  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17585  %let EMEXCEPTIONSTRING=;
17586  *------------------------------------------------------------*;
17587  * REPORT: Tree;
17588  *------------------------------------------------------------*;
17589  %let EM_ACTION = REPORT;
17590  %let syscc = 0;
17591  %macro main;
17592
17593    %if %upcase(&EM_ACTION) = CREATE %then %do;
17594      filename temp catalog 'sashelp.emmodl.tree_create.source';
17595      %include temp;
17596      filename temp;
17597
17598      %em_tree_create;
17599    %end;
17600
17601     %else
17602     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17603
17604         filename temp catalog 'sashelp.emmodl.tree_train.source';
17605         %include temp;
17606         filename temp;
17607         %em_tree_train;
17608     %end;
17609
17610    %else
17611    %if %upcase(&EM_ACTION) = SCORE %then %do;
17612      filename temp catalog 'sashelp.emmodl.tree_score.source';
17613      %include temp;
17614      filename temp;
17615
17616      %em_tree_score;
17617
17618    %end;
17619
17620    %else
17621    %if %upcase(&EM_ACTION) = REPORT %then %do;
17622
17623         filename temp catalog 'sashelp.emmodl.tree_report.source';
17624         %include temp;
17625         filename temp;
17626
17627         %em_tree_report;
17628     %end;
17629
17630    %else
17631    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17632
17633         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17634         %include temp;
17635         filename temp;
17636         %EM_TREE_OPENTREEVIEWER;
17637
17638     %end;
17639
17640    %else
17641    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17642
17643         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17644         %include temp;
17645         filename temp;
17646         %EM_TREE_CLOSETREEVIEWER;
17647
17648     %end;
17649
17650
17651     %doendm:
17652  %mend main;
17653
17654  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
17656 +%macro em_tree_makePlotDs( multipleTar= );
17658 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
17659 +  %EM_GETNAME(key=OUTNODES, type=DATA);
17660 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
17661 +  %EM_GETNAME(key=OUTRULES, type=DATA);
17663 +  /* determine if validation statistics will be displayed */
17664 +  %let validflag=N;
17665 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
17666 +    /* determine if validation data exists */
17667 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
17668 +      %let validflag=Y;
17669 +    %end;
17670 +  %end;
17672 +   /* retrieve name of decmeta even in presence of multiple targets */
17673 +   %let decmeta = ;
17674 +   %if &EM_DEC_DECMETA eq %then %do;
17675 +     data _Target;
17676 +       set &em_data_variableset;
17677 +       where ROLE='TARGET' and USE in('D', 'Y');
17678 +       keep NAME;
17679 +     run;
17680 +     proc sort data=_Target;
17681 +       by NAME;
17682 +     run;
17683 +     proc sort data=EM_TARGETDECINFO;
17684 +       by TARGET;
17685 +     run;
17686 +     data _Target;
17687 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
17688 +       by NAME;
17689 +       if _a then do;
17690 +         call symput('decmeta', trim(DECMETA));
17691 +       end;
17692 +     run;
17693 +     proc delete data=_Target;run;
17694 +   %end;
17695 +   %else %let decmeta = &EM_DEC_DECMETA;
17698 +  /* retrieve targetEvent from decmeta */
17699 +  %let targetEvent=;
17700 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
17701 +    %if %sysfunc(exist(&DECMETA)) %then %do;
17702 +      data _null_;
17703 +       set &DECMETA(where=(_TYPE_="TARGET"));
17704 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
17705 +      run;
17706 +    %end;
17707 +  %end;
17709 +  /* retrieve predicted var for targetEvent from decmeta */
17710 +  %let predTarget=;
17711 +  %let predLvl=;
17712 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
17713 +    %if %sysfunc(exist(&DECMETA)) %then %do;
17714 +      data _null_;
17715 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
17716 +       call symput('predTarget', strip(VARIABLE));
17717 +       call symput('predLvl', strip(LEVEL));
17718 +      run;
17719 +    %end;
17720 +  %end;
17721 +  %else %do;
17722 +    %if %sysfunc(exist(&DECMETA)) %then %do;
17723 +      data _null_;
17724 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
17725 +       call symput('predTarget', strip(VARIABLE));
17726 +      run;
17727 +    %end;
17728 +  %end;
17730 +  /* create BelowText value */
17731 +  data belowtext;
17732 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
17733 +    keep node belowtext;
17734 +  run;
17736 +  /* relace belowtext with variable label if it exists */
17737 +  data belowtext2;
17738 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
17739 +    keep node belowtextlbl;
17740 +  run;
17742 +  proc sort data=belowtext; by node; run;
17743 +  proc sort data=belowtext2; by node; run;
17745 +  data belowtext;
17746 +    merge belowtext belowtext2(in=_a);
17747 +    by node;
17748 +    if _a then belowtext=belowtextlbl;
17749 +    keep node belowtext;
17750 +  run;
17752 +  /* create AboveText value */
17753 +  data abovetext;
17754 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
17755 +  run;
17756 +  proc sort data=abovetext; by node numeric_value; run;
17758 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
17759 +  data abovetext;
17760 +    set abovetext(rename=(node=parent));
17761 +    by parent numeric_value;
17762 +    retain abovetext tempstring flag branch origval origchar ;
17763 +    length abovetext $256;
17764 +    length tempstring origchar $64;
17766 +    if STAT in ("INTERVAL", "ORDINAL") then do;
17767 +      if first.parent then do;
17768 +        if missing(character_value) then do;
17769 +          numeric_value = round(numeric_value, &sp_precision);
17770 +          abovetext = "< "||strip(NUMERIC_VALUE);
17771 +          branch = 1;
17772 +          origval = numeric_value;
17773 +          output;
17774 +        end;
17775 +        else do;
17776 +          abovetext = "< "||strip(CHARACTER_VALUE);
17777 +          branch = 1;
17778 +          origchar = character_value;
17779 +          output;
17780 +        end;
17782 +        if first.parent AND last.parent then do;
17783 +          if missing(character_value) then do;
17784 +            numeric_value = round(numeric_value, &sp_precision);
17785 +            branch = branch + 1;
17786 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17787 +            output;
17788 +          end;
17789 +          else do;
17790 +            branch = branch + 1;
17791 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17792 +            output;
17793 +          end;
17794 +        end;
17795 +      end;
17796 +      else if last.parent then do;
17797 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
17798 +          if missing(character_value) then do;
17799 +            numeric_value = round(numeric_value, &sp_precision);
17800 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
17801 +          end;
17802 +          else do;
17803 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
17804 +          end;
17805 +          branch = branch + 1;
17806 +          output;
17808 +          if missing(character_value) then do;
17809 +            numeric_value = round(numeric_value, &sp_precision);
17810 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17811 +          end;
17812 +          else do;
17813 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17814 +          end;
17815 +          branch = branch + 1;
17816 +          output;
17817 +        end;
17818 +        else do;
17819 +          if missing(character_value) then do;
17820 +            numeric_value = round(numeric_value, &sp_precision);
17821 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17822 +          end;
17823 +          else do;
17824 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17825 +          end;
17826 +          branch = branch + 1;
17827 +          output;
17828 +        end;
17829 +      end;
17830 +      else do;
17831 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
17832 +          if missing(character_value) then do;
17833 +            numeric_value = round(numeric_value,&sp_precision);
17834 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
17835 +            origval = numeric_value;
17836 +          end;
17837 +          else do;
17838 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
17839 +            origchar = character_value;
17840 +          end;
17841 +          branch = branch + 1;
17842 +          output;
17844 +        end;
17845 +        else do;
17846 +          if missing(character_value) then do;
17847 +            numeric_value = round(numeric_value, &sp_precision);
17848 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17849 +            origval = numeric_value;
17850 +          end;
17851 +          else do;
17852 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17853 +            origval = character_value;
17854 +          end;
17855 +          branch = branch + 1;
17856 +          output;
17857 +        end;
17858 +      end;
17859 +    end;
17860 +    else do;
17861 +       if first.numeric_value then do;
17862 +         flag = 0;
17863 +         abovetext = strip(CHARACTER_VALUE);
17864 +         branch = numeric_value;
17865 +         if first.numeric_value AND last.numeric_value then do;
17866 +           output;
17867 +         end;
17868 +       end;
17869 +       else if last.numeric_value then do;
17870 +         if flag=0 then do;
17871 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
17872 +           length = length(strip(tempstring));
17873 +           if length < 32 then do;
17874 +             abovetext = strip(tempstring);
17875 +           end;
17876 +           else do;
17877 +             abovetext = strip(abovetext)||", ...";
17878 +             flag = 1;
17879 +           end;
17880 +         end;
17881 +         branch = numeric_value;
17882 +         output;
17883 +       end;
17884 +       else do;
17885 +         if flag=0 then do;
17886 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
17887 +           length = length(strip(tempstring));
17888 +           if length < 32 then do;
17889 +             abovetext = strip(tempstring);
17890 +           end;
17891 +           else do;
17892 +             abovetext = strip(abovetext)||", ...";
17893 +             flag=1;
17894 +           end;
17895 +         end;
17896 +         branch = numeric_value;
17897 +       end;
17898 +    end;
17899 +    keep parent branch abovetext;
17900 +  run;
17902 +  /* MIssing value to abovetext */
17903 +  data tempmissing;
17904 +    set &EM_USER_OUTRULES;
17905 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
17906 +    rename node=parent numeric_value=branch character_value=misschar;
17907 +  run;
17910 +  proc sort data=abovetext; by parent branch; run;
17911 +  proc sort data=tempmissing; by parent branch; run;
17912 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
17914 +  data tempoutnodes;
17915 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
17916 +    by parent branch;
17917 +    length traintotal validtotal 8;
17918 +    retain traintotal validtotal;
17920 +    if _a then do;
17921 +      if ^MISSING(abovetext) then do;
17922 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
17923 +      end;
17924 +      else do;
17925 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
17926 +      end;
17927 +    end;
17928 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
17930 +    if node=1 then do;
17931 +      traintotal = N;
17932 +      validtotal=VN;
17933 +    end;
17935 +    drop role rank stat misschar belowtext;
17936 +  run;
17937 +  proc sort data=tempoutnodes; by node; run;
17938 +  proc sort data=belowtext; by node; run;
17940 +  data tempoutnodes;
17941 +    merge tempoutnodes belowtext;
17942 +    by node;
17944 +  run;
17946 +  /* determine if adjusted counts exists; if so, use these vs true counts */
17947 +  %let adjusted = N;
17948 +  %let npriors = 0;
17949 +  data _null_ ;
17950 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
17951 +    if eof then do ;
17952 +      call symput("npriors" , strip(put(_N_,best.))) ;
17953 +    end;
17954 +  run;
17955 +  %if &npriors gt 0 %then %let adjusted=Y;
17958 +  /* create a table with targetUsed and targetLevel columns for each node */
17959 +  data temptarmeta;
17960 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
17961 +    %if &multipleTar eq N %then %do;
17962 +      AND USE in ('D', 'Y')
17963 +    %end;
17964 +    ));
17965 +    length TARGET $32;
17966 +    Target=name;
17967 +    keep target level;
17968 +  run;
17970 +  %if &multipleTar eq Y %then %do;
17971 +    data temptargetused;
17972 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
17973 +      keep node target;
17974 +    run;
17975 +    proc sort data=temptargetused; by target; run;
17976 +    proc sort data=temptarmeta; by target; run;
17977 +    data temptargetused;
17978 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
17979 +      by target;
17980 +      if _a and _b;
17981 +    run;
17982 +  %end;
17983 +  %else %do;
17984 +    data temptargetused;
17985 +      set &EM_USER_OUTSTATS;
17986 +      length target $32 tarlevel $10;
17987 +      target="%EM_TARGET";
17988 +      tarlevel="%EM_TARGET_LEVEL";
17989 +      keep node target tarlevel;
17990 +    run;
17991 +    proc sort data=temptargetused nodupkey; by node; run;
17992 +  %end;
17994 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
17995 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
17996 +  proc sort data=temptargetused; by node; run;
17999 +  /* create tables for all interval targets as well as all class targets */
18000 +  data tempinterval tempclass;
18001 +    merge tempoutstats temptargetused( rename=(target=targetused));
18002 +    by node;
18003 +    %if "&multipleTar" eq "Y" %then %do;
18004 +      if ((missing(Target)) OR (target=targetused ));
18005 +    %end;
18007 +    if tarlevel="INTERVAL" then output tempinterval;
18008 +    else output tempclass;
18009 +  run;
18011 +  /* iniitalize intTarget and classTarget flags */
18012 +  %let em_intNobs =0;
18013 +  %let em_classNobs = 0;
18014 +  %let em_intTarget= N;
18015 +  %let em_classTarget= N;
18017 +  proc sql;
18018 +    reset noprint;
18019 +    select count(*) into :em_intNobs from tempinterval;
18020 +  quit;
18021 +  proc sql;
18022 +    reset noprint;
18023 +    select count(*) into :em_classNobs from tempclass;
18024 +  quit;
18026 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
18027 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18029 +  /* retrieve all information for interval targets */
18030 +  %if &em_intTarget eq Y %then %do;
18032 +    /* determine if leaf variable exists */
18033 +    %let dsid=%sysfunc(open(tempinterval,i));
18034 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18035 +    %let rc=%sysfunc(close(&dsid));
18037 +    proc transpose data=tempinterval
18038 +      %if &leafexists %then %do;
18039 +        (drop=leaf)
18040 +      %end;
18041 +      %if &validexist %then %do;
18042 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18043 +      %end;
18044 +      %else %do;
18045 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18046 +      %end;
18047 +      by node;
18048 +      id statname;
18049 +    run;
18050 +    data tempinterval;
18051 +      set tempinterval;
18052 +      if missing(N) then delete;
18053 +    run;
18054 +  %end;
18056 +  /* retrieve all information for class targets */
18057 +  %if &em_classTarget eq Y %then %do;
18058 +    proc sort data=tempclass; by node category; run;
18059 +    %if &validflag eq N %then %do;
18060 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18061 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18062 +    %end;
18063 +    %else %do;
18064 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18065 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18066 +    %end;
18067 +      set tempclass;
18069 +      %if &validflag eq N %then %do;
18070 +        %if "&adjusted" eq "N" %then %do;
18071 +          if statname="N" then output tempn;
18072 +        %end;
18073 +        %else %do;
18074 +          if statname="NPRIORS" then output tempn;
18075 +        %end;
18076 +        else if statname="PREDICTION" then output temppredict;
18077 +        else if statname="PROBABILITY" then output tempprob;
18078 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18079 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18080 +      %end;
18081 +      %else %do;
18082 +        %if "&adjusted" eq "N" %then %do;
18083 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18084 +        %end;
18085 +        %else %do;
18086 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18087 +        %end;
18088 +        else if statname="PREDICTION" then output temppredict;
18089 +        else if statname="PROBABILITY" then output tempprob;
18090 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18091 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18092 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18093 +      %end;
18094 +    run;
18097 +    /* determine if profit/loss exists in tempprofit */
18098 +    %let em_profitflag=0;
18099 +    %let em_lossflag=0;
18100 +    proc sql;
18101 +      reset noprint;
18102 +      select count(*) into :em_profitflag from tempprofit;
18103 +    quit;
18104 +    proc sql;
18105 +      reset noprint;
18106 +      select count(*) into :em_lossflag from temploss;
18107 +    quit;
18109 +    %if &validFlag eq Y %then %do;
18110 +      proc transpose data=tempn
18111 +        %if "&adjusted" eq "N" %then %do;
18112 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18113 +        %end;
18114 +        %else %do;
18115 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18116 +        %end;
18117 +        by node;
18118 +        id statname;
18119 +      run;
18120 +      %if &em_profitflag ne 0 %then %do;
18121 +        proc transpose data=tempprofit out=tempprofit;
18122 +          by node category;
18123 +          id statname ;
18124 +        run;
18125 +      %end;
18126 +      %if &em_lossflag ne 0 %then %do;
18127 +        proc transpose data=temploss out=temploss;
18128 +          by node category;
18129 +          id statname ;
18130 +        run;
18131 +      %end;
18132 +      data tempprob;
18133 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18134 +        by node
18135 +        %if &multipleTar eq Y %then %do;
18136 +          target
18137 +        %end;
18138 +        category;
18139 +      run;
18140 +    %end;
18142 +    /* store percentcorrect value */
18143 +    data temppredict;
18144 +      merge tempprob temppredict(in=_a);
18145 +      by node category;
18146 +      if _a then do;
18147 +        percentCorrect = statvalue;
18148 +        %if &validFlag eq Y %then %do;
18149 +          vpercentCorrect= vstatvalue;
18150 +        %end;
18151 +      end;
18152 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18153 +      %if &validFlag eq Y %then %do;
18154 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18155 +      %end;
18156 +      ;
18157 +      if missing(percentCorrect) then delete;
18158 +      drop target;
18159 +    run;
18161 +    /* build profittext */
18162 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18163 +      data tempprofittext(keep= node profittext profitloss);
18164 +        length profittext $800 profitloss 8.;
18165 +        retain profittext profitloss;
18167 +        merge tempprob
18168 +        %if &em_profitflag ne 0 %then %do;
18169 +          tempprofit
18170 +        %end;
18171 +        %else %if &em_lossflag ne 0 %then %do;
18172 +          temploss
18173 +        %end;
18174 +        ;
18175 +        by node category;
18177 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18178 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18179 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18180 +          %let profittype = ALL;
18181 +        %end;
18183 +        /* create the profitloss variable for nodecolor if selected */
18184 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18186 +        %if "&profittype" eq "ALL" %then %do;
18187 +          if strip(CATEGORY)="&targetEvent" then do;
18188 +            profitloss=statvalue;
18189 +          end;
18190 +          if first.node then do;
18191 +            %if &validFlag eq N %then %do;
18192 +             %if &em_profitflag ne 0 %then %do;
18193 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18194 +             %end;
18195 +             %if &em_lossflag ne 0 %then %do;
18196 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18197 +             %end;
18198 +            %end;
18199 +            %else %do;
18200 +             %if &em_profitflag ne 0 %then %do;
18201 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18201!+;
18202 +             %end;
18203 +             %if &em_lossflag ne 0 %then %do;
18204 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18205 +             %end;
18206 +            %end;
18207 +          end;
18208 +          else if last.node then do;
18209 +            %if &validFlag eq N %then %do;
18210 +             %if &em_profitflag ne 0 %then %do;
18211 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18212 +             %end;
18213 +             %if &em_lossflag ne 0 %then %do;
18214 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18215 +             %end;
18216 +             /*if CATEGORY="&targetEvent" then do;
18217 +               profitloss=statvalue;
18218 +             end;*/
18219 +            %end;
18220 +            %else %do;
18221 +             %if &em_profitflag ne 0 %then %do;
18222 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18222!+14.&EM_PROPERTY_SPLITPRECISION);
18223 +                if CATEGORY="&targetEvent" then do;
18224 +                 profitloss=ALTERNATIVE_PROFIT;
18225 +                end;
18226 +             %end;
18227 +             %if &em_lossflag ne 0 %then %do;
18228 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18228!+14.&EM_PROPERTY_SPLITPRECISION);
18229 +                if CATEGORY="&targetEvent" then do;
18230 +                  profitloss=ALTERNATIVE_LOSS;
18231 +                end;
18232 +             %end;
18233 +            %end;
18234 +            output;
18235 +          end;
18236 +          else do;
18237 +            %if &validFlag eq N %then %do;
18238 +             %if &em_profitflag ne 0 %then %do;
18239 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18240 +             %end;
18241 +             %if &em_lossflag ne 0 %then %do;
18242 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18243 +             %end;
18244 +            %end;
18245 +            %else %do;
18246 +             %if &em_profitflag ne 0 %then %do;
18247 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18247!+14.&EM_PROPERTY_SPLITPRECISION);
18248 +             %end;
18249 +             %if &em_lossflag ne 0 %then %do;
18250 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18250!+14.&EM_PROPERTY_SPLITPRECISION);
18251 +             %end;
18252 +            %end;
18253 +          end;
18254 +        %end;
18255 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18256 +          if strip(CATEGORY) = "&targetevent" then do;
18257 +            %if &validFlag eq N %then %do;
18258 +             %if &em_profitflag ne 0 %then %do;
18259 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18260 +             %end;
18261 +             %if &em_lossflag ne 0 %then %do;
18262 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18263 +             %end;
18264 +             profitloss=statvalue;
18265 +            %end;
18266 +            %else %do;
18267 +             %if &em_profitflag ne 0 %then %do;
18268 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18268!+;
18269 +                profitloss=ALTERNATIVE_PROFIT;
18270 +             %end;
18271 +             %if &em_lossflag ne 0 %then %do;
18272 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18273 +                profitloss=ALTERNATIVE_LOSS;
18274 +             %end;
18275 +            %end;
18276 +            output;
18277 +          end;
18278 +        %end;
18279 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18280 +          if strip(CATEGORY) = "&targetevent" then do;
18281 +            %if &validFlag eq N %then %do;
18282 +             profitloss=statvalue;
18283 +            %end;
18284 +            %else %do;
18285 +             %if &em_profitflag ne 0 %then %do;
18286 +                profitloss=ALTERNATIVE_PROFIT;
18287 +             %end;
18288 +             %if &em_lossflag ne 0 %then %do;
18289 +                profitloss=ALTERNATIVE_LOSS;
18290 +             %end;
18291 +            %end;
18292 +            output;
18293 +          end;
18294 +        %end;
18295 +      run;
18296 +    %end;
18298 +    data tempprob(keep= node probtext);
18299 +      length probtext $800;
18300 +      retain probtext;
18301 +      set tempprob ;
18302 +      by node;
18304 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18305 +      %let probtype = &EM_PROPERTY_TARGET;
18306 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18307 +        %let probtype = ALL;
18308 +      %end;
18310 +      %if "&probtype" eq "ALL" %then %do;
18311 +        if first.node then do;
18312 +          %if &validFlag eq N %then %do;
18313 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18314 +          %end;
18315 +          %else %do;
18316 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18317 +          %end;
18318 +        end;
18319 +        else if last.node then do;
18320 +          %if &validFlag eq N %then %do;
18321 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18322 +          %end;
18323 +          %else %do;
18324 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18325 +          %end;
18326 +          output;
18327 +        end;
18328 +        else do;
18329 +          %if &validFlag eq N %then %do;
18330 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18331 +          %end;
18332 +          %else %do;
18333 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18334 +          %end;
18335 +        end;
18336 +      %end;
18337 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18338 +        if strip(CATEGORY) = "&targetevent" then do;
18339 +          %if &validFlag eq N %then %do;
18340 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18341 +          %end;
18342 +          %else %do;
18343 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18344 +          %end;
18345 +          output;
18346 +        end;
18347 +      %end;
18348 +      %else %if "&probtype" eq "NONE" %then %do;
18349 +        if last.node then do;
18350 +          output;
18351 +        end;
18352 +      %end;
18353 +    run;
18354 +  %end;
18356 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18358 +  %let oldexists=0;
18359 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18360 +     data old_tree_plot;
18361 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18362 +        rename nodecolor=oldnodecolor;
18363 +     run;
18365 +     proc sort data=old_tree_plot;
18366 +        by node;
18367 +     run;
18369 +     %let oldexists=1;
18370 +  %end;
18372 +  data &EM_USER_TREE_PLOT;
18373 +    length textall $800;
18374 +    merge tempoutnodes temptargetused
18376 +    %if &em_intTarget eq Y %then %do;
18377 +      tempinterval
18378 +    %end;
18380 +    %if &em_classTarget eq Y %then %do;
18382 +      %if &validFlag eq N %then %do;
18383 +        tempn(rename=(statvalue=N))
18384 +      %end;
18385 +      %else %do;
18386 +        tempn
18387 +      %end;
18389 +      temppredict tempprob
18391 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18392 +        tempprofittext
18393 +      %end;
18394 +    %end;
18395 +    ;
18396 +    by node;
18398 +    /* build nodetext based on user selection */
18399 +    textall="";
18401 +    %if &em_intTarget eq Y %then %do;
18402 +    if tarlevel="INTERVAL" then do;
18403 +      /* Nodeid */
18404 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18405 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18406 +      %end;
18408 +      /* Target identifier if multiple targets are used */
18409 +      %if "&multipleTar" eq "Y" %then %do;
18410 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18411 +      %end;
18413 +      %if &validFlag eq Y %then %do;
18414 +         /* Column labels displayed in validflag eq Y only */
18415 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18416 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18416!+noquote ))";
18417 +         %end;
18419 +         /* Average values */
18420 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18421 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18422 +         %end;
18424 +         /* RASE */
18425 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18426 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18427 +         %end;
18429 +         /* Count */
18430 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18431 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18432 +         %end;
18433 +      %end;
18434 +      %else %do;
18435 +         /* Average values */
18436 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18437 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18438 +         %end;
18440 +         /* RASE */
18441 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18442 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18443 +         %end;
18445 +         /* Count */
18446 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18447 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18448 +         %end;
18449 +      %end;
18451 +      /* nodecolor */
18452 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18453 +        nodecolor=PREDICTION;
18454 +      %end;
18455 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18456 +        nodecolor=RASE;
18457 +      %end;
18458 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18459 +        nodecolor=1;
18460 +      %end;
18462 +    end;
18463 +    %end;
18464 +    %if &em_classTarget eq Y %then %do;
18465 +    if tarlevel^="INTERVAL" then  do;
18467 +      /* Nodeid */
18468 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18469 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18470 +      %end;
18471 +      /* Target identifier if multiple targets are used */
18472 +      %if "&multipleTar" eq "Y" %then %do;
18473 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18474 +      %end;
18476 +      /* Predicted values */
18477 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
18478 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
18479 +      %end;
18481 +      /* Column labels displayed in validflag eq Y only */
18482 +      %if "&ValidFlag" eq "Y" %then %do;
18483 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18484 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18484!+noquote ))";
18485 +        %end;
18486 +      %end;
18488 +      /* Target Values */
18489 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
18490 +        textall=strip(textall)||"0A"x||strip(probtext);
18491 +      %end;
18493 +      /* include profit or loss for all target levels */
18494 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
18495 +        textall=strip(textall)||"0A"x||strip(profittext);
18496 +      %end;
18498 +      %if &validFlag eq N %then %do;
18499 +        /* Percent Correct */
18500 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18501 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
18502 +        %end;
18504 +         /* Count */
18505 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18506 +          %if "&adjusted" eq "N" %then %do;
18507 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
18508 +          %end;
18509 +          %else %do;
18510 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
18511 +          %end;
18512 +         %end;
18513 +      %end;
18514 +      %else %do;
18515 +        /* Percent Correct */
18516 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18517 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
18518 +        %end;
18520 +         /* Count */
18521 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18522 +          %if "&adjusted" eq "N" %then %do;
18523 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
18524 +          %end;
18525 +          %else %do;
18526 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
18527 +          %end;
18528 +         %end;
18529 +      %end;
18531 +      /* nodecolor */
18532 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
18533 +       %if &multipleTar ne Y %then %do;
18534 +        nodecolor=&predTarget;
18535 +       %end;
18536 +       %else %do;
18537 +         nodecolor=percentcorrect;
18538 +       %end;
18539 +      %end;
18540 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
18541 +        nodecolor=percentcorrect;
18542 +      %end;
18543 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
18544 +        nodecolor=1;
18545 +      %end;
18546 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
18547 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
18548 +          nodecolor=percentcorrect;
18549 +        %end;
18550 +        %else %do;
18551 +          nodecolor=profitloss;
18552 +        %end;
18553 +      %end;
18555 +    end;
18556 +    %end;
18557 +    %if &em_intTarget eq Y %then %do;
18558 +     drop  PREDICTION  TARGET TARLEVEL
18559 +     %if &ValidFlag eq Y %then %do;
18560 +         VPREDICTION
18561 +     %end;
18562 +     ;
18563 +    %end;
18564 +    %if &em_classTarget eq Y %then %do;
18565 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
18566 +     %if &ValidFlag eq Y %then %do;
18567 +         VSTATVALUE
18568 +     %end;
18569 +     ;
18570 +    %end;
18572 +  run;
18574 +  /* add leaf index information to plotds - based on primary target only*/
18575 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18576 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18577 +      set &EM_USER_OUTSTATS;
18578 +      if ((statname="PROBABILITY"
18579 +      %if &validexist %then %do;
18580 +       or statname="VALID: PROBABILITY"
18581 +      %end;
18582 +      ) AND (CATEGORY="&TARGETEVENT")
18583 +      %if "&multipleTar" eq "Y" %then %do;
18584 +        AND (Target="%EM_TARGET")
18585 +      %end;
18586 +      );
18587 +    run;
18589 +    %if &validexist %then %do;
18590 +      proc sort data=tempprob; by node; run;
18591 +      %let vpredTarget = V%substr(&predTarget, 2);
18592 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
18593 +         by node;
18594 +         id statname;
18595 +      run;
18596 +    %end;
18597 +  %end;
18598 +  %else %do;
18599 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18600 +      set &EM_USER_OUTSTATS;
18601 +      if ((statname="PREDICTION"
18602 +      %if &validexist %then %do;
18603 +       or statname="VALID: PREDICTION"
18604 +      %end;
18605 +      )
18606 +      %if "&multipleTar" eq "Y" %then %do;
18607 +        AND (Target="%EM_TARGET")
18608 +      %end;
18609 +      );
18610 +    run;
18611 +    %if &validexist %then %do;
18612 +      proc sort data=tempprob; by node; run;
18613 +      %let vpredTarget = V%substr(&predTarget, 2);
18614 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
18615 +         by node;
18616 +         id statname;
18617 +      run;
18618 +    %end;
18619 +  %end;
18621 +  proc sort data=tempprob; by node; run;
18622 +  data tempoutnodes;
18623 +    merge tempoutnodes tempprob;
18624 +    by node;
18625 +  run;
18627 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
18628 +  data tempnodes;
18629 +    retain traintotal validtotal;
18630 +    set tempnodes(where=(leaf ne . ));
18631 +    tprob=round(&predTarget, .01);
18632 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18633 +      percevent_train=round(tprob*100, .01);
18634 +    %end;
18635 +    %else %do;
18636 +      percevent_train=tprob;
18637 +    %end;
18639 +    perc_train=round((n/traintotal)*100, 0.01);
18640 +    /* leafwidth already has a *10 multiplier */
18641 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
18643 +    %if &validexist %then %do;
18644 +      %let vpredTarget = V%substr(&predTarget,2);
18645 +      vprob=round(&vpredTarget, .01);
18646 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18647 +        percevent_valid=round(vprob*100, .01);
18648 +      %end;
18649 +      %else %do;
18650 +        percevent_valid=vprob;
18651 +      %end;
18652 +      perc_valid=round((vn/validtotal)*100, .01);
18653 +    %end;
18655 +    index=_N_;
18656 +    keep node index tprob perc_train percevent_train
18657 +    %if &validexist %then %do;
18658 +        vprob percevent_valid perc_valid
18659 +    %end;
18660 +    ;
18661 +  run;
18662 +  proc sort data=tempnodes; by node; run;
18663 +  data &EM_USER_TREE_PLOT;
18664 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
18665 +    by node;
18666 +    if missing(node) then delete;
18667 +    %if &oldexists %then %do;
18668 +      if missing(nodecolor) then nodecolor=oldnodecolor;
18669 +      drop oldnodecolor;
18670 +    %end;
18671 +    abovetext = compbl(abovetext);
18673 +    /* add variable labels */
18674 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
18675 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
18676 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
18677 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
18678 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
18679 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
18681 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18682 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
18683 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
18684 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
18685 +          %end;
18686 +          %else %do;
18687 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
18688 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
18689 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
18690 +          %end;
18691 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
18693 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
18694 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
18695 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18696 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
18697 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
18698 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
18699 +          %end;
18700 +          %else %do;
18701 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
18702 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
18703 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
18704 +          %end;
18705 +    ;
18706 +  run;
18708 +  /* delete temporary tables */
18709 +  proc datasets lib=work nolist;
18710 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
18711 +  run;
18713 +%mend em_tree_makePlotDs;
18717 +%macro em_tree_report;
18719 +   /* report properties */
18720 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
18721 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
18722 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
18723 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
18724 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
18725 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
18726 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
18727 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
18728 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
18729 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
18730 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
18731 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
18732 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
18734 +   %let validexist=0;
18735 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
18736 +     %let validexist=1;
18737 +   %end;
18739 +   /* determine if multiple targets will be processed */
18740 +   %let em_tree_multipleTargets=N;
18741 +   %let em_tree_numTarget=1;
18742 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
18743 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
18744 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
18745 +         %let em_tree_multipleTargets=N;
18746 +      %end;
18747 +      %else %do;
18748 +        data _null_;
18749 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
18750 +          if eof then
18751 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
18752 +        run;
18754 +        %if &em_tree_numTarget gt 1 %then %do;
18755 +           %let em_tree_multipleTargets=Y;
18756 +        %end;
18757 +     %end;
18758 +   %end;
18760 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
18762 +   /* variable importance */
18763 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
18764 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
18766 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
18767 +     /* and the columns may not be generated                                                                                 */
18768 +     %let em_tree_cvexists=;
18769 +     %let em_tree_surrexists=.;
18770 +     data _null_;
18771 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
18772 +       if eof then do ;
18773 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
18774 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
18775 +       end;
18776 +     run;
18778 +     data &EM_USER_OUTIMPORT;
18779 +         set &EM_USER_OUTIMPORT;
18780 +         /* format columns based on Precison value specified */
18781 +         format importance 15.&EM_PROPERTY_PRECISION
18782 +              %if &validexist %then %do;
18783 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
18784 +              %end;
18785 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
18786 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
18787 +              %end;
18788 +         ;
18789 +     run;
18791 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
18792 +     proc print data=&EM_USER_OUTIMPORT
18793 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
18794 +          (where=((nrules>0) OR (nsurrogates>0)))
18795 +        %end;
18796 +        %else %do;
18797 +           (where=(nrules>0))
18798 +        %end;
18799 +        label noobs
18800 +        ;
18801 +     run;
18802 +     title10;
18804 +   %end;
18806 +   /* Sequence */
18807 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
18808 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
18809 +   data _null_ ;
18810 +      set &EM_USER_outseq (obs=2) end=eof ;
18811 +      if eof then do ;
18812 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
18813 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
18814 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
18815 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
18816 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
18817 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
18818 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
18819 +      end;
18820 +    run;
18822 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
18823 +      data &EM_USER_OUTSEQ;
18824 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
18825 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
18826 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18827 +           _XMISC_=_VMISC_
18828 +        %end;
18829 +        %if "&em_tree_aprof" ne "."  %then %do;
18830 +           _XAPROF_=_VAPROF_
18831 +           _XPROF_ = _VPROF_
18832 +        %end;
18833 +        %if "&em_tree_aloss" ne "."  %then %do;
18834 +           _XALOSS_=_VALOSS_
18835 +        %end;
18836 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
18837 +           _XPASE_ = _VPASE_
18838 +           _XPMISC_ = _VPMISC_
18839 +        %end;
18841 +        ));
18842 +     %end;
18843 +     %else %do;
18844 +        set &EM_USER_OUTSEQ;
18845 +     %end;
18847 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
18848 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18849 +            _MISC_   15.&EM_PROPERTY_PRECISION
18850 +         %end;
18851 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
18852 +            _PASE_  15.&EM_PROPERTY_PRECISION
18853 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
18854 +         %end;
18855 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
18856 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
18857 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18858 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
18859 +            %end;
18860 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
18861 +              _VPASE_  15.&EM_PROPERTY_PRECISION
18862 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
18863 +            %end;
18864 +         %end;
18865 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
18866 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
18867 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18868 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
18869 +            %end;
18870 +         %end;
18871 +         %if "&em_tree_seq" ne "." %then %do;
18872 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
18873 +         %end;
18874 +         %if "&em_tree_vseq" ne "." %then %do;
18875 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
18876 +         %end;
18877 +         %if "&em_tree_aprof" ne "." %then %do;
18878 +           _APROF_ 15.&EM_PROPERTY_PRECISION
18879 +           _PROF_ 15.&EM_PROPERTY_PRECISION
18880 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
18881 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
18882 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
18883 +           %end;
18884 +         %end;
18885 +         %else %if "&em_tree_aloss" ne "." %then %do;
18886 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
18887 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
18888 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
18889 +           %end;
18890 +         %end;
18891 +      ;
18892 +    run;
18893 +   %end;
18895 +   /* Observation Based Importance */
18896 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
18898 +      /* need to check for 0 obs */
18899 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
18900 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
18901 +      %let rc=%sysfunc(close(&dsid));
18903 +      %if &onobs %then %do;
18904 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
18905 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
18907 +         data &EM_USER_OUTOBSIMP;
18908 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
18909 +           if _a;
18910 +           by _INPUT1_;
18911 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
18912 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18913 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
18914 +                   %end;
18915 +                   ;
18916 +         run;
18917 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
18918 +      %end;
18919 +   %end;
18921 +  %end;
18923 +  /* create dataset to support tree diagram and icicle plot */
18924 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18925 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
18927 +  /* display tree diagram */
18928 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
18929 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
18931 +  /* display icicle diagram */
18932 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
18933 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
18935 +  /* Leaf Statistics Plot */
18936 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
18938 +  /* print leaf information to output window */
18939 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
18941 +     proc sort data=&EM_USER_TREE_PLOT out=t;
18942 +       by descending N;
18943 +     run;
18945 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
18946 +     %local vn;
18947 +     data _null_;
18948 +       set t (obs=2) end=eof;
18949 +       if eof then do;
18950 +         call symput("vn", strip(put(vn, best.)));
18951 +       end;
18952 +     run;
18954 +     data t;
18955 +       set t;
18956 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
18957 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
18958 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
18959 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
18960 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
18961 +       %end;
18962 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
18963 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
18964 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
18965 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
18966 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
18967 +          %end;
18968 +       %end;
18969 +       ;
18970 +     run;
18972 +     /* determine if rase is found in t */
18973 +    %let dsid=%sysfunc(open(t,i));
18974 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
18975 +    %let rc=%sysfunc(close(&dsid));
18977 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
18978 +     proc print data=t noobs label;
18979 +       where tprob ne .;
18980 +       var node depth N tprob
18981 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
18982 +         %if "&vn" ne "." %then %do;
18983 +           VN
18984 +         %end;
18985 +         vprob
18986 +       %end;
18987 +       %if &raseexists %then %do;
18988 +            RASE
18989 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
18990 +              VRASE
18991 +            %end;
18992 +       %end;
18993 +       ;
18994 +     run;
18995 +     title10;
18996 +  %end;
18998 +  /* create plots that are done during training of node */
18999 +  /* display iterative plot, including reference line */
19000 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
19001 +   /* %if &nleaves eq  %then %do; */
19002 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
19003 +      data _null_;
19004 +        set &EM_USER_OUTTOPOLOGY end=eof;
19005 +        if eof then do;
19006 +          call symput('nleaves', LEAF);
19007 +        end;
19008 +      run;
19009 +   /* %end; */
19011 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
19012 +    /*%EM_REPORT(view=1, Y=_ASE_); */
19013 +  %end;
19015 +  /* display leaf statistics */
19016 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
19018 +  /* stats by node if multiple targets = Y */
19019 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
19020 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
19021 +    data &EM_USER_OUTSTATS;
19022 +      set &EM_USER_OUTSTATS;
19024 +     * if STATNAME="TARGET" then delete;
19025 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
19026 +      drop leaf;
19027 +    run;
19028 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19030 +  %end;
19031 +  %else %do;
19032 +    /* add outstats and outdescribe to spk but not results */
19033 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19034 +  %end;
19036 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS1.TREE_OUTIMPORT.
NOTE: The data set EMWS1.TREE_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.TREE_OUTSEQ.
NOTE: The data set EMWS1.TREE_OUTSEQ has 4 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_CHURN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 3 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      155:103   204:136   247:102   247:125   279:104   313:104   355:103   355:126   398:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      414:99
NOTE: There were 3 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 71 observations read from the data set EMWS1.TREE_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 3 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 17 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 42 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 35 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 42 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 7 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 42 observations and 6 variables.
NOTE: The data set WORK.TEMPCLASS has 0 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 7 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 7 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      942:196   958:204   958:221
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 7 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 7 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set EMWS1.TREE_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 7 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 4 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE_TREE_PLOT has 7 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_TREE_PLOT.
NOTE: The data set WORK.T has 7 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 7 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      316:141
NOTE: There were 7 observations read from the data set EMWS1.TREE_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
19037
19038  *------------------------------------------------------------*;
19039  * End REPORT: Tree;
19040  *------------------------------------------------------------*;
 
19041  /* Reset EM Options */
19042  options formchar="|----|+|---+=|-/\<>*";
19043  options nocenter ls=256 ps=10000;
19044  goptions reset=all device=GIF NODISPLAY;
 
19045  proc sort data=WORK.EM_USER_REPORT;
19046  by ID VIEW;
19047  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19048  proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19049  by NAME;
19050  run;
 
NOTE: There were 13 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 13 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19051  proc sort data=EMWS1.Tree_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19052  by NAME;
19053  run;
 
NOTE: There were 13 observations read from the data set EMWS1.TREE_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19054  data WORK.ASSESS_META;
19055  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19056  by NAME;
19057  run;
 
NOTE: There were 13 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 13 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 13 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19058  data EM_temp_assessMeta;
19059  set EMWS1.Tree_CMeta_TRAIN;
19060  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19061  run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19062  data EM_temp_assessdata;
19063  set EMWS1.Tree_TRAIN(keep=
19064  P_Churn
19065  R_Churn
19066  V_Churn
19067  _WARN_
19068  Churn
19069  );
19070  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
NOTE: There were 108 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 108 observations read from the data set EMWS1.TREE_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 108 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
 
 
 
 
 
 
 
 
23401   data EM_temp_assessMeta;
23402   set EMWS1.Tree_CMeta_TRAIN;
23403   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23404   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23405   data EM_temp_assessdata;
23406   set EMWS1.Tree_VALIDATE(keep=
23407   P_Churn
23408   R_Churn
23409   V_Churn
23410   _WARN_
23411   Churn
23412   );
23413   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.01 seconds
 
NOTE: There were 46 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 46 observations read from the data set EMWS1.TREE_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 46 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
 
 
 
 
 
 
27754   %let _cn = %sysfunc(getoption(CENTER));
27755   options nocenter;
27756   proc print data=EMWS1.Tree_EMREPORTFIT noobs label;
27757   var STAT LABEL TRAIN
27758   VALIDATE
27759   TEST
27760   ;
27761   by TARGET TARGETLABEL;
27762   title9 ' ';
27763   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
27764   run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27765   title10;
27766   options &_cn;
 
27767   proc datasets library=EMWS1 nolist;
27768   modify Tree_EMRANK;
27769   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
27770   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
27771   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMRANK.DATA.
27772   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
27773   %let _cn = %sysfunc(getoption(CENTER));
27774   options nocenter;
27775   proc print data=EMWS1.Tree_EMRANK label noobs;
27776   var
27777   decile N _targetMean_ _meanP_;
27778   by
27779   notsorted DATAROLE
27780   notsorted TARGET
27781   notsorted TARGETLABEL
27782   ;
27783   title9 ' ';
27784   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
27785   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE_EMRANK.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
27786   title10;
27787   options &_cn;
 
27788   proc datasets library=EMWS1 nolist;
27789   modify Tree_EMSCOREDIST;
27790   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
27791   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
27792   run;
 
NOTE: MODIFY was successful for EMWS1.TREE_EMSCOREDIST.DATA.
27793   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
