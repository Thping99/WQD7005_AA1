*------------------------------------------------------------*
* Training Log
Date:                January 07, 2024
Time:                15:53:32
*------------------------------------------------------------*
14716  proc freq data=EMWS1.Boost2_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.Boost2META;
14718  run;

NOTE: There were 18 observations read from the data set EMWS1.BOOST2_VARIABLESET.
NOTE: The data set WORK.BOOST2META has 11 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.12 seconds
      cpu time            0.00 seconds
      

14719  proc print data=WORK.Boost2META label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;

NOTE: There were 11 observations read from the data set WORK.BOOST2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.09 seconds
      cpu time            0.01 seconds
      

14725  title10;

14726  %let EMNORLEN = %DMNORLEN;
EMWS1.Tree2_TRAIN EMWS1.Tree2_TRAIN 
EMWS1.Tree2_TRAIN EMWS1.Tree2_TRAIN EMWS1 Tree2_TRAIN 
EMWS1.Tree2_TRAIN EMWS1.Tree2_TRAIN 
EMWS1.Tree2_TRAIN EMWS1.Tree2_TRAIN EMWS1 Tree2_TRAIN 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >> 
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >> 
"No decisions defined for target "Churn"." 
14727  proc print data = EMWS1.Tree2_Churn_DM noobs label;
14728  var _type_ variable label;
14729  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14730  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14731  title9 ' ';
14732  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14733  run;

NOTE: There were 3 observations read from the data set EMWS1.TREE2_CHURN_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

14734  title10;

14735  %let EMEXCEPTIONSTRING=;
PERFORMANCE  DETAILS
15180  *------------------------------------------------------------*;
15181  * Boost2: Generation of macros and macro variables;
15182  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15183  *------------------------------------------------------------*;

15184  %let EMEXCEPTIONSTRING=;
15185  *------------------------------------------------------------*;
15186  * TRAIN: Boost2;
15187  *------------------------------------------------------------*;
15188  %let EM_ACTION = TRAIN;
15189  %let syscc = 0;
15190  %macro main;
15191  
15192    filename temp catalog 'sashelp.emmodl.boost_macros.source';
15193    %include temp;
15194    filename temp;
15195  
15196    %setProperties;
15197  
15198    %if %upcase(&EM_ACTION) = CREATE %then %do;
15199      filename temp catalog 'sashelp.emmodl.boost_create.source';
15200      %include temp;
15201      filename temp;
15202  
15203      %create;
15204    %end;
15205  
15206     %else
15207     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15208  
15209         filename temp catalog 'sashelp.emmodl.boost_train.source';
15210         %include temp;
15211         filename temp;
15212         %train;
15213     %end;
15214  
15215    %else
15216    %if %upcase(&EM_ACTION) = SCORE %then %do;
15217      filename temp catalog 'sashelp.emmodl.boost_score.source';
15218      %include temp;
15219      filename temp;
15220  
15221      %score;
15222  
15223    %end;
15224  
15225    %else
15226    %if %upcase(&EM_ACTION) = REPORT %then %do;
15227  
15228         filename temp catalog 'sashelp.emmodl.boost_report.source';
15229         %include temp;
15230         filename temp;
15231  
15232         %report;
15233     %end;
15234  
15235     %doendm:
15236  %mend main;
15237  
15238  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_MACROS.SOURCE.
15239 +
15240 +%macro SetProperties;
15241 +
15242 +     /* boost options */
15243 +     %em_checkmacro(name=EM_PROPERTY_ITERATIONS,   value=50, global=Y);
15244 +     %em_checkmacro(name=EM_PROPERTY_TRAINPROPORTION,   value=60, global=Y);
15245 +     %em_checkmacro(name=EM_PROPERTY_CATEGORICALBINS, value=30, global=Y);
15246 +     %em_checkmacro(name=EM_PROPERTY_INTERVALBINS, value=100, global=Y);
15247 +     %em_checkmacro(name=EM_PROPERTY_HUBER, value=NO, global=Y);
15248 +     %em_checkmacro(name=EM_PROPERTY_SEED,   value=12345, global=Y);
15249 +     %em_checkmacro(name=EM_PROPERTY_SHRINKAGE,   value=0.1, global=Y);
15250 +     %em_checkmacro(name=EM_PROPERTY_LEAFFRACTION,   value=0.1, global=Y);
15251 +     %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,   value=., global=Y);
15252 +     %em_checkmacro(name=EM_PROPERTY_NODESIZE,   value=20000, global=Y);
15253 +     %em_checkmacro(name=EM_PROPERTY_SUBSERIES,   value=BEST, global=Y);
15254 +     %em_checkmacro(name=EM_PROPERTY_ITERATIONNUM,   value=1, global=Y);
15255 +
15256 +     %em_checkmacro(name=EM_PROPERTY_PRECISION,    value=0, global=Y);
15257 +     %em_checkmacro(name=EM_PROPERTY_MISSING,      value=USEINSEARCH, global=Y);
15258 +     %em_checkmacro(name=EM_PROPERTY_MINCATSIZE, value=5, global=Y);
15259 +     %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,  value=2, global=Y);
15260 +     %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,   value=2, global=Y);
15261 +     %em_checkmacro(name=EM_PROPERTY_REUSEVAR,   value=1, global=Y);
15262 +     %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,   value=5000, global=Y);
15263 +     %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,   value=DISK, global=Y);
15264 +
15265 +     %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE, value=PROFIT, global=Y);
15266 +     %em_checkmacro(name=EM_PROPERTY_MEASURE, value=PROFIT, global=Y);
15267 +     %em_checkmacro(name=EM_PROPERTY_NSURRS, value=0, global=Y);
15268 +     %em_checkmacro(name=EM_PROPERTY_VARSELECTION, value=Y, global=Y);
15269 +
15270 +     %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE, value=N, global=Y);
15271 +     %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP, value=5, global=Y);
15272 +     %em_checkmacro(name=EM_PROPERTY_NUMPAIRIMP, value=0, global=Y);
15273 +
15274 +%mend SetProperties;
15275 +
15276 +
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAIN.SOURCE.
15278 +%macro train;
15280 +   filename temp catalog 'sashelp.emmodl.boost_trainmacros.source';
15281 +   %include temp;
15282 +   filename temp;
15284 +   %if &EM_IMPORT_DATA eq %then %do;
15285 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15286 +       %put &em_codebar;
15287 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15288 +       %put &errormsg;
15289 +       %put &em_codebar;
15290 +       %goto doendm;
15291 +   %end;
15292 +   %else
15293 +       %let EMEXCEPTIONSTRING =;
15295 +   %if  &EM_NUM_TARGET ne 1 %then %do;
15296 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15297 +        %put &em_codebar;
15298 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15299 +        %put &errormsg;
15300 +        %put &em_codebar;
15301 +        %goto doendm;
15302 +   %end;
15304 +   %let target_level = %EM_TARGET_LEVEL;
15305 +   %let target_var = %EM_TARGET;
15307 +   %if ("&target_Level" ne "INTERVAL") %then %do;
15308 +       %em_boost_makeDMDB(indata=&EM_IMPORT_DATA, target=&target_Var,
15309 +                             nLevel=_nTargetLevel);
15310 +   %end;
15312 +   /* check actual num of target levels */
15313 +   %if (&target_Level eq BINARY) %then %do;
15314 +      %if &_nTargetLevel  > 2 %then %do;
15315 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15316 +        %put &em_codebar;
15317 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15318 +        %put &errormsg;
15319 +        %put &em_codebar;
15320 +        %goto doendm;
15321 +      %end;
15322 +   %end;
15324 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15325 +        and (&EM_NUM_NOMINAL_INPUT < 1) %then %do;
15326 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15327 +        %put &em_codebar;
15328 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15329 +        %put &errormsg;
15330 +        %put &em_codebar;
15331 +        %goto doendm;
15332 +   %end;
15334 +   /* Initialize property macro variables */
15335 +   %SetProperties;
15337 +   /* data sets */
15338 +   %EM_GETNAME(key=MODEL, type=DATA);
15339 +   %EM_GETNAME(key=IMPORTANCE, type=DATA);
15340 +   %EM_GETNAME(key=SUBFIT, type=DATA);
15341 +   %EM_GETNAME(key=EMOUTFIT, type=DATA);
15343 +   /* files
15344 +   %EM_GETNAME(key=BINNINGCODE, type=FILE, extension=sas);*/
15346 +   /* retrieve target information */
15347 +   %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='TARGET'))));
15349 +   %let vn_event =%sysfunc(varnum(&dsid, EVENT));
15350 +   %let vn_target_type = %sysfunc(varnum(&dsid, TYPE));
15351 +   %let vn_target_format = %sysfunc(varnum(&dsid, FORMAT));
15352 +   %let vn_target_level  = %sysfunc(varnum(&dsid, LEVEL));
15353 +   %do %while(^ %sysfunc(fetch(&dsid)));
15354 +      %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &vn_event)));
15355 +      %let Target_Event = %nrbquote(%sysfunc(tranwrd(&temp, %str(%"),"")));
15356 +      %let Target_Type =  %sysfunc(getvarc(&dsid, &vn_target_type));
15357 +      %let Target_Format = %sysfunc(getvarc(&dsid, &vn_target_format));
15358 +      %let Target_Level = %sysfunc(getvarc(&dsid, &vn_target_level));
15359 +   %end;
15360 +   %let dsid = %sysfunc(close(&dsid));
15362 +   /* if target level is ORDINAL, throw run time exception -- proc boost does not support ordinal target */
15363 +   %if &Target_Level eq ORDINAL %then %do;
15364 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.INVALIDORDINALTARGET;
15365 +        %put &em_codebar;
15366 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_invalidordinaltarget_note, NOQUOTE));
15367 +        %put &errormsg;
15368 +        %put &em_codebar;
15369 +        %goto doendm;
15370 +   %end;
15372 +   /* if subSeries=ITERATIONS and iterationNum not specified, exception should be thrown */
15373 +   %if ((&EM_PROPERTY_SUBSERIES eq ITERATIONS) and (&EM_PROPERTY_ITERATIONNUM eq . )) %then %do;
15374 +        %let EMEXCEPTIONSTRING = exception.server.EMTOOL.BOOST.NOITERATIONNUM;
15375 +        %put &em_codebar;
15376 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noiterationnum_note, NOQUOTE));
15377 +        %put &errormsg;
15378 +        %put &em_codebar;
15379 +        %goto doendm;
15380 +   %end;
15382 +   %runBoostProcedure;
15385 +   %doendm:
15386 +%mend train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.BOOST_TRAINMACROS.SOURCE.
15387 +%Macro em_boost_makeDMDB(indata=, target=,  nLevel= );
15388 +  %global &nLevel;
15390 +  %let targetLevel=;
15391 +  data _null_;
15392 +     length orderString $64;
15393 +     set &em_data_variableset end=eof;
15394 +     where NAME="&target";
15395 +     select(order);
15396 +            when('')        order ='DESC';
15397 +            when('FMTASC')  order='ASCFMT';
15398 +            when('FMTDESC') order='DESFMT';
15399 +            otherwise;
15400 +     end;
15401 +     if eof then do;
15402 +        call symput("targetOrder", trim(order));
15403 +        call symput("targetLevel", trim(Level));
15404 +     end;
15405 +  run;
15407 +  %if "&targetLevel" ne "INTERVAL" %then %do;
15408 +  proc dmdb batch data=&indata dmdbCat=_BoostDMDB
15409 +    classout=_tmp_dmdbout;
15410 +    class &target(&targetOrder);
15411 +    target &target;
15412 +  run;
15413 +  data _tmp_dmdbout;
15414 +    set _tmp_dmdbout;
15415 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15416 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15417 +  run;
15418 +  data _null_;
15419 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15420 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15421 +    %let dsid = %sysfunc(close(&dsid));
15422 +     call symput("&nLevel", put(&_obs, Best12.));
15423 +  run;
15425 +  proc datasets lib=work nolist;
15426 +     delete _tmp_dmdbout;
15427 +  run;
15428 +  quit;
15429 +  %end;
15431 +%Mend em_boost_makeDMDB;
15433 +%macro runBoostProcedure;
15435 +  proc sql;
15436 +    reset noprint;
15437 +    select count(*) into :nobs from &EM_IMPORT_DATA;
15438 +  quit;
15440 +  %let arborkluge= "work._BoostDMDB";
15441 +  proc arbor proc=treeboost data=&EM_IMPORT_DATA
15443 +    %if &EM_PROPERTY_ITERATIONS ne %then %do;
15444 +      iterations = &EM_PROPERTY_ITERATIONS
15445 +    %end;
15447 +    %if &EM_PROPERTY_TRAINPROPORTION ne %then %do;
15448 +       %let tprop = %sysevalf(&EM_PROPERTY_TRAINPROPORTION / 100);
15449 +       trainproportion = &tprop
15450 +    %end;
15452 +    %if &EM_PROPERTY_SEED ne %then %do;
15453 +       seed = &EM_PROPERTY_SEED
15454 +    %end;
15456 +    %if &EM_PROPERTY_SHRINKAGE ne %then %do;
15457 +       shrinkage = &EM_PROPERTY_SHRINKAGE
15458 +    %end;
15460 +    %if &EM_PROPERTY_LEAFFRACTION ne %then %do;
15461 +      leaffraction = &EM_PROPERTY_LEAFFRACTION
15462 +    %end;
15464 +    %let splitsize = &EM_PROPERTY_SPLITSIZE;
15465 +    %if &splitsize ge &nobs %then %do;
15466 +       %let splitsize= .;
15467 +    %end;
15468 +    %if &splitsize ne . %then %do;
15469 +      splitsize = &splitsize
15470 +    %end;
15472 +    %if &EM_PROPERTY_MINCATSIZE ne %then %do;
15473 +      mincatsize = &EM_PROPERTY_MINCATSIZE
15474 +    %end;
15476 +    %if &EM_PROPERTY_MAXBRANCH ne %then %do;
15477 +       maxbranch = &EM_PROPERTY_MAXBRANCH
15478 +    %end;
15480 +    %if &EM_PROPERTY_MAXDEPTH ne %then %do;
15481 +       maxdepth = &EM_PROPERTY_MAXDEPTH
15482 +    %end;
15484 +    %let nsurrs = ;
15485 +    %if &EM_PROPERTY_NSURRS ne %then %do;
15486 +      %let numInputs = %sysevalf(&EM_NUM_BINARY_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT + &EM_NUM_NOMINAL_INPUT);
15487 +      %let nsurrs = %sysevalf(%sysfunc(min(&EM_PROPERTY_NSURRS, (&numInputs -1 ))));
15488 +      maxsurrs = &nsurrs
15489 +    %end;
15491 +    %if &EM_PROPERTY_MISSING ne %then %do;
15492 +      Missing = &EM_PROPERTY_MISSING
15493 +    %end;
15495 +    %if &EM_PROPERTY_REUSEVAR ne %then %do;
15496 +      reusevar = &EM_PROPERTY_REUSEVAR
15497 +    %end;
15498 +/*
15499 +    %if &EM_PROPERTY_PRECISION ne %then %do;
15500 +      intervaldecimals=&EM_PROPERTY_PRECISION
15501 +    %end;
15502 +*/
15503 +    %if &EM_PROPERTY_EXHAUSTIVE ne %then %do;
15504 +      Exhaustive = &EM_PROPERTY_EXHAUSTIVE
15505 +    %end;
15507 +    %if &Target_Event ne %then %do;
15508 +      Event="&Target_Event"
15509 +    %end;
15511 +    %if &EM_PROPERTY_CATEGORICALBINS ne %then %do;
15512 +      CategoricalBins = &EM_PROPERTY_CATEGORICALBINS
15513 +    %end;
15515 +    %if &EM_PROPERTY_INTERVALBINS ne %then %do;
15516 +      IntervalBins = &EM_PROPERTY_INTERVALBINS
15517 +    %end;
15519 +    %if &TARGET_LEVEL eq INTERVAL %then %do;
15520 +      %if &EM_PROPERTY_HUBER ne %then %do;
15521 +        Huber=&EM_PROPERTY_HUBER
15522 +      %end;
15523 +    %end;
15524 +    ;
15526 +    %if %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED ne %then %do;
15527 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15528 +    %end;
15530 +    %if %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED ne  %then %do;
15531 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15532 +    %end;
15534 +    %if %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED ne %then %do;
15535 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15536 +    %end;
15538 +    %if %EM_FREQ ne %then %do;
15539 +       freq %EM_FREQ;
15540 +    %end;
15542 +    target %EM_TARGET / level = &TARGET_LEVEL;
15544 +    &EM_DEC_STATEMENT;
15546 +    %if &EM_PROPERTY_PERFORMANCE ne %then %do;
15547 +      performance  workdatalocation = &EM_PROPERTY_PERFORMANCE
15548 +    %end;
15549 +    %if &EM_PROPERTY_NODESIZE ne %then %do;
15550 +       nodesize = &EM_PROPERTY_NODESIZE
15551 +    %end;
15552 +    ;
15553 +    save model=&EM_USER_MODEL;
15554 +  run;
15555 +  quit;
15556 +  %em_checkerror();
15558 +%mend runBoostProcedure;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
WARNING: Argument 2 to function GETVARC referenced by the %SYSFUNC or %QSYSFUNC macro function is out of range.
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.08 seconds
      cpu time            0.01 seconds
      
NOTE: There were 108 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.11 seconds
      cpu time            0.01 seconds
      

NOTE: Variable _WARN_ is uninitialized.
NOTE: 1602431 kilobytes of physical memory.
NOTE: Will use 108 out of 108 training cases.
NOTE: Using memory pool with 25057280 bytes.
NOTE: Passed training data 250 times.
NOTE: Current TREEBOOST model contains 50 trees.
NOTE: Training used 13688 bytes of work memory.
NOTE: The data set EMWS1.BOOST2_MODEL has 6184 observations and 4 variables.


NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
      
NOTE: There were 108 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 108 observations read from the data set EMWS1.TREE2_TRAIN.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.09 seconds
      cpu time            0.00 seconds
      


15561  %let SYSCC = 0;
NOTE: PROCEDURE DISPLAY used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

15562  *------------------------------------------------------------*;
15563  * End TRAIN: Boost2;
15564  *------------------------------------------------------------*;
15565  

15566  *------------------------------------------------------------*;
15567  * Close any missing semi colons;
15568  *------------------------------------------------------------*;
15569  ;
15570  ;
15571  ;
15572  ;
15573  quit;
15574  *------------------------------------------------------------*;
15575  * Close any unbalanced quotes;
15576  *------------------------------------------------------------*;
15577  /*; *"; *'; */
15578  ;
15579  run;
15580  quit;
15581  /* Reset EM Options */
15582  options formchar="|----|+|---+=|-/\<>*";
15583  options nocenter ls=256 ps=10000;
15584  goptions reset=all device=GIF NODISPLAY;

