*------------------------------------------------------------*
User:                Tsu
Date:                January 07, 2024
Time:                15:50:43
Site:                12601940
Platform:            W32_8HOME
Maintenance Release: 9.04.01M3P062415
EM Version:          14.1
* 
*------------------------------------------------------------*
* Training Log
Date:                January 07, 2024
Time:                15:50:37
*------------------------------------------------------------*
14716  proc freq data=EMWS1.Tree2_VariableSet noprint;
14717  table ROLE*LEVEL/out=WORK.Tree2META;
14718  run;
 
NOTE: There were 13 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.TREE2META has 6 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
 
 
14719  proc print data=WORK.Tree2META label noobs;
14720  var ROLE LEVEL COUNT;
14721  label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL = "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
14722  title9 ' ';
14723  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
14724  run;
 
NOTE: There were 6 observations read from the data set WORK.TREE2META.
NOTE: The PROCEDURE PRINT printed page 1.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.08 seconds
      cpu time            0.00 seconds
 
 
14725  title10;
 
14726  %let EMNORLEN = %DMNORLEN;
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN
EMWS1.Part_TRAIN EMWS1.Part_TRAIN EMWS1 Part_TRAIN
>>>>>>>>>>>>>> TARGET(   USE='Y'
                         REPORT='N'
                         NAME='Churn'
                         ROLE='TARGET'
                         LEVEL='INTERVAL'
                         ORDER=''
                         CREATOR=''
                         FORMATTYPE='QUANTITY'
                         FAMILY=''
                         LOWERLIMIT=.
                         UPPERLIMIT=.
                         DISTRIBUTION=''
                         COMMENT=''
                         PRICE=.
                         TYPE='N'
                         LABEL=''
                         FORMAT='BEST12.0'
                         INFORMAT='BEST32.0'
                         INDEX='N'
                         INDEXTYPE='NONE'
                         LENGTH=8
                      )[11273]
PERFORMANCE  DETAILS
WORK.EM_DMDB WORK.EM_DMDB
WORK.EM_DMDB WORK.EM_DMDB WORK EM_DMDB
"No decisions defined for target "Churn"."
14787  proc print data = EMWS1.Tree2_Churn_DM noobs label;
14788  var _type_ variable label;
14789  where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
14790  label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))" VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
14791  title9 ' ';
14792  title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
14793  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_CHURN_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
14794  title10;
 
14795  %let EMEXCEPTIONSTRING=;
15271  *------------------------------------------------------------*;
15272  * Tree2: Generation of macros and macro variables;
15273  * To see the code generated, set the EM_DEBUG macro variable to SOURCE or _ALL_;
15274  *------------------------------------------------------------*;
 
15275  %let EMEXCEPTIONSTRING=;
15276  *------------------------------------------------------------*;
15277  * TRAIN: Tree2;
15278  *------------------------------------------------------------*;
15279  %let EM_ACTION = TRAIN;
15280  %let syscc = 0;
15281  %macro main;
15282
15283    %if %upcase(&EM_ACTION) = CREATE %then %do;
15284      filename temp catalog 'sashelp.emmodl.tree_create.source';
15285      %include temp;
15286      filename temp;
15287
15288      %em_tree_create;
15289    %end;
15290
15291     %else
15292     %if %upcase(&EM_ACTION) = TRAIN %then %do;
15293
15294         filename temp catalog 'sashelp.emmodl.tree_train.source';
15295         %include temp;
15296         filename temp;
15297         %em_tree_train;
15298     %end;
15299
15300    %else
15301    %if %upcase(&EM_ACTION) = SCORE %then %do;
15302      filename temp catalog 'sashelp.emmodl.tree_score.source';
15303      %include temp;
15304      filename temp;
15305
15306      %em_tree_score;
15307
15308    %end;
15309
15310    %else
15311    %if %upcase(&EM_ACTION) = REPORT %then %do;
15312
15313         filename temp catalog 'sashelp.emmodl.tree_report.source';
15314         %include temp;
15315         filename temp;
15316
15317         %em_tree_report;
15318     %end;
15319
15320    %else
15321    %if %upcase(&EM_ACTION) = OPENINT %then %do;
15322
15323         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15324         %include temp;
15325         filename temp;
15326         %EM_TREE_OPENTREEVIEWER;
15327
15328     %end;
15329
15330    %else
15331    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
15332
15333         filename temp catalog 'sashelp.emmodl.tree_actions.source';
15334         %include temp;
15335         filename temp;
15336         %EM_TREE_CLOSETREEVIEWER;
15337
15338     %end;
15339
15340
15341     %doendm:
15342  %mend main;
15343
15344  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAIN.SOURCE.
15346 +%macro em_tree_train;
15348 +   %if &EM_IMPORT_DATA eq %then %do;
15349 +       %let EMEXCEPTIONSTRING = exception.server.IMPORT.NOTRAIN,1;
15350 +       %put &em_codebar;
15351 +       %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_nodeTrainRawData_note, NOQUOTE));
15352 +       %put &errormsg;
15353 +       %put &em_codebar;
15354 +       %goto doendm;
15355 +   %end;
15356 +   %else
15357 +       %let EMEXCEPTIONSTRING =;
15359 +   %if  &EM_NUM_TARGET lt 1 %then %do;
15360 +        %let EMEXCEPTIONSTRING = exception.server.USE1TARGET;
15361 +        %put &em_codebar;
15362 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.use01target_err, NOQUOTE));
15363 +        %put &errormsg;
15364 +        %put &em_codebar;
15365 +        %goto doendm;
15366 +   %end;
15368 +   %if  (&EM_NUM_INTERVAL_INPUT < 1) and (&EM_NUM_BINARY_INPUT < 1) and (&EM_NUM_ORDINAL_INPUT < 1)
15369 +        and (&EM_NUM_NOMINAL_INPUT < 1) and (&EM_NUM_INTERVAL_REJECTED < 1) and (&EM_NUM_BINARY_REJECTED <1)
15370 +        and (&EM_NUM_ORDINAL_REJECTED < 1) and (&EM_NUM_NOMINAL_REJECTED < 1) %then %do;
15371 +        %let EMEXCEPTIONSTRING = exception.server.USEATLEAST1INPUTREJECT;
15372 +        %put &em_codebar;
15373 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, error_noInput_note, NOQUOTE));
15374 +        %put &errormsg;
15375 +        %put &em_codebar;
15376 +        %goto doendm;
15377 +   %end;
15379 +   /* Initialize property macro variables */
15380 +   filename temp catalog 'sashelp.emmodl.tree_macros.source';
15381 +   %include temp;
15382 +   filename temp;
15384 +   %EM_SetProperties;
15386 +   /* need to delete EMTREE if not used as import tree data since AUTODELETE=N */
15387 +   %EM_GETNAME(key=EMTREE, type=DATA);
15388 +   %if "&EM_PROPERTY_IMPORTMODEL" eq "Y" %then %do;
15389 +     /* if import eq Y and no importtable defined, throw an exception */
15390 +      %if %length(&EM_PROPERTY_ImportedTreeData)=0 %then %do;
15391 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEMODELDATASET;
15392 +         %let  errmsg = %sysfunc(sasmsg(sashelp.dmine, NOTREEMODELDATASET_ERR , NOQUOTE));
15393 +         %put &em_codebar;
15394 +         %put &errmsg;
15395 +         %put &em_codebar;
15396 +         %goto doendm;
15397 +      %end;
15398 +      %else %if %sysfunc(exist(&EM_PROPERTY_ImportedTreeData))=0 %then %do;
15399 +         %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15400 +         %put &em_codebar;
15401 +         %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15402 +         %put &errormsg;
15403 +         %put &em_codebar;
15404 +         %goto doendm;
15405 +      %end;
15406 +      %else %do;
15407 +         %let dsid=%sysfunc(open(&EM_PROPERTY_ImportedTreeData));
15408 +         %let varnumID = %sysfunc(varnum(&dsid,ID));
15409 +         %let varnumLabel = %sysfunc(varnum(&dsid,LABEL));
15410 +         %let varnumX = %sysfunc(varnum(&dsid,X));
15411 +         %let varnumY = %sysfunc(varnum(&dsid,Y));
15412 +         %let dsid = %sysfunc(close(&dsid));
15413 +         %if &varnumID=0 or &varnumLabel=0 or &varnumX=0 or &varnumY=0 %then %do;
15414 +            %let EMEXCEPTIONSTRING = exception.server.EMTOOL.INVALIDTREEMODELDATASET;
15415 +            %put &em_codebar;
15416 +            %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.INVALIDTREEMODELDATASET_ERR, NOQUOTE));
15417 +            %put &errormsg;
15418 +            %put &em_codebar;
15419 +            %goto doendm;
15420 +         %end;
15421 +      %end;
15422 +      %if %qupcase(&EM_USER_EMTREE) ne %qupcase(&EM_PROPERTY_ImportedTreeData) and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15423 +         proc delete data=&EM_USER_EMTREE;
15424 +         run;
15425 +      %end;
15426 +   %end;
15427 +   %else %if "&EM_PROPERTY_FREEZE" ne "Y" and (%sysfunc(exist(&EM_USER_EMTREE)) or %sysfunc(exist(&EM_USER_EMTREE, VIEW))) %then %do;
15428 +      proc delete data=&EM_USER_EMTREE;
15429 +      run;
15430 +   %end;
15432 +   /* load tree macros */
15433 +   filename temp catalog 'sashelp.emmodl.tree_trainmacros.source';
15434 +   %include temp;
15435 +   filename temp;
15437 +   /* data sets */
15438 +   %EM_GETNAME(key=OUTSTATS,   type=DATA);
15439 +   %EM_GETNAME(key=EXPORTTREE, type=DATA);
15440 +   %EM_GETNAME(key=TREE_PLOT,     type=DATA);
15442 +   /* files */
15443 +   %EM_REGISTER(key=ENGLISHRULES, type=FILE, extension=txt);
15445 +   /* check actual num of target levels */
15446 +   %if ("%EM_TARGET_LEVEL" eq "BINARY") %then %do;
15447 +      %EM_CheckBinaryTargetLevel(indata=&EM_IMPORT_DATA, target=%EM_TARGET,
15448 +                              nLevel=_nTargetLevel );
15449 +      %if &_nTargetLevel  > 2 %then %do;
15450 +        %let EMEXCEPTIONSTRING = exception.server.METADATA.WRONGTARGETLEVEL,&target_Var;
15451 +        %put &em_codebar;
15452 +        %let errormsg = %sysfunc(sasmsg(sashelp.dmine, metadata.wrongtargetlevel, NOQUOTE));
15453 +        %put &errormsg;
15454 +        %put &em_codebar;
15455 +        %goto doendm;
15456 +      %end;
15457 +   %end;
15459 +   /* neither cost variables nor constant cost are valid with USEDECISIONS */
15460 +   %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15461 +     %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15462 +        %let costflag=0;
15463 +        data _null_;
15464 +          set &EM_DEC_DECMETA(where=(_TYPE_="DECISION" AND USE="Y" AND ^missing(COST) )) end=eof;
15465 +          if eof then call symput("costflag", _N_);
15466 +        run;
15467 +        %if &costflag gt 0 %then %do;
15468 +          %let EMEXCEPTIONSTRING = exception.server.TREE.INVALIDDECISION;
15469 +          %put &em_codebar;
15470 +          %let errormsg = %sysfunc(sasmsg(sashelp.dmine, costnotvalidwithusedecisions_note_err, NOQUOTE));
15471 +          %put &errormsg;
15472 +          %put &em_codebar;
15473 +          %goto doendm;
15474 +       %end;
15475 +     %end;
15476 +   %end;
15478 +   /* determine if multiple targets will be processed */
15479 +   %let em_tree_multipleTargets=N;
15480 +   %let em_tree_numTarget = 1;
15481 +   %let em_tree_targetVars=;
15483 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
15484 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
15485 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
15486 +         %let em_tree_multipleTargets=N;
15487 +      %end;
15488 +      %else %do;
15489 +         /* create macro array of targets  */
15490 +         data _null_;
15491 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
15492 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
15493 +           if eof then
15494 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
15495 +        run;
15497 +        %if &em_tree_numTarget gt 1 %then %do;
15498 +           %let em_tree_multipleTargets=Y;
15499 +        %end;
15500 +      %end;
15501 +   %end;
15503 +   /* create view of only necessary variable for performance reasons */
15504 +   %let tempData = &EM_LIB..em_&EM_NODEID;
15505 +   data &tempData / view=&tempData;
15506 +     set &EM_IMPORT_DATA (keep=%EM_INPUT %EM_REJECTED %EM_TARGET %EM_FREQ %EM_COST
15507 +     %if "&em_tree_multipleTargets" eq "N" %then %do;
15508 +       %EM_TARGET
15509 +     %end;
15510 +     %else %do;
15511 +       %if &em_tree_numTarget ne 0 %then %do;
15512 +         %do i=1 %to &em_tree_numTarget;
15513 +            &&em_tree_targetVars&i
15514 +         %end;
15515 +       %end;
15516 +     %end;
15517 +     );
15518 +   run;
15520 +   /* run Tree procedure */
15521 +   %em_tree_runTreeProcedure(indata=&tempData, multipleTar=&em_tree_multipleTargets);
15523 +   /* Check return code and throw exception if error is detected */
15524 +   %if %length(&EMEXCEPTIONSTRING) %then %goto doendm;
15525 +   %if &syserr %then %do;
15526 +     %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
15527 +     %goto doendm;
15528 +   %end;
15530 +   /* add decision score code if multiple targets are processed */
15531 +   %if "&em_tree_multipleTargets" eq "Y" %then %do;
15532 +     %EM_MODEL(TARGET=%EM_TARGET, DECSCORECODE=Y, CLASSIFICATION=Y, FITSTATISTICS=N);
15533 +   %end;
15535 +   /* create outfit dataset if multiple score statements have been executed */
15536 +   %em_tree_createFitStats(multipleTar=&em_tree_multipleTargets);
15538 +   /* create English Rules */
15539 +   filename X "&EM_USER_ENGLISHRULES" encoding='utf-8' NOBOM;
15540 +     %if "&em_Tree_multipleTargets" eq "N" %then %do;
15541 +       %em_tree_makeEnglishRules;
15543 +       /* English Rules */
15544 +       %EM_REPORT(key=ENGLISHRULES, viewtype=SOURCE, block=MODEL, description=ENGLISHRULES, autodisplay=N);
15546 +     %end;
15547 +   filename x;
15549 +   %doendm:
15550 +%mend em_tree_train;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_MACROS.SOURCE.
15551 +%macro EM_SetProperties;
15553 +   /* train properties */
15554 +   %em_checkmacro(name=EM_PROPERTY_ImportModel,            value=N, global=Y);
15555 +   %em_checkmacro(name=EM_PROPERTY_ImportedTreeData,       value=, global=Y);
15556 +   %em_checkmacro(name=EM_PROPERTY_FREEZE,                 value=N, global=Y);
15557 +   %em_checkmacro(name=EM_PROPERTY_USEMULTIPLETARGET,      value=N, global=Y);
15558 +   %em_checkmacro(name=EM_PROPERTY_NOMINALCRITERION,       value=PROBCHISQ, global=Y);
15559 +   %em_checkmacro(name=EM_PROPERTY_ORDINALCRITERION,       value=ENTROPY, global=Y);
15560 +   %em_checkmacro(name=EM_PROPERTY_INTERVALCRITERION,      value=PROBF, global=Y);
15561 +   %em_checkmacro(name=EM_PROPERTY_CRITERION,              value=DEFAULT, global=Y);
15562 +   %em_checkmacro(name=EM_PROPERTY_SIGLEVEL,               value=0.2, global=Y);
15563 +   %em_checkmacro(name=EM_PROPERTY_SPLITSIZE,              value=., global=Y);
15564 +   %em_checkmacro(name=EM_PROPERTY_LEAFSIZE,               value=5, global=Y);
15565 +   %em_checkmacro(name=EM_PROPERTY_MINCATSIZE,             value=5, global=Y);
15566 +   %em_checkmacro(name=EM_PROPERTY_MAXBRANCH,              value=2, global=Y);
15567 +   %em_checkmacro(name=EM_PROPERTY_MAXDEPTH,               value=6, global=Y);
15568 +   %em_checkmacro(name=EM_PROPERTY_NRULES,                 value=5, global=Y);
15569 +   %em_checkmacro(name=EM_PROPERTY_NSURRS,                 value=0, global=Y);
15570 +   %em_checkmacro(name=EM_PROPERTY_MISSINGVALUE,           value=USEINSEARCH, global=Y);
15571 +   %em_checkmacro(name=EM_PROPERTY_USEVARONCE,             value=N, global=Y);
15572 +   %em_checkmacro(name=EM_PROPERTY_SUBTREE,                value=ASSESSMENT, global=Y);
15573 +   %em_checkmacro(name=EM_PROPERTY_NSUBTREE,               value=1, global=Y);
15574 +   %em_checkmacro(name=EM_PROPERTY_ASSESSMEASURE,          value=PROFIT/LOSS, global=Y);
15575 +   %em_checkmacro(name=EM_PROPERTY_ASSESSPERCENTAGE,       value=0.25, global=Y);
15576 +   %em_checkmacro(name=EM_PROPERTY_NODESAMPLE,             value=20000, global=Y);
15577 +   %em_checkmacro(name=EM_PROPERTY_EXHAUSTIVE,             value=5000, global=Y);
15578 +   %em_checkmacro(name=EM_PROPERTY_USEDECISION,            value=N, global=Y);
15579 +   %em_checkmacro(name=EM_PROPERTY_USEPRIORS,              value=N, global=Y);
15580 +   %em_checkmacro(name=EM_PROPERTY_KASS,                   value=Y, global=Y);
15581 +   %em_checkmacro(name=EM_PROPERTY_KASSAPPLY,              value=BEFORE, global=Y);
15582 +   %em_checkmacro(name=EM_PROPERTY_DEPTH,                  value=Y, global=Y);
15583 +   %em_checkmacro(name=EM_PROPERTY_INPUTS,                 value=N, global=Y);
15584 +   %em_checkmacro(name=EM_PROPERTY_NUMINPUTS,              value=1, global=Y);
15585 +   %em_checkmacro(name=EM_PROPERTY_DUMMY,                  value=N, global=Y);
15586 +   %em_checkmacro(name=EM_PROPERTY_LEAFID,                 value=Y, global=Y);
15587 +   %em_checkmacro(name=EM_PROPERTY_PREDICT,                value=Y, global=Y);
15588 +   %em_checkmacro(name=EM_PROPERTY_PERFORMANCE,            value=DISK, global=Y);
15589 +   %em_checkmacro(name=EM_PROPERTY_CV,                     value=N, global=Y);
15590 +   %em_checkmacro(name=EM_PROPERTY_CVNITER,                value=10, global=Y);
15591 +   %em_checkmacro(name=EM_PROPERTY_CVREPEAT,               value=1, global=Y);
15592 +   %em_checkmacro(name=EM_PROPERTY_CVSEED,                 value=12345, global=Y);
15593 +   %em_checkmacro(name=EM_PROPERTY_OBSIMPORTANCE,          value=N, global=Y);
15594 +   %em_checkmacro(name=EM_PROPERTY_NUMSINGLEIMP,           value=5, global=Y);
15596 +   /* properties for interactive sample */
15597 +   %em_checkmacro(name=EM_PROPERTY_CREATESAMPLE,           value=DEFAULT, global=Y);
15598 +   %em_checkmacro(name=EM_PROPERTY_SAMPLEMETHOD,           value=RANDOM, global=Y);
15599 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESIZE,             value=10000, global=Y);
15600 +   %em_checkmacro(name=EM_PROPERTY_SAMPLESEED,             value=12345, global=Y);
15602 +   /* report properties */
15603 +   %em_checkmacro(name=EM_PROPERTY_PRECISION,              value=4, global=Y);
15604 +   %em_checkmacro(name=EM_PROPERTY_SPLITPRECISION,         value=4, global=Y);
15605 +   %em_checkmacro(name=EM_PROPERTY_CLASSCOLORBY,           value=PERCENTEVEN, global=Y);
15606 +   %em_checkmacro(name=EM_PROPERTY_INTCOLORBY,             value=AVG, global=Y);
15607 +   %em_checkmacro(name=EM_PROPERTY_SHOWNODEID,             value=Y, global=Y);
15608 +   %em_checkmacro(name=EM_PROPERTY_SHOWVALID,              value=Y, global=Y);
15609 +   %em_checkmacro(name=EM_PROPERTY_PRED,                   value=N, global=Y);
15610 +   %em_checkmacro(name=EM_PROPERTY_TARGET,                 value=ALL, global=Y);
15611 +   %em_checkmacro(name=EM_PROPERTY_COUNT,                  value=Y, global=Y);
15612 +   %em_checkmacro(name=EM_PROPERTY_PERCENTCORRECT,         value=N, global=Y);
15613 +   %em_checkmacro(name=EM_PROPERTY_PROFITLOSS,             value=NONE, global=Y);
15614 +   %em_checkmacro(name=EM_PROPERTY_AVG,                    value=Y, global=Y);
15615 +   %em_checkmacro(name=EM_PROPERTY_RASE,                   value=N, global=Y);
15617 +   /* score properties */
15618 +   %em_checkmacro(name=EM_PROPERTY_VARSELECTION,           value=Y, global=Y);
15619 +   %em_checkmacro(name=EM_PROPERTY_NODEROLE,               value=SEGMENT, global=Y);
15621 +%mend EM_SetProperties;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_TRAINMACROS.SOURCE.
15623 +%Macro EM_CheckBinaryTargetLevel(indata=, target=,  nLevel= );
15624 +  %global &nLevel;
15625 +  proc dmdb batch data=&indata
15626 +    classout=_tmp_dmdbout;
15627 +    class &target;
15628 +  run;
15629 +  data _tmp_dmdbout;
15630 +    set _tmp_dmdbout;
15631 +    if strip(TYPE) = 'N' and  strip(LEVEL) = '.' then delete;
15632 +    if strip(TYPE) = 'C' and  strip(LEVEL) = '' then delete;
15633 +  run;
15634 +  data _null_;
15635 +    %let dsid = %sysfunc(open(work._tmp_dmdbout));
15636 +    %let _obs = %sysfunc(attrn(&dsid, NOBS));
15637 +    %let dsid = %sysfunc(close(&dsid));
15638 +     call symput("&nLevel", put(&_obs, Best12.));
15639 +  run;
15641 +  proc datasets lib=work nolist;
15642 +     delete _tmp_dmdbout;
15643 +  run;
15644 +  quit;
15645 +%Mend EM_CheckBinaryTargetLevel;
15648 +%macro em_tree_runTreeProcedure(indata= , multipleTar= , intFlag= );
15650 +  /* determine the number of obs in training data */
15651 +  proc sql;
15652 +    reset noprint;
15653 +    select count(*) into :em_nobs from &indata;
15654 +  quit;
15656 +  /* determine the number of input variables */
15657 +  %let numinputs = %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_NOMINAL_INPUT + &EM_NUM_ORDINAL_INPUT + &EM_NUM_INTERVAL_INPUT+
15658 +                         &EM_NUM_BINARY_REJECTED + &EM_NUM_NOMINAL_REJECTED + &EM_NUM_ORDINAL_REJECTED + &EM_NUM_INTERVAL_REJECTED);
15660 +  /* retrieve targetEvent from decmeta */
15661 +  %let targetEvent=;
15662 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
15663 +    %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
15664 +      data _null_;
15665 +       set &EM_DEC_DECMETA(where=(_TYPE_="TARGET"));
15666 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
15667 +      run;
15668 +    %end;
15669 +  %end;
15671 +  /* create targetTable if multipleTar eq Y */
15672 +  data temptarget;
15673 +    set &EM_DATA_VARIABLESET;
15674 +    where ROLE="TARGET" AND LEVEL^="ORDINAL";
15675 +  run;
15677 + /* data sets */
15678 + %EM_GETNAME(key=OUTSTATS,      type=DATA);
15679 + %EM_GETNAME(key=EMTREE,        type=DATA);
15680 + %EM_GETNAME(key=OUTOBSIMP,     type=DATA);
15681 + %EM_GETNAME(key=OUTSEQ,        type=DATA);
15682 + %EM_GETNAME(key=OUTIMPORT,     type=DATA);
15683 + %EM_GETNAME(key=OUTNODES,      type=DATA);
15684 + %EM_GETNAME(key=OUTSUMMARY,    type=DATA);
15685 + %EM_GETNAME(key=OUTTOPOLOGY,   type=DATA);
15686 + %EM_GETNAME(key=OUTPATH,       type=DATA);
15687 + %EM_GETNAME(key=OUTRULES,      type=DATA);
15689 + /* files */
15690 + %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
15691 + %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
15693 + /* turn on pmml if requested */
15694 + %let nnpmml=0;
15695 + %if %symexist(EM_PMML) %then %do;
15696 +    %if %upcase(&EM_PMML)=Y or %upcase(&EM_PMML)=YES %then %do;
15697 +       %let nnpmml=1;
15699 +       ods pmml file="&EM_FILE_EMPMML" encoding="UTF-8";
15700 +%end;
15702 + %let numClassTarget = %sysevalf(&EM_NUM_BINARY_TARGET + &EM_NUM_NOMINAL_TARGET + &EM_NUM_ORDINAL_TARGET);
15704 + %if &nnpmml or &numClassTarget %then %do;
15706 +       /* create dmdb needed for pmml generation */
15707 +       %let tree_maxlevel = 512;
15708 +       %if %symexist(EM_TRAIN_MAXLEVELS) %then %do;
15709 +         %if &EM_TRAIN_MAXLEVELS ne %then %do;
15710 +           %let tree_maxlevel = &EM_TRAIN_MAXLEVELS;
15711 +         %end;
15712 +       %end;
15713 +       %if &tree_maxlevel gt 0 %then %do;
15714 +           %let tree_maxlevel=%sysevalf(&tree_maxlevel+1);
15715 +          %let tree_maxlevel=%sysfunc(max(3, &tree_maxlevel ));
15716 +       %end;
15718 +       %let targetOrderString =;
15719 +       %let targetString = ;
15720 +       data _null_;
15721 +          length orderString nameString $10000;
15722 +          retain orderString nameString;
15723 +          set &em_data_variableset end=eof;
15724 +          %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" and ^&em_num_ordinal_target %then %do;
15725 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL");
15726 +          %end;
15727 +          %else %do;
15728 +              where ROLE="TARGET" and LEVEL in("BINARY", "NOMINAL", "ORDINAL") and USE ='Y';
15729 +          %end;          select(order);
15730 +            when('')        order ='DESC';
15731 +            when('FMTASC')  order='ASCFMT';
15732 +            when('FMTDESC') order='DESFMT';
15733 +            otherwise;
15734 +          end;
15735 +          orderString = trim(orderString)!!' '!!trim(NAME)!!'('!!trim(order)!!')';
15736 +          nameString = trim(nameString)!!' '!!trim(NAME);
15738 +          if eof then do;
15739 +             call symput('targetOrderString', trim(orderString));
15740 +             call symput('targetString', trim(nameString));
15741 +          end;
15742 +       run;
15744 +       %let arborkluge= "work._treeDMDB";
15746 +       proc dmdb batch data=&indata
15747 +       %if &nnpmml %then %do;
15748 +           PMML
15749 +       %end;
15750 +        dmdbcat=_treeDMDB classout=classout varout=varout maxlevel=&tree_maxlevel;
15753 +   %if &nnpmml %then %do;
15754 +        %if "%EM_ID" ne "" %then %do;
15755 +          id %EM_ID;
15756 +        %end;
15757 +        %if &EM_NUM_CLASS gt 0 %then %do;
15758 +          class %EM_BINARY_INPUT %EM_NOMINAL_INPUT %EM_ORDINAL_INPUT
15759 +               %EM_BINARY_REJECTED %EM_NOMINAL_REJECTED %EM_ORDINAL_REJECTED
15760 +               &targetOrderString;
15761 +        %end;
15762 +        %if &EM_NUM_INTERVAL gt 0 %then %do;
15763 +          var %EM_INTERVAL;
15764 +        %end;
15765 +        target &targetString %EM_INTERVAL_TARGET;
15766 +        %if "%EM_FREQ" ne "" %then %do;
15767 +          freq %EM_FREQ;
15768 +        %end;
15769 +  %end;
15770 +  %else %do;
15771 +      class  &targetOrderString;
15772 +      target &targetString %EM_INTERVAL_TARGET;
15773 +  %end;
15774 +       run;
15775 +       quit;
15777 +       proc datasets lib=work nolist;
15778 +          delete classout varout;
15779 +       run;
15780 +       quit;
15782 +    %end;
15783 + %end;
15785 + /* run Arbor procedure */
15786 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15787 +  proc arbor data=&INDATA
15789 +  %if "&EM_PROPERTY_LEAFSIZE" ne "" %then %do;
15790 +    Leafsize = &EM_PROPERTY_LEAFSIZE
15791 +  %end;
15793 +  %if (("&EM_PROPERTY_SPLITSIZE" ne ".") AND (&EM_PROPERTY_SPLITSIZE lt &em_nobs)) %then %do;
15794 +    Splitsize = &EM_PROPERTY_SPLITSIZE
15795 +  %end;
15797 +  %if "&EM_PROPERTY_MINCATSIZE" ne "" %then %do;
15798 +    MinCatSize = &EM_PROPERTY_MINCATSIZE
15799 +  %end;
15801 +  %if "&EM_PROPERTY_MAXBRANCH" ne "" %then %do;
15802 +    MaxBranch = &EM_PROPERTY_MAXBRANCH
15803 +  %end;
15805 +  %if "&EM_PROPERTY_MAXDEPTH" ne "" %then %do;
15806 +    MaxDepth = &EM_PROPERTY_MAXDEPTH
15807 +  %end;
15809 +  %if (("%EM_TARGET_LEVEL" eq "NOMINAL") OR ("%EM_TARGET_LEVEL" eq "BINARY")) %then %do;
15810 +    %let Criterion = &EM_PROPERTY_NOMINALCRITERION;
15811 +  %end;
15812 +  %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15813 +    %let Criterion = &EM_PROPERTY_ORDINALCRITERION;
15814 +  %end;
15815 +  %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15816 +    %let Criterion = &EM_PROPERTY_INTERVALCRITERION;
15817 +  %end;
15819 +  %if (("&criterion" eq "PROBCHISQ") or ("&criterion" eq "PROBF")) %then %do;
15820 +    %if "&EM_PROPERTY_SIGLEVEL" ne "" %then %do;
15821 +      alpha = &EM_PROPERTY_SIGLEVEL
15822 +    %end;
15823 +  %end;
15825 +  %if (("&EM_PROPERTY_KASS" eq "Y") OR ("&EM_PROPERTY_DEPTH" eq "Y") or ("&EM_PROPERTY_INPUTS" eq "Y")) %then %do;
15826 +    %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15827 +      %if (("&EM_PROPERTY_KASS" eq "Y") or ("&EM_PROPERTY_DEPTH" eq "Y")) %then %do;
15828 +        %if "&EM_PROPERTY_KASSAPPLY" eq "BEFORE" %then %let chaid = CHAIDBEFORE;
15829 +        %else %if "&EM_PROPERTY_KASSAPPLY" eq "AFTER" %then %let chaid = CHAIDAFTER;
15831 +        padjust =
15832 +        %if "&EM_PROPERTY_KASS" eq "Y" %then %do;
15833 +          &chaid
15834 +        %end;
15835 +        %if "&EM_PROPERTY_DEPTH" eq "Y" %then %do;
15836 +          DEPTH
15837 +        %end;
15838 +      %end;
15839 +      %if "&EM_PROPERTY_INPUTS" eq "Y" %then %do;
15840 +         %let num_inputs = %sysfunc(min(&numinputs, &EM_PROPERTY_NUMINPUTS));
15841 +         pvars = &num_inputs
15842 +      %end;
15843 +    %end;
15844 +  %end;
15845 +  %else %do;
15846 +      %if (("&Criterion" eq "PROBCHISQ") OR ("&Criterion" eq "PROBF") OR ("&Criterion" eq "DEFAULT")) %then %do;
15847 +         padjust = NONE
15848 +      %end;
15849 +  %end;
15851 +  %if "&EM_PROPERTY_NRULES" ne "" %then %do;
15852 +    %let num_nrules = %sysfunc(min(&numinputs, &EM_PROPERTY_NRULES));
15853 +    Maxrules = &num_nrules
15854 +  %end;
15856 +  %if "&EM_PROPERTY_NSURRS" ne "" %then %do;
15857 +    %let num_nsurrs = %sysfunc(min((&numinputs-1), &EM_PROPERTY_NSURRS));
15858 +    Maxsurrs = &num_nsurrs
15859 +  %end;
15861 +  %if "&EM_PROPERTY_MISSINGVALUE" ne "" %then %do;
15862 +     Missing=&EM_PROPERTY_MISSINGVALUE
15863 +  %end;
15865 +  %if "&EM_PROPERTY_USEVARONCE" eq "Y" %then %do;
15866 +     USEVARONCE
15867 +  %end;
15869 +  %if "&EM_PROPERTY_EXHAUSTIVE" ne "" %then %do;
15870 +    Exhaustive=&EM_PROPERTY_EXHAUSTIVE
15871 +  %end;
15874 +  %if (("&multipleTar" eq "N") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
15875 +    event = "&targetEvent"
15876 +  %end;
15878 +  %if "&EM_PROPERTY_USEDECISION" eq "Y" %then %do;
15879 +     DECSEARCH
15880 +  %end;
15882 +  %if "&EM_PROPERTY_USEPRIORS" eq "Y" %then %do;
15883 +     PRIORSSEARCH
15884 +  %end;
15886 +  %if &arbor_1 ne %then %do;
15887 +    &arbor_1
15888 +  %end;
15890 +  %if &em_arbor ne %then %do;
15891 +     &em_arbor
15892 +  %end;
15893 +  ;
15894 + %end;
15895 + %else %if "&EM_PROPERTY_IMPORTMODEL" eq "Y"  %then %do;
15896 +     proc arbor data=&INDATA inmodel=&EM_PROPERTY_ImportedTreeData refreshtrain;
15897 +       interact;
15898 + %end;
15899 + %else %if "&EM_PROPERTY_FREEZE" eq "Y" %then %do;
15900 +   %if %sysfunc(exist(&EM_USER_EMTREE)) ne 1 %then %do;
15901 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15902 +    %put &em_codebar;
15903 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15904 +    %put &errormsg;
15905 +    %put &em_codebar;
15906 +    %goto doendm;
15907 +   %end;
15908 +   %else %do;
15909 +     proc arbor data=&INDATA inmodel=&EM_USER_EMTREE refreshtrain;
15910 +       interact;
15911 +   %end;
15912 + %end;
15914 + %else %do;
15915 +   %if %sysfunc(exist(&EM_USER_BROWSETREE)) ne 1 %then %do;
15916 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.NOTREEDATASET;
15917 +    %put &em_codebar;
15918 +    %let errormsg = %sysfunc(sasmsg(sashelp.dmine, emtool.notreedataset_err, NOQUOTE));
15919 +    %put &errormsg;
15920 +    %put &em_codebar;
15921 +    %goto doendm;
15922 +   %end;
15923 +   %else %do;
15924 +      proc arbor data=&INDATA inmodel=&EM_USER_BROWSETREE refrestrain;
15925 +        interact;
15926 +   %end;
15927 + %end;
15929 + %if "&EM_PROPERTY_FREEZE" eq "N" and "&EM_PROPERTY_IMPORTMODEL" eq "N" %then %do;
15930 +    %if %eval(&EM_NUM_INTERVAL_INPUT + &EM_NUM_INTERVAL_REJECTED) gt 0 %then %do;
15931 +      input %EM_INTERVAL_INPUT %EM_INTERVAL_REJECTED/ level = interval;
15932 +    %end;
15934 +    %if  %eval(&EM_NUM_NOMINAL_INPUT + &EM_NUM_NOMINAL_REJECTED) gt 0 %then %do;
15935 +      input %EM_NOMINAL_INPUT %EM_NOMINAL_REJECTED / level = nominal;
15936 +    %end;
15938 +    %if %eval(&EM_NUM_BINARY_INPUT + &EM_NUM_BINARY_REJECTED) gt 0 %then %do;
15939 +      input %EM_BINARY_INPUT %EM_BINARY_REJECTED / level = nominal;
15940 +    %end;
15942 +    %if %eval(&EM_NUM_ORDINAL_INPUT + &EM_NUM_ORDINAL_REJECTED) gt 0 %then %do;
15943 +      input %EM_ORDINAL_INPUT %EM_ORDINAL_REJECTED/ level = ordinal;
15944 +    %end;
15946 +    %if "%EM_FREQ" ne "" %then %do;
15947 +       freq %EM_FREQ;
15948 +    %end;
15950 +    %if "&multipleTar" eq "Y" %then %do;
15951 +       /* cycle through all target vars in variableset */
15952 +       %let tdsid = %sysfunc(open(temptarget));
15953 +       %if &tdsid %then %do;
15954 +          %let n_var = %sysfunc(varnum(&tdsid, NAME));
15955 +          %let n_lvl = %sysfunc(varnum(&tdsid, LEVEL));
15956 +          %do %while(^ %sysfunc(fetch(&tdsid)));
15957 +             %let var = %sysfunc(getvarc(&tdsid, &n_var));
15958 +             %let lvl = %sysfunc(getvarc(&tdsid, &n_lvl));
15959 +             target &var / level = &lvl
15960 +             %if (("&lvl" eq "BINARY") or ("&lvl" eq "NOMINAL")) %then %do;
15961 +               Criterion=&EM_PROPERTY_NOMINALCRITERION;
15962 +             %end;
15963 +             %else %if "&lvl" eq "INTERVAL" %then %do;
15964 +               Criterion=&EM_PROPERTY_INTERVALCRITERION;
15965 +             %end;
15966 +             %else %if "&lvl" eq "ORDINAL" %then %do;
15967 +               Criterion=&EM_PROPERTY_ORDINALCRITERION;
15968 +             %end;
15969 +          %end;
15970 +          %if &tdsid %then %let tdsid=%sysfunc(close(&tdsid));
15971 +       %end;
15972 +       useTarget variable = %EM_TARGET;
15973 +    %end;
15974 +    %else %do;
15975 +      target %EM_TARGET / level = %EM_TARGET_LEVEL
15976 +      %if (("%EM_TARGET_LEVEL" eq "BINARY") or ("%EM_TARGET_LEVEL" eq "NOMINAL")) %then %do;
15977 +        Criterion=&EM_PROPERTY_NOMINALCRITERION;
15978 +      %end;
15979 +      %else %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
15980 +        Criterion=&EM_PROPERTY_INTERVALCRITERION;
15981 +      %end;
15982 +      %else %if "%EM_TARGET_LEVEL" eq "ORDINAL" %then %do;
15983 +        Criterion=&EM_PROPERTY_ORDINALCRITERION;
15984 +      %end;
15985 +    %end;
15987 +    %if "&multipleTar" eq "N" %then %do;
15988 +      &EM_DEC_STATEMENT;
15989 +    %end;
15991 +    Performance &EM_PROPERTY_PERFORMANCE
15992 +    %if "&EM_PROPERTY_NODESAMPLE" ne "" %then %do;
15993 +      nodesize=&EM_PROPERTY_NODESAMPLE
15994 +    %end;
15995 +    ;
15997 +    %if "&intFlag" eq "Y" %then %do;
15998 +       INTERACT Largest;
15999 +       Train maxnewdepth=0;
16000 +    %end;
16002 +       %if "&EM_PROPERTY_ASSESSMEASURE" ne "" %then %do;
16003 +         Assess
16004 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)) )) %then %do;
16005 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16006 +              %put &em_codebar;
16007 +              %let errormsg = %sysfunc(sasmsg(sashelp.dmine, novalidationwithcv_note, NOQUOTE));
16008 +              %put &errormsg;
16009 +              %put &em_codebar;
16010 +            %end;
16011 +            %else %do;
16012 +               Validata=&EM_IMPORT_VALIDATE
16013 +            %end;
16014 +         %end;
16015 +         %else %do;
16016 +           NoValidata
16017 +         %end;
16018 +         %if "&EM_PROPERTY_TRAINMODE" ne "INTERACTIVE" %then %do;
16019 +            %if "&EM_PROPERTY_ASSESSMEASURE" eq "PROFIT/LOSS" %then %do;
16020 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16021 +               %if &dsid %then %do;
16022 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16023 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16024 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16025 +                   %if "&use" eq "Y" %then %let measure=PROFIT;
16026 +                   %else %do;
16027 +                      %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %let measure = ASE;
16028 +                      %else %let measure= MISC;
16029 +                   %end;
16030 +                 %end;
16031 +               %end;
16032 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16033 +            %end;
16034 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "MISC" %then %do;
16035 +              %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then  %do;
16036 +                 %let measure=ASE;
16037 +              %end;
16038 +              %else %do;
16039 +                 %let measure=MISC;
16040 +              %end;
16041 +            %end;
16042 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "ASE" %then %do;
16043 +              %let measure=ASE;
16044 +            %end;
16045 +            %else %if "&EM_PROPERTY_ASSESSMEASURE" eq "LIFT" %then %do;
16046 +               %let measure = LIFT;
16047 +               %let dsid=%sysfunc(open(&EM_DEC_DECMETA(where=(_TYPE_='MATRIX'))));
16048 +               %if &dsid %then %do;
16049 +                 %let usenum = %sysfunc(varnum(&dsid, USE));
16050 +                 %do %while(^ %sysfunc(fetch(&dsid)));
16051 +                   %let use = %sysfunc(getvarc(&dsid, &usenum));
16052 +                   %if "&use" eq "Y" %then %let measure=LIFTPROFIT;
16053 +                 %end;
16054 +               %end;
16055 +               %if &dsid %then %let dsid = %sysfunc(close(&dsid));
16056 +            %end;
16057 +            measure=&measure
16058 +            %if (("&measure" eq "LIFT") AND ("%EM_TARGET_LEVEL" ne "INTERVAL")) %then %do;
16059 +               event = "&targetEvent"
16060 +            %end;
16061 +            %if (("&measure" eq "LIFT") OR ("&measure" eq "LIFTPROFIT")) %then %do;
16062 +              proportion=&EM_PROPERTY_ASSESSPERCENTAGE
16063 +            %end;
16064 +         %end;
16065 +         %if "&multipleTar" eq "N" %then %do;
16066 +            %if "&EM_PROPERTY_CV" eq "Y" %then %do;
16067 +               CV
16068 +               %if "&EM_PROPERTY_CVNIter" ne "" %then %do;
16069 +                 CVNITer = &EM_PROPERTY_CVNITER
16070 +               %end;
16071 +               %if "&EM_PROPERTY_CVREPEAT" ne "" %then %do;
16072 +                 CVRepeat = &EM_PROPERTY_CVREPEAT
16073 +               %end;
16074 +               %if "&EM_PROPERTY_CVSEED" ne "" %then %do;
16075 +                 CVSeed = &EM_PROPERTY_CVSEED
16076 +               %end;
16077 +            %end;
16078 +         %end;
16079 +       %end;
16080 +      ;
16082 +      %if "&intFlag" ne "Y" %then %do;
16083 +        %if "&EM_PROPERTY_SUBTREE" ne "" %then %do;
16084 +          %if "&EM_PROPERTY_SUBTREE" eq "ASSESSMENT" %then %let subtree=BEST;
16085 +          %else %if "&EM_PROPERTY_SUBTREE" eq "N" %then %let subtree=NLEAVES;
16086 +          %else %if "&EM_PROPERTY_SUBTREE" eq "LARGEST" %then %let subtree=LARGEST;
16088 +          SUBTREE &subtree
16089 +          %if "&subtree" eq "NLEAVES" %then %do;
16090 +            =&EM_PROPERTY_NSUBTREE
16091 +          %end;
16092 +          ;
16093 +        %end;
16095 +       %if (("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ("&multipleTar" eq "N")) %then %do;
16096 +          %if "&EM_USER_OUTOBSIMP" ne "" %then %do;
16097 +            importance data=&INDATA outfit=&EM_USER_OUTOBSIMP nvars=&EM_PROPERTY_NUMSINGLEIMP;
16098 +          %end;
16099 +       %end;
16100 +      %end;
16101 + %end;
16104 + MakeMacro nleaves = nleaves;
16105 + save
16106 + %if "&EM_USER_EMTREE" ne "" %then %do;
16107 +   MODEL=&EM_USER_EMTREE
16108 + %end;
16109 + %if "&EM_USER_OUTSEQ" ne "" %then %do;
16110 +   SEQUENCE=&EM_USER_OUTSEQ
16111 + %end;
16112 + %if "&EM_USER_OUTIMPORT" ne "" %then %do;
16113 +   IMPORTANCE=&EM_USER_OUTIMPORT
16114 + %end;
16115 + %if "&EM_USER_OUTNODES" ne "" %then %do;
16116 +   NODESTAT=&EM_USER_OUTNODES
16117 + %end;
16118 + %if "&EM_USER_OUTSUMMARY" ne "" %then %do;
16119 +   SUMMARY=&EM_USER_OUTSUMMARY
16120 + %end;
16121 + %if "&EM_USER_OUTSTATS" ne "" %then %do;
16122 +   STATSBYNODE=&EM_USER_OUTSTATS
16123 + %end;
16124 + %if "&EM_USER_OUTTOPOLOGY" ne "" %then %do;
16125 +   TOPOLOGY=&EM_USER_OUTTOPOLOGY
16126 + %end;
16127 + %if "&EM_USER_OUTPATH" ne "" %then %do;
16128 +   Pathlistnonmissing=&EM_USER_OUTPATH
16129 + %end;
16130 + %if "&EM_USER_OUTRULES" ne "" %then %do;
16131 +   RULES = &EM_USER_OUTRULES
16132 + %end;
16133 + ;
16135 + %if "&intFlag" ne "Y" %then %do;
16137 +   %let lookupString = ;
16138 +   %if ^%symexist(EM_OPTION) %then
16139 +      %let EM_OPTION=;
16141 +   %if %sysfunc(index(%upcase(&EM_DEBUG), I18N)) or %sysfunc(index(%upcase(&EM_OPTION), I18N)) %then %do;
16142 +      %let lookupString = LOOKUP=SELECT;
16143 +   %end;
16145 +   %let codetext=;
16146 +   %let norescodetxt=;
16148 +   %if "&EM_PROPERTY_DUMMY" eq "Y" %then %do;
16149 +     %let codetext=&codetext DUMMY;
16150 +     %let norescodetxt=&norescodetxt DUMMY;
16151 +   %end;
16152 +   %if "&EM_PROPERTY_LEAFID" ne "Y" %then %do;
16153 +     %let codetext=&codetext NOLEAFID;
16154 +     %let norescodetxt=&norescodetxt NOLEAFID;
16155 +   %end;
16156 +   %if "&EM_PROPERTY_PREDICT" ne "Y" %then %do;
16157 +     %let norescodetxt=&norescodetxt NOPRED;
16158 +   %end;
16160 +   code file="&EM_USER_TREEFLOW" res &codetext group=&emloopid &lookupString;
16161 +   code file="&EM_USER_TREEPUBLISH" nores &norescodetxt group=&emloopid &lookupString;
16163 +   %if &nnpmml %then %do;
16164 +     code pmml;
16165 +   %end;
16167 +   score data=&INDATA out=_NULL_ outfit=work.fit_train role=TRAIN;
16168 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16169 +     score data=&EM_IMPORT_VALIDATE out=_NULL_ outfit=work.fit_valid role=VALID;
16170 +   %end;
16171 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16172 +     score data=&EM_IMPORT_TEST out=_NULL_ outfit=work.fit_test role=TEST;
16173 +   %end;
16174 + %end;
16176 + run;
16177 + quit;
16179 + /*%em_checkerror(); */
16180 +  %if %sysfunc(cexist(work._treeDMDB)) %then %do;
16181 +   /* Delete DMDB catalog */
16182 +   proc datasets lib=work nolist;
16183 +       delete _treeDMDB / mt=cat;
16184 +  run;
16185 +  %end;
16187 + %if &nnpmml %then %do;
16188 +    ods pmml close;
16189 + %end;
16191 +  %doendm:
16193 +%mend em_tree_runTreeProcedure;
16195 +%macro em_tree_createFitStats( multipleTar= );
16198 +  /* create targetTable is multipleTar eq Y */
16199 +  data temptarget;
16200 +    set &EM_DATA_VARIABLESET;
16201 +    where ROLE="TARGET";
16202 +  run;
16204 +  %EM_GETNAME(key=EMOUTFIT, type=DATA);
16205 +   data &EM_USER_EMOUTFIT;
16206 +     length target $32;
16207 +     merge work.fit_train
16208 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16209 +       work.fit_valid
16210 +     %end;
16211 +     %if "&EM_IMPORT_TEST" ne "" %then %do;
16212 +       work.fit_test
16213 +     %end;
16214 +     ;
16215 +     %if "&multipleTar" eq "N" %then %do;
16216 +       target="%EM_TARGET";
16217 +     %end;
16218 +     %else %do;
16219 +       target = _TARGET_;
16220 +     %end;
16221 +     drop _NW_ _SUMW_
16222 +     %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16223 +        _VSUMW_
16224 +     %end;
16225 +     ;
16226 +   run;
16228 +   %if "&EM_IMPORT_VALIDATE" ne "" %then %do;
16229 +     proc datasets library=work nolist;
16230 +       delete fit_valid;
16231 +     run;
16232 +   %end;
16233 +   %if "&EM_IMPORT_TEST" ne "" %then %do;
16234 +     proc datasets library=work nolist;
16235 +       delete fit_test;
16236 +     run;
16237 +   %end;
16239 +%mend em_tree_createFitStats;
16242 +%macro em_tree_makeEnglishRules;
16244 +  %EM_GETNAME(key=OUTNODES, type=DATA);
16245 +  %EM_GETNAME(key=OUTPATH, type=DATA);
16247 +  /* verify that necessary tables exist and if not, skip processing */
16248 +  %if %sysfunc(exist(&EM_USER_OUTNODES)) ne 1 %then %do;
16249 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16250 +    %goto doendm;
16251 +  %end;
16252 +  %if %sysfunc(exist(&EM_USER_OUTPATH)) ne 1 %then %do;
16253 +    %let EMEXCEPTIONSTRING = exception.server.EMTOOL.GENERICRUNTIMEEXCEPTION;
16254 +    %goto doendm;
16255 +  %end;
16257 +  /* determine length of variable in outpath dataset */
16258 +  %let vlength= ;
16259 +  %let dsid = %sysfunc(open(&EM_USER_OUTPATH));
16260 +  %if &dsid ne %then %do;
16261 +    %let varnum = %sysfunc(varnum(&dsid, VARIABLE));
16262 +    %let vlength = %sysfunc(VARLEN(&dsid, &varnum));
16263 +  %end;
16264 +  %if &dsid ne %then %let dsid = %sysfunc(close(&dsid));
16266 +  data tempoutpath;
16267 +    length varname $&vlength;
16268 +    retain varname;
16269 +    set &EM_USER_OUTPATH;
16271 +    if ^missing(variable) then varname=variable;
16272 +    else if ^missing(var_name) then varname=var_name;
16273 +    output;
16274 +  run;
16276 +  /* create an array of generated predicted variable names */
16277 +  %let tree_pred_vars = ;
16278 +  %let tree_pred_label = ;
16279 +  %let numpred= 0;
16280 +  %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16282 +    data _null_;
16283 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16284 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16285 +     call symput('tree_pred_label'!!strip(put(_N_, BEST.)), strip(tranwrd(LABEL,'"','""')));
16286 +     if eof then
16287 +       call symput('numpred', strip(put(_N_, BEST.)));
16288 +    run;
16289 +  %end;
16291 +  /* determine if NPRIORS exists in outnodes  */
16292 +  %local nprior_flag;
16293 +  data _null_;
16294 +    set &EM_USER_OUTNODES(obs=2) end=eof;
16295 +    if eof then do;
16296 +      call symput('nprior_flag', strip(put(npriors, best.)));
16297 +    end;
16298 +  run;
16300 +  proc sort data=tempoutpath; by node; run;
16301 +  proc sort data=&EM_USER_OUTNODES out=outnodes; by node; run;
16303 +  data tempoutpath;
16304 +    merge tempoutpath(in=_a) outnodes(keep= node
16305 +    %if "&nprior_flag" ne "." %then %do;
16306 +      NPRIORS
16307 +    %end;
16308 +    %else %do;
16309 +      N
16310 +    %end;
16311 +    %if &numpred gt 0 %then %do;
16312 +      %do i=1 %to &numpred;
16313 +        &&tree_pred_vars&i
16314 +      %end;
16315 +    %end;
16316 +    );
16317 +    by node;
16318 +    if _a;
16319 +  run;
16321 +  proc sort data=tempoutpath; by node descending varname descending numeric_value; run;
16323 +  data _null_;
16324 +    file x;
16325 +    set tempoutpath;
16326 +    by node descending varname;
16327 +    retain origvar oldnode string;
16328 +    length origvar $32 oldnode 8 string $200;
16330 +    if _N_ = 1 then do;
16331 +      origvar = varname;
16332 +      oldnode = node;
16333 +    end;
16335 +    if first.node then do;
16336 +       put "&EM_CODEBAR";
16337 +       put " Node = " node;
16338 +       put "&EM_CODEBAR";
16339 +    end;
16341 +      if first.varname then do;
16342 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16343 +            if MISSING(CHARACTER_VALUE) then do;
16344 +             if NUMERIC_VALUE ne .  then do;
16345 +              if ^first.node then do;
16346 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16347 +              end;
16348 +              else do;
16349 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16350 +              end;
16351 +             end;
16352 +            end;
16353 +            else do;
16354 +              if ^first.node then do;
16355 +                string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16356 +              end;
16357 +              else do;
16358 +                string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16359 +              end;
16360 +             end;
16361 +         end;
16362 +         else if RELATION in ("=") then do;
16363 +            if ^first.node then do;
16364 +              string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
16365 +            end;
16366 +            else do;
16367 +              string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
16368 +            end;
16369 +         end;
16370 +         else if RELATION in ("ISMISSING") then do;
16371 +            if ^first.node then do;
16372 +              string = " AND "|| strip(varname) || " equals Missing";
16373 +            end;
16374 +            else do;
16375 +              string = "if "|| strip(varname) ||" equals Missing";
16376 +            end;
16377 +         end;
16378 +         else if RELATION in ("ISNOTMISSING") then do;
16379 +            if ^first.node then do;
16380 +              string = " AND "|| strip(varname) || " equals All Values";
16381 +            end;
16382 +            else do;
16383 +              string = "if "|| strip(varname) ||" equals All Values";
16384 +            end;
16385 +         end;
16386 +         if ^missing(varname) then origvar = varname;
16387 +         oldnode=node;
16389 +      end;
16390 +      else do;
16391 +         if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
16392 +          if MISSING(CHARACTER_VALUE) then do;
16393 +           if  NUMERIC_VALUE ne .  then do;
16394 +            if ^MISSING(string) then
16395 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16396 +            else
16397 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
16398 +           end;
16399 +          end;
16400 +          else do;
16401 +            if ^MISSING(string) then
16402 +              string= strip(string)||" AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16403 +            else
16404 +              string= " if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
16405 +          end;
16407 +         end;
16408 +         else if RELATION in ("=") then do;
16409 +           string = strip(string)||", "||strip(character_value);
16410 +         end;
16411 +         else if RELATION in ("ISMISSING") then do;
16413 +         end;
16414 +         if ^missing(varname) then origvar = varname;
16415 +         oldnode=node;
16416 +      end;
16417 +      if last.varname then do;
16418 +         if RELATION in ("ISMISSING") then do;
16419 +           if ^first.varname then do;
16420 +             string = strip(string) || " or MISSING";
16421 +           end;
16422 +         end;
16423 +         put string;
16424 +         if ^missing(varname) then origvar = varname;
16425 +         oldnode=node;
16426 +      end;
16428 +      if last.node then do;
16429 +         put "then ";
16430 +         put " Tree Node Identifier   = " node;
16432 +         %if "&nprior_flag" ne "." %then %do;
16433 +           put " Number of Observations = " NPRIORS;
16434 +         %end;
16435 +         %else %do;
16436 +           put " Number of Observations = " N;
16437 +         %end;
16439 +         %if &numpred gt 0 %then %do;
16440 +           %do i=1 %to &numpred;
16441 +             put " &&tree_pred_label&i = " &&tree_pred_vars&i;
16442 +           %end;
16443 +         %end;
16445 +         put " ";
16446 +         if ^missing(varname) then origvar = varname;
16447 +         oldnode=node;
16448 +      end;
16450 +  run;
16452 +  proc datasets lib=work nolist;
16453 +    delete tempoutpath outnodes;
16454 +  run;
16456 +  %doendm:
16457 +%mend em_tree_makeEnglishRules;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The data set WORK.EM_USER_KEY has 1 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: DATA STEP view saved on file EMWS1.EM_TREE2.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
NOTE: There were 108 observations read from the data set EMWS1.PART_TRAIN.
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.07 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL');
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: 1601202 kilobytes of physical memory.
NOTE: Will use 108 out of 108 training cases.
NOTE: Using memory pool with 54597632 bytes.
NOTE: Passed training data 7 times.
NOTE: Training used 36760 bytes of work memory.
NOTE: The subtree sequence contains 4 subtrees. The largest has 7 nodes and 4 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Using subtree with 7 nodes and 4 leaves.
NOTE: Created macro variable NLEAVES equal to 4.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 9 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_EMTREE has 327 observations and 4 variables.
NOTE: The data set EMWS1.TREE2_OUTNODES has 7 observations and 16 variables.
NOTE: The data set EMWS1.TREE2_OUTPATH has 23 observations and 7 variables.
NOTE: The data set EMWS1.TREE2_OUTRULES has 71 observations and 6 variables.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 4 observations and 18 variables.
NOTE: The data set EMWS1.TREE2_OUTSTATS has 42 observations and 4 variables.
NOTE: The data set EMWS1.TREE2_OUTSUMMARY has 10 observations and 3 variables.
NOTE: The data set EMWS1.TREE2_OUTTOPOLOGY has 7 observations and 5 variables.
NOTE: External file C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree2\TREEFLOW.sas opened.
NOTE: External file C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree2\TREEPUBLISH.sas opened.
NOTE: The data set WORK.FIT_TRAIN has 1 observations and 9 variables.
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
NOTE: There were 108 observations read from the data set EMWS1.PART_TRAIN.
NOTE: The data set WORK.FIT_VALID has 1 observations and 7 variables.
NOTE: The data set WORK.FIT_TEST has 1 observations and 7 variables.
 
 
NOTE: View EMWS1.EM_TREE2.VIEW used (Total process time):
      real time           0.16 seconds
      cpu time            0.00 seconds
 
NOTE: There were 108 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 108 observations read from the data set EMWS1.EM_TREE2.
NOTE: The data set WORK._NAMEDAT has 1 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.18 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE ROLE='TARGET';
NOTE: The data set WORK.TEMPTARGET has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.FIT_TRAIN.
NOTE: There were 1 observations read from the data set WORK.FIT_VALID.
NOTE: There were 1 observations read from the data set WORK.FIT_TEST.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_VALID (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.FIT_TEST (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set EMWS1.TREE2_OUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_CHURN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable npriors is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.OUTNODES has 7 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: There were 7 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 10 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: The data set WORK.TEMPOUTPATH has 23 observations and 10 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      212:176   222:190   368:191   375:195
NOTE: The file X is:
      Filename=C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree2\ENGLISHRULES.txt,
      RECFM=V,LRECL=131068,File Size (bytes)=0,
      Last Modified=07Jan2024:15:50:39,
      Create Time=07Jan2024:15:50:39
 
NOTE: 41 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 62.
NOTE: There were 23 observations read from the data set WORK.TEMPOUTPATH.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Deleting WORK.TEMPOUTPATH (memtype=DATA).
NOTE: Deleting WORK.OUTNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref X has been deassigned.
16459
16460  *------------------------------------------------------------*;
16461  * End TRAIN: Tree2;
16462  *------------------------------------------------------------*;
 
16463  *------------------------------------------------------------*;
16464  * Close any missing semi colons;
16465  *------------------------------------------------------------*;
16466  ;
16467  ;
16468  ;
16469  ;
16470  quit;
16471  *------------------------------------------------------------*;
16472  * Close any unbalanced quotes;
16473  *------------------------------------------------------------*;
16474  /*; *"; *'; */
16475  ;
16476  run;
16477  quit;
16478  /* Reset EM Options */
16479  options formchar="|----|+|---+=|-/\<>*";
16480  options nocenter ls=256 ps=10000;
16481  goptions reset=all device=GIF NODISPLAY;
 
16482  proc sort data=WORK.EM_USER_REPORT;
16483  by ID VIEW;
16484  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
*------------------------------------------------------------*
* Score Log
Date:                January 07, 2024
Time:                15:50:40
*------------------------------------------------------------*
16586  %let EMEXCEPTIONSTRING=;
16587  *------------------------------------------------------------*;
16588  * SCORE: Tree2;
16589  *------------------------------------------------------------*;
16590  %let EM_ACTION = SCORE;
16591  %let syscc = 0;
16592  %macro main;
16593
16594    %if %upcase(&EM_ACTION) = CREATE %then %do;
16595      filename temp catalog 'sashelp.emmodl.tree_create.source';
16596      %include temp;
16597      filename temp;
16598
16599      %em_tree_create;
16600    %end;
16601
16602     %else
16603     %if %upcase(&EM_ACTION) = TRAIN %then %do;
16604
16605         filename temp catalog 'sashelp.emmodl.tree_train.source';
16606         %include temp;
16607         filename temp;
16608         %em_tree_train;
16609     %end;
16610
16611    %else
16612    %if %upcase(&EM_ACTION) = SCORE %then %do;
16613      filename temp catalog 'sashelp.emmodl.tree_score.source';
16614      %include temp;
16615      filename temp;
16616
16617      %em_tree_score;
16618
16619    %end;
16620
16621    %else
16622    %if %upcase(&EM_ACTION) = REPORT %then %do;
16623
16624         filename temp catalog 'sashelp.emmodl.tree_report.source';
16625         %include temp;
16626         filename temp;
16627
16628         %em_tree_report;
16629     %end;
16630
16631    %else
16632    %if %upcase(&EM_ACTION) = OPENINT %then %do;
16633
16634         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16635         %include temp;
16636         filename temp;
16637         %EM_TREE_OPENTREEVIEWER;
16638
16639     %end;
16640
16641    %else
16642    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
16643
16644         filename temp catalog 'sashelp.emmodl.tree_actions.source';
16645         %include temp;
16646         filename temp;
16647         %EM_TREE_CLOSETREEVIEWER;
16648
16649     %end;
16650
16651
16652     %doendm:
16653  %mend main;
16654
16655  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_SCORE.SOURCE.
16657 +%macro em_tree_score;
16659 +   /* determine if multiple targets will be processed */
16660 +   %let em_tree_multipleTargets=N;
16661 +   %let em_tree_numTarget=1;
16662 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16663 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16664 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16665 +         %let em_tree_multipleTargets=N;
16666 +      %end;
16667 +      %else %do;
16668 +         /* create macro array of targets  */
16669 +         data _null_;
16670 +           set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16671 +           call symput('em_tree_targetVars'!!strip(put(_N_, BEST.)), strip(Name));
16672 +           if eof then
16673 +             call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16674 +        run;
16676 +        %if &em_tree_numTarget gt 1 %then %do;
16677 +           %let em_tree_multipleTargets=Y;
16678 +        %end;
16679 +      %end;
16680 +   %end;
16682 +   /* build flow and publish scoring code */
16683 +   %EM_GETNAME(key=TREEFLOW, type=FILE, extension=sas);
16684 +   %EM_GETNAME(key=TREEPUBLISH, type=FILE, extension=sas);
16686 +   filename treeflow "&EM_USER_TREEFLOW";
16687 +   filename treepub "&EM_USER_TREEPUBLISH";
16689 +   filename flowref  "&EM_FILE_EMFLOWSCORECODE";
16690 +   filename pubref   "&EM_FILE_EMPUBLISHSCORECODE";
16692 +   %em_copyfile(infref=treeflow, outfref=flowref);
16693 +   %em_copyfile(infref=treepub, outfref=pubref);
16695 +   filename treeflow;
16696 +   filename treepub;
16698 +   /* if priors are used, add code to generate unadjusted residuals in export */
16699 +   %let useAdjPriors = N;
16700 +   data _null_;
16701 +     set &EM_DEC_DECMETA(where=(_TYPE_="DECPRIOR"));
16702 +     if USE="Y" then call symput('useAdjPriors', 'Y');
16703 +   run;
16704 +   %if (("&em_tree_multipleTargets" eq "N") AND ("&useAdjPriors" eq "Y")) %then %do;
16705 +      filename temp catalog 'sashelp.emutil.em_makeunadjustedresidualvars.source';
16706 +      %include temp;
16707 +      filename temp;
16709 +      %EM_GETNAME(key=adjResidualCode, type=FILE, extension=sas);
16710 +      filename adjref "&EM_USER_adjResidualCode";
16711 +      %makeUnadjustedResidualVars(target=%EM_TARGET, decmeta=&EM_DEC_DECMETA, fref=adjref);
16713 +      %em_copyfile(infref=adjref, outfref=flowref, append=Y);
16715 +      filename adjref;
16716 +   %end;
16718 +   /* LEAF */
16719 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16720 +      data _null_;
16721 +        file flowref mod;
16722 +        put 'drop _LEAF_;';
16723 +      run;
16725 +      data _null_;
16726 +        file pubref mod;
16727 +        put 'drop _LEAF_;';
16728 +      run;
16730 +   %end;
16732 +   filename flowref;
16733 +   filename pubref;
16735 +   /* em_metachange code */
16736 +   %if "&EM_PROPERTY_LEAFID" eq "Y" %then %do;
16737 +     %EM_METACHANGE(name=_NODE_, role=&EM_PROPERTY_NODEROLE, LEVEL=NOMINAL);
16738 +   %end;
16740 +   /* variable selection based on importance stat    */
16741 +   %if "&EM_PROPERTY_VARSELECTION" eq "Y" %then %do;
16742 +     %EM_GETNAME(key=OUTIMPORT, type=DATA);
16743 +     %let dsid = %sysfunc(open(&EM_USER_OUTIMPORT(where=(IMPORTANCE<0.05))));
16744 +     %let varnum = %sysfunc(varnum(&dsid, NAME));
16745 +     %let obs = %sysfunc(fetch(&dsid));
16746 +     %do %while(&obs=0);
16747 +       %let temp = %nrbquote(%sysfunc(getvarc(&dsid, &varnum)));
16748 +       %let varname = %nrbquote(%sysfunc(tranwrd(&temp,  %str(%"),"")));
16749 +       %EM_METACHANGE(name=&varname, role=REJECTED);
16750 +       %let obs = %sysfunc(fetch(&dsid));
16751 +     %end;
16752 +     %if &dsid %then %let dsid=%sysfunc(close(&dsid));
16753 +   %end;
16755 +   /* set Q_ varaibles to role of ASSESS when in the presense of prior probabilities */
16756 +   %if %sysfunc(exist(&EM_DEC_DECMETA)) %then %do;
16757 +    %let tree_pred_vars = ;
16758 +    %let tree_pred_lvl =;
16759 +    %let numpred= 0;
16761 +    data _null_;
16762 +     set &EM_DEC_DECMETA(where=(_TYPE_="PREDICTED")) end=eof;
16763 +     call symput('tree_pred_vars'!!strip(put(_N_, BEST.)), strip(VARIABLE));
16764 +     call symput('tree_pred_lvl'!!strip(put(_N_, BEST.)), strip(LEVEL));
16765 +     if eof then
16766 +       call symput('numpred', strip(put(_N_, BEST.)));
16767 +    run;
16768 +   %end;
16770 +   %if &numpred ne 0 %then %do;
16771 +    %do i=1 %to &numpred;
16772 +      %let qpred = Q%substr(&&tree_pred_vars&i,2);
16773 +      %EM_METACHANGE(name=&qpred, role=ASSESS);
16774 +    %end;
16775 +   %end;
16777 +   /* determine if multiple targets will be processed */
16778 +   %let em_tree_multipleTargets=N;
16779 +   %let em_tree_numTarget=1;
16780 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
16781 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
16782 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
16783 +         %let em_tree_multipleTargets=N;
16784 +      %end;
16785 +      %else %do;
16786 +        data _null_;
16787 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
16788 +          if eof then
16789 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
16790 +        run;
16792 +        %if &em_tree_numTarget gt 1 %then %do;
16793 +           %let em_tree_multipleTargets=Y;
16794 +        %end;
16795 +     %end;
16796 +   %end;
16798 +   /* need to include this code to do the %em_report for OUTIMPORT here instead of in Report code so _loop data set is created when group processing */
16799 +   %if "&em_tree_multipleTargets" eq "N" %then %do;
16801 +      /* variable importance */
16802 +      %EM_GETNAME(key=OUTIMPORT, type=DATA);
16803 +      %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
16805 +         %let validexist=0;
16806 +         %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
16807 +           %let validexist=1;
16808 +         %end;
16810 +         /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
16811 +         /* and the columns may not be generated                                                                                 */
16812 +         %let em_tree_cvexists=;
16813 +         %let em_tree_surrexists=.;
16814 +         data _null_;
16815 +            set &EM_USER_OUTIMPORT (obs=2) end=eof;
16816 +            if eof then do ;
16817 +               call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
16818 +               call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
16819 +            end;
16820 +         run;
16822 +         data &EM_USER_OUTIMPORT;
16823 +            set &EM_USER_OUTIMPORT;
16825 +            /* format columns based on Precison value specified */
16826 +            format importance 15.&EM_PROPERTY_PRECISION
16827 +                 %if &validexist %then %do;
16828 +                   vimportance ratio 15.&EM_PROPERTY_PRECISION
16829 +                 %end;
16830 +                 %if "&EM_TREE_CVEXISTS" ne "." %then %do;
16831 +                   cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
16832 +                 %end;
16833 +            ;
16834 +            label  NAME       = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))"
16835 +                 LABEL        = "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))"
16836 +                 NRULES       = "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))"
16837 +                 IMPORTANCE   = "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))"
16838 +                 %if "&em_tree_surrexists" ne "" %then %do;
16839 +                   NSURROGATES  = "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
16840 +                 %end;
16841 +                 %if &validexist %then %do;
16842 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16843 +                   RATIO       = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16844 +                 %end;
16845 +                 %if "&EM_TREE_CVEXISTS" ne "" %then %do;
16846 +                   VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
16847 +                   CVIMPORTANCE =  "%sysfunc(sasmsg(sashelp.dmine, rpt_cvimport_vlabel, noquote))"
16848 +                   CVRULES= "%sysfunc(sasmsg(sashelp.dmine, rpt_cvrules_vlabel, noquote))"
16849 +                   RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
16850 +                 %end;
16851 +            ;
16852 +         run;
16854 +         %EM_REPORT(key=OUTIMPORT, viewtype=DATA, block=MODEL, description=IMPORTANCE, autodisplay=N);
16855 +      %end;
16856 +   %end;
16858 +   %doendm:
16859 +%mend em_tree_score;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=07Jan2024:15:50:39,
      Create Time=07Jan2024:15:50:39
 
NOTE: 58 records were written to the file FLOWREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=20000,File Size (bytes)=0,
      Last Modified=07Jan2024:15:50:39,
      Create Time=07Jan2024:15:50:39
 
NOTE: 53 records were written to the file PUBREF.
      The minimum record length was 1.
      The maximum record length was 65.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref TREEFLOW has been deassigned.
NOTE: Fileref TREEPUB has been deassigned.
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_CHURN_DM.
      WHERE _TYPE_='DECPRIOR';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file FLOWREF is:
      Filename=C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=1909,
      Last Modified=07Jan2024:15:50:39,
      Create Time=07Jan2024:15:50:39
 
NOTE: 1 record was written to the file FLOWREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file PUBREF is:
      Filename=C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree2\EMPUBLISHSCORE.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=1757,
      Last Modified=07Jan2024:15:50:39,
      Create Time=07Jan2024:15:50:39
 
NOTE: 1 record was written to the file PUBREF.
      The minimum record length was 12.
      The maximum record length was 12.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: Fileref FLOWREF has been deassigned.
NOTE: Fileref PUBREF has been deassigned.
 
NOTE: The data set WORK.EM_METACHANGE has 1 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 2 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 3 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 4 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 5 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 5 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 6 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 7 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_CHURN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: Variable CVIMPORTANCE is uninitialized.
NOTE: Variable CVRULES is uninitialized.
NOTE: There were 9 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
16860
16861  *------------------------------------------------------------*;
16862  * End SCORE: Tree2;
16863  *------------------------------------------------------------*;
 
16864  proc sort data=WORK.EM_METACHANGE;
16865  by key uname;
16866  run;
 
NOTE: There were 8 observations read from the data set WORK.EM_METACHANGE.
NOTE: The data set WORK.EM_METACHANGE has 8 observations and 9 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16867  filename x "C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas";
16868  data _null_;
16869  file x;
16870  put 'if upcase(NAME) = "FAVORITECATEGORY" then do;';
16871  put 'ROLE = "REJECTED";';
16872  put 'end;';
16873  put 'else ';
16874  put 'if upcase(NAME) = "GENDER" then do;';
16875  put 'ROLE = "REJECTED";';
16876  put 'end;';
16877  put 'else ';
16878  put 'if upcase(NAME) = "LOCATION" then do;';
16879  put 'ROLE = "REJECTED";';
16880  put 'end;';
16881  put 'else ';
16882  put 'if upcase(NAME) = "MEMBERSHIPLEVEL" then do;';
16883  put 'ROLE = "REJECTED";';
16884  put 'end;';
16885  put 'else ';
16886  put 'if upcase(NAME) = "OCCUPTATION" then do;';
16887  put 'ROLE = "REJECTED";';
16888  put 'end;';
16889  put 'else ';
16890  put 'if upcase(NAME) = "Q_CHURN" then do;';
16891  put 'ROLE = "ASSESS";';
16892  put 'end;';
16893  put 'else ';
16894  put 'if upcase(NAME) = "WEBSITEVISITSPERMONTH" then do;';
16895  put 'ROLE = "REJECTED";';
16896  put 'end;';
16897  put 'else ';
16898  put 'if upcase(NAME) = "_NODE_" then do;';
16899  put 'ROLE = "SEGMENT";';
16900  put 'LEVEL = "NOMINAL";';
16901  put 'end;';
16902  run;
 
NOTE: The file X is:
      Filename=C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree2\CDELTA_TRAIN.sas,
      RECFM=V,LRECL=32767,File Size (bytes)=0,
      Last Modified=07Jan2024:15:50:39,
      Create Time=07Jan2024:15:49:36
 
NOTE: 32 records were written to the file X.
      The minimum record length was 4.
      The maximum record length was 50.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16903  filename x;
NOTE: Fileref X has been deassigned.
 
16904  filename emflow "C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
16905  *------------------------------------------------------------*;
16906  * Tree2: Scoring DATA data;
16907  *------------------------------------------------------------*;
16908  data EMWS1.Tree2_TRAIN
16909  / view=EMWS1.Tree2_TRAIN
16910  ;
16911  set EMWS1.Part_TRAIN
16912  ;
16913  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
16914 +****************************************************************;
16915 +******             DECISION TREE SCORING CODE             ******;
16916 +****************************************************************;
16917 +
16918 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16919 +LENGTH _WARN_  $    4;
16920 +
16921 +******              LABELS FOR NEW VARIABLES              ******;
16922 +label _NODE_ = 'Node' ;
16923 +label _LEAF_ = 'Leaf' ;
16924 +label P_Churn = 'Predicted: Churn' ;
16925 +label V_Churn = 'Validated: Churn' ;
16926 +label R_Churn = 'Residual: Churn' ;
16927 +label _WARN_ = 'Warnings' ;
16928 +
16929 +
16930 +
16931 +******             ASSIGN OBSERVATION TO NODE             ******;
16932 +IF  NOT MISSING(TotalPurchases ) AND
16933 +  TotalPurchases  <                 14.5 THEN DO;
16934 +  _NODE_  =                    2;
16935 +  _LEAF_  =                    1;
16936 +  P_Churn  =                    1;
16937 +  V_Churn  =                    1;
16938 +  END;
16939 +ELSE DO;
16940 +  IF  NOT MISSING(Age ) AND
16941 +    Age  <                 37.5 THEN DO;
16942 +    IF  NOT MISSING(TotalSpent ) AND
16943 +                    2350.6 <= TotalSpent  THEN DO;
16944 +      _NODE_  =                    7;
16945 +      _LEAF_  =                    3;
16946 +      P_Churn  =     0.66666666666666;
16947 +      V_Churn  =                    1;
16948 +      END;
16949 +    ELSE DO;
16950 +      _NODE_  =                    6;
16951 +      _LEAF_  =                    2;
16952 +      P_Churn  =                 0.04;
16953 +      V_Churn  =  2.3140940118987E-18;
16954 +      END;
16955 +    END;
16956 +  ELSE DO;
16957 +    _NODE_  =                    5;
16958 +    _LEAF_  =                    4;
16959 +    P_Churn  =                    0;
16960 +    V_Churn  =                    0;
16961 +    END;
16962 +  END;
16963 +
16964 +*****  RESIDUALS R_ *************;
16965 +IF MISSING( Churn ) THEN R_Churn  = .;
16966 +ELSE R_Churn  = Churn  - P_Churn ;
16967 +
16968 +****************************************************************;
16969 +******          END OF DECISION TREE SCORING CODE         ******;
16970 +****************************************************************;
16971 +
16972 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
16973  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
16974  quit;
16975  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
16976  filename emflow "C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
16977  *------------------------------------------------------------*;
16978  * Tree2: Scoring VALIDATE data;
16979  *------------------------------------------------------------*;
16980  data EMWS1.Tree2_VALIDATE
16981  / view=EMWS1.Tree2_VALIDATE
16982  ;
16983  set EMWS1.Part_VALIDATE
16984  ;
16985  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
16986 +****************************************************************;
16987 +******             DECISION TREE SCORING CODE             ******;
16988 +****************************************************************;
16989 +
16990 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
16991 +LENGTH _WARN_  $    4;
16992 +
16993 +******              LABELS FOR NEW VARIABLES              ******;
16994 +label _NODE_ = 'Node' ;
16995 +label _LEAF_ = 'Leaf' ;
16996 +label P_Churn = 'Predicted: Churn' ;
16997 +label V_Churn = 'Validated: Churn' ;
16998 +label R_Churn = 'Residual: Churn' ;
16999 +label _WARN_ = 'Warnings' ;
17000 +
17001 +
17002 +
17003 +******             ASSIGN OBSERVATION TO NODE             ******;
17004 +IF  NOT MISSING(TotalPurchases ) AND
17005 +  TotalPurchases  <                 14.5 THEN DO;
17006 +  _NODE_  =                    2;
17007 +  _LEAF_  =                    1;
17008 +  P_Churn  =                    1;
17009 +  V_Churn  =                    1;
17010 +  END;
17011 +ELSE DO;
17012 +  IF  NOT MISSING(Age ) AND
17013 +    Age  <                 37.5 THEN DO;
17014 +    IF  NOT MISSING(TotalSpent ) AND
17015 +                    2350.6 <= TotalSpent  THEN DO;
17016 +      _NODE_  =                    7;
17017 +      _LEAF_  =                    3;
17018 +      P_Churn  =     0.66666666666666;
17019 +      V_Churn  =                    1;
17020 +      END;
17021 +    ELSE DO;
17022 +      _NODE_  =                    6;
17023 +      _LEAF_  =                    2;
17024 +      P_Churn  =                 0.04;
17025 +      V_Churn  =  2.3140940118987E-18;
17026 +      END;
17027 +    END;
17028 +  ELSE DO;
17029 +    _NODE_  =                    5;
17030 +    _LEAF_  =                    4;
17031 +    P_Churn  =                    0;
17032 +    V_Churn  =                    0;
17033 +    END;
17034 +  END;
17035 +
17036 +*****  RESIDUALS R_ *************;
17037 +IF MISSING( Churn ) THEN R_Churn  = .;
17038 +ELSE R_Churn  = Churn  - P_Churn ;
17039 +
17040 +****************************************************************;
17041 +******          END OF DECISION TREE SCORING CODE         ******;
17042 +****************************************************************;
17043 +
17044 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17045  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17046  quit;
17047  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
17048  filename emflow "C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas";
17049  *------------------------------------------------------------*;
17050  * Tree2: Scoring TEST data;
17051  *------------------------------------------------------------*;
17052  data EMWS1.Tree2_TEST
17053  / view=EMWS1.Tree2_TEST
17054  ;
17055  set EMWS1.Part_TEST
17056  ;
17057  %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file C:\Users\Tsu\Desktop\DM Revision\AA1_Tsu Hiao Ping\Workspaces\EMWS1\Tree2\EMFLOWSCORE.sas.
17058 +****************************************************************;
17059 +******             DECISION TREE SCORING CODE             ******;
17060 +****************************************************************;
17061 +
17062 +******         LENGTHS OF NEW CHARACTER VARIABLES         ******;
17063 +LENGTH _WARN_  $    4;
17064 +
17065 +******              LABELS FOR NEW VARIABLES              ******;
17066 +label _NODE_ = 'Node' ;
17067 +label _LEAF_ = 'Leaf' ;
17068 +label P_Churn = 'Predicted: Churn' ;
17069 +label V_Churn = 'Validated: Churn' ;
17070 +label R_Churn = 'Residual: Churn' ;
17071 +label _WARN_ = 'Warnings' ;
17072 +
17073 +
17074 +
17075 +******             ASSIGN OBSERVATION TO NODE             ******;
17076 +IF  NOT MISSING(TotalPurchases ) AND
17077 +  TotalPurchases  <                 14.5 THEN DO;
17078 +  _NODE_  =                    2;
17079 +  _LEAF_  =                    1;
17080 +  P_Churn  =                    1;
17081 +  V_Churn  =                    1;
17082 +  END;
17083 +ELSE DO;
17084 +  IF  NOT MISSING(Age ) AND
17085 +    Age  <                 37.5 THEN DO;
17086 +    IF  NOT MISSING(TotalSpent ) AND
17087 +                    2350.6 <= TotalSpent  THEN DO;
17088 +      _NODE_  =                    7;
17089 +      _LEAF_  =                    3;
17090 +      P_Churn  =     0.66666666666666;
17091 +      V_Churn  =                    1;
17092 +      END;
17093 +    ELSE DO;
17094 +      _NODE_  =                    6;
17095 +      _LEAF_  =                    2;
17096 +      P_Churn  =                 0.04;
17097 +      V_Churn  =  2.3140940118987E-18;
17098 +      END;
17099 +    END;
17100 +  ELSE DO;
17101 +    _NODE_  =                    5;
17102 +    _LEAF_  =                    4;
17103 +    P_Churn  =                    0;
17104 +    V_Churn  =                    0;
17105 +    END;
17106 +  END;
17107 +
17108 +*****  RESIDUALS R_ *************;
17109 +IF MISSING( Churn ) THEN R_Churn  = .;
17110 +ELSE R_Churn  = Churn  - P_Churn ;
17111 +
17112 +****************************************************************;
17113 +******          END OF DECISION TREE SCORING CODE         ******;
17114 +****************************************************************;
17115 +
17116 +drop _LEAF_;
NOTE: %INCLUDE (level 1) ending.
17117  run;
 
NOTE: DATA STEP view saved on file EMWS1.TREE2_TEST.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17118  quit;
17119  filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
17121  proc sort data=WORK.EM_USER_REPORT;
17122  by ID VIEW;
17123  run;
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17124  *------------------------------------------------------------*;
17125  * Tree2: Computing metadata for TRAIN data;
17126  *------------------------------------------------------------*;
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
17503  data EMWS1.Tree2_EMINFO;
17504  length TARGET KEY $32 DATA $43;
17505  input TARGET KEY DATA $;
17506  cards;
 
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17510  run;
17511  proc sort data = EMWS1.Tree2_EMINFO NOTHREADS;
17512  by TARGET KEY;
17513  run;
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_EMINFO.
NOTE: The data set EMWS1.TREE2_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
NOTE: View EMWS1.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
NOTE: View EMWS1.TREE2_TEST.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
*------------------------------------------------------------*
* Report Log
Date:                January 07, 2024
Time:                15:50:40
*------------------------------------------------------------*
17537  data EMWS1.Tree2_EMOUTFIT;
17538  set EMWS1.Tree2_EMOUTFIT;
17539  length TargetLabel $200;
17540  label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))";
17541  run;
 
NOTE: Variable TargetLabel is uninitialized.
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMOUTFIT.
NOTE: The data set EMWS1.TREE2_EMOUTFIT has 1 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17542  proc sort data=EMWS1.Tree2_EMREPORTFIT nothreads;
17543  by TARGET;
17544  run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE2_EMREPORTFIT.
NOTE: The data set EMWS1.TREE2_EMREPORTFIT has 7 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17545  %let _EMwarndup = 0;
17546  %let _EMtargetdup =;
17547  %let _EMASEtargetdup =;
17548  data _null_;
17549  set EMWS1.Tree2_EMOUTFIT;
17550  if .<_ASE_<0.000001 then do;
17551  call symput('_EMwarndup', '1');
17552  call symput('_EMtargetdup', target);
17553  call symput('_EMASEtargetdup', put(_ASE_, best.));
17554  end;
17555  run;
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
17556  %let EMEXCEPTIONSTRING=;
17557  *------------------------------------------------------------*;
17558  * REPORT: Tree2;
17559  *------------------------------------------------------------*;
17560  %let EM_ACTION = REPORT;
17561  %let syscc = 0;
17562  %macro main;
17563
17564    %if %upcase(&EM_ACTION) = CREATE %then %do;
17565      filename temp catalog 'sashelp.emmodl.tree_create.source';
17566      %include temp;
17567      filename temp;
17568
17569      %em_tree_create;
17570    %end;
17571
17572     %else
17573     %if %upcase(&EM_ACTION) = TRAIN %then %do;
17574
17575         filename temp catalog 'sashelp.emmodl.tree_train.source';
17576         %include temp;
17577         filename temp;
17578         %em_tree_train;
17579     %end;
17580
17581    %else
17582    %if %upcase(&EM_ACTION) = SCORE %then %do;
17583      filename temp catalog 'sashelp.emmodl.tree_score.source';
17584      %include temp;
17585      filename temp;
17586
17587      %em_tree_score;
17588
17589    %end;
17590
17591    %else
17592    %if %upcase(&EM_ACTION) = REPORT %then %do;
17593
17594         filename temp catalog 'sashelp.emmodl.tree_report.source';
17595         %include temp;
17596         filename temp;
17597
17598         %em_tree_report;
17599     %end;
17600
17601    %else
17602    %if %upcase(&EM_ACTION) = OPENINT %then %do;
17603
17604         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17605         %include temp;
17606         filename temp;
17607         %EM_TREE_OPENTREEVIEWER;
17608
17609     %end;
17610
17611    %else
17612    %if %upcase(&EM_ACTION) = CLOSEINT %then %do;
17613
17614         filename temp catalog 'sashelp.emmodl.tree_actions.source';
17615         %include temp;
17616         filename temp;
17617         %EM_TREE_CLOSETREEVIEWER;
17618
17619     %end;
17620
17621
17622     %doendm:
17623  %mend main;
17624
17625  %main;
NOTE: %INCLUDE (level 1) file TEMP is file SASHELP.EMMODL.TREE_REPORT.SOURCE.
17627 +%macro em_tree_makePlotDs( multipleTar= );
17629 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
17630 +  %EM_GETNAME(key=OUTNODES, type=DATA);
17631 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
17632 +  %EM_GETNAME(key=OUTRULES, type=DATA);
17634 +  /* determine if validation statistics will be displayed */
17635 +  %let validflag=N;
17636 +  %if "&EM_PROPERTY_SHOWVALID" eq "Y" %then %do;
17637 +    /* determine if validation data exists */
17638 +    %if &validexist AND ("&EM_PROPERTY_CV" ne "Y") %then %do;
17639 +      %let validflag=Y;
17640 +    %end;
17641 +  %end;
17643 +   /* retrieve name of decmeta even in presence of multiple targets */
17644 +   %let decmeta = ;
17645 +   %if &EM_DEC_DECMETA eq %then %do;
17646 +     data _Target;
17647 +       set &em_data_variableset;
17648 +       where ROLE='TARGET' and USE in('D', 'Y');
17649 +       keep NAME;
17650 +     run;
17651 +     proc sort data=_Target;
17652 +       by NAME;
17653 +     run;
17654 +     proc sort data=EM_TARGETDECINFO;
17655 +       by TARGET;
17656 +     run;
17657 +     data _Target;
17658 +       merge _Target(in=_a) EM_TARGETDECINFO(rename=(TARGET=NAME) );
17659 +       by NAME;
17660 +       if _a then do;
17661 +         call symput('decmeta', trim(DECMETA));
17662 +       end;
17663 +     run;
17664 +     proc delete data=_Target;run;
17665 +   %end;
17666 +   %else %let decmeta = &EM_DEC_DECMETA;
17669 +  /* retrieve targetEvent from decmeta */
17670 +  %let targetEvent=;
17671 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
17672 +    %if %sysfunc(exist(&DECMETA)) %then %do;
17673 +      data _null_;
17674 +       set &DECMETA(where=(_TYPE_="TARGET"));
17675 +       call symput('targetEvent', strip(tranwrd(EVENT,'"','""')));
17676 +      run;
17677 +    %end;
17678 +  %end;
17680 +  /* retrieve predicted var for targetEvent from decmeta */
17681 +  %let predTarget=;
17682 +  %let predLvl=;
17683 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
17684 +    %if %sysfunc(exist(&DECMETA)) %then %do;
17685 +      data _null_;
17686 +       set &DECMETA(where=(_TYPE_="PREDICTED" AND LEVEL="&targetEvent"));
17687 +       call symput('predTarget', strip(VARIABLE));
17688 +       call symput('predLvl', strip(LEVEL));
17689 +      run;
17690 +    %end;
17691 +  %end;
17692 +  %else %do;
17693 +    %if %sysfunc(exist(&DECMETA)) %then %do;
17694 +      data _null_;
17695 +       set &DECMETA(where=(_TYPE_="PREDICTED"));
17696 +       call symput('predTarget', strip(VARIABLE));
17697 +      run;
17698 +    %end;
17699 +  %end;
17701 +  /* create BelowText value */
17702 +  data belowtext;
17703 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="VARIABLE") rename=(character_value=belowtext));
17704 +    keep node belowtext;
17705 +  run;
17707 +  /* relace belowtext with variable label if it exists */
17708 +  data belowtext2;
17709 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT="LABEL") rename=(character_value=belowtextlbl));
17710 +    keep node belowtextlbl;
17711 +  run;
17713 +  proc sort data=belowtext; by node; run;
17714 +  proc sort data=belowtext2; by node; run;
17716 +  data belowtext;
17717 +    merge belowtext belowtext2(in=_a);
17718 +    by node;
17719 +    if _a then belowtext=belowtextlbl;
17720 +    keep node belowtext;
17721 +  run;
17723 +  /* create AboveText value */
17724 +  data abovetext;
17725 +    set &EM_USER_OUTRULES(where=(ROLE="PRIMARY" AND STAT in ("INTERVAL", "ORDINAL", "NOMINAL")) );
17726 +  run;
17727 +  proc sort data=abovetext; by node numeric_value; run;
17729 +  %let sp_precision = %sysevalf(1 / 10**&EM_PROPERTY_SPLITPRECISION);
17730 +  data abovetext;
17731 +    set abovetext(rename=(node=parent));
17732 +    by parent numeric_value;
17733 +    retain abovetext tempstring flag branch origval origchar ;
17734 +    length abovetext $256;
17735 +    length tempstring origchar $64;
17737 +    if STAT in ("INTERVAL", "ORDINAL") then do;
17738 +      if first.parent then do;
17739 +        if missing(character_value) then do;
17740 +          numeric_value = round(numeric_value, &sp_precision);
17741 +          abovetext = "< "||strip(NUMERIC_VALUE);
17742 +          branch = 1;
17743 +          origval = numeric_value;
17744 +          output;
17745 +        end;
17746 +        else do;
17747 +          abovetext = "< "||strip(CHARACTER_VALUE);
17748 +          branch = 1;
17749 +          origchar = character_value;
17750 +          output;
17751 +        end;
17753 +        if first.parent AND last.parent then do;
17754 +          if missing(character_value) then do;
17755 +            numeric_value = round(numeric_value, &sp_precision);
17756 +            branch = branch + 1;
17757 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17758 +            output;
17759 +          end;
17760 +          else do;
17761 +            branch = branch + 1;
17762 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17763 +            output;
17764 +          end;
17765 +        end;
17766 +      end;
17767 +      else if last.parent then do;
17768 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
17769 +          if missing(character_value) then do;
17770 +            numeric_value = round(numeric_value, &sp_precision);
17771 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
17772 +          end;
17773 +          else do;
17774 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
17775 +          end;
17776 +          branch = branch + 1;
17777 +          output;
17779 +          if missing(character_value) then do;
17780 +            numeric_value = round(numeric_value, &sp_precision);
17781 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17782 +          end;
17783 +          else do;
17784 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17785 +          end;
17786 +          branch = branch + 1;
17787 +          output;
17788 +        end;
17789 +        else do;
17790 +          if missing(character_value) then do;
17791 +            numeric_value = round(numeric_value, &sp_precision);
17792 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17793 +          end;
17794 +          else do;
17795 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17796 +          end;
17797 +          branch = branch + 1;
17798 +          output;
17799 +        end;
17800 +      end;
17801 +      else do;
17802 +        if ( missing(character_value) AND (origval ne numeric_value)) or ( ^missing(character_value) AND (origchar ne character_value)) then do;
17803 +          if missing(character_value) then do;
17804 +            numeric_value = round(numeric_value,&sp_precision);
17805 +            abovetext= "[ "||strip(origval)||", "|| strip(numeric_value)||" )";
17806 +            origval = numeric_value;
17807 +          end;
17808 +          else do;
17809 +            abovetext= ">= "||strip(origchar)||" AND < "|| strip(character_value);
17810 +            origchar = character_value;
17811 +          end;
17812 +          branch = branch + 1;
17813 +          output;
17815 +        end;
17816 +        else do;
17817 +          if missing(character_value) then do;
17818 +            numeric_value = round(numeric_value, &sp_precision);
17819 +            abovetext = ">= "||strip(NUMERIC_VALUE);
17820 +            origval = numeric_value;
17821 +          end;
17822 +          else do;
17823 +            abovetext = ">= "||strip(CHARACTER_VALUE);
17824 +            origval = character_value;
17825 +          end;
17826 +          branch = branch + 1;
17827 +          output;
17828 +        end;
17829 +      end;
17830 +    end;
17831 +    else do;
17832 +       if first.numeric_value then do;
17833 +         flag = 0;
17834 +         abovetext = strip(CHARACTER_VALUE);
17835 +         branch = numeric_value;
17836 +         if first.numeric_value AND last.numeric_value then do;
17837 +           output;
17838 +         end;
17839 +       end;
17840 +       else if last.numeric_value then do;
17841 +         if flag=0 then do;
17842 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
17843 +           length = length(strip(tempstring));
17844 +           if length < 32 then do;
17845 +             abovetext = strip(tempstring);
17846 +           end;
17847 +           else do;
17848 +             abovetext = strip(abovetext)||", ...";
17849 +             flag = 1;
17850 +           end;
17851 +         end;
17852 +         branch = numeric_value;
17853 +         output;
17854 +       end;
17855 +       else do;
17856 +         if flag=0 then do;
17857 +           tempstring = strip(abovetext)||", "||strip(CHARACTER_VALUE);
17858 +           length = length(strip(tempstring));
17859 +           if length < 32 then do;
17860 +             abovetext = strip(tempstring);
17861 +           end;
17862 +           else do;
17863 +             abovetext = strip(abovetext)||", ...";
17864 +             flag=1;
17865 +           end;
17866 +         end;
17867 +         branch = numeric_value;
17868 +       end;
17869 +    end;
17870 +    keep parent branch abovetext;
17871 +  run;
17873 +  /* MIssing value to abovetext */
17874 +  data tempmissing;
17875 +    set &EM_USER_OUTRULES;
17876 +    if ((ROLE="PRIMARY") AND (STAT in ("MISSING")));
17877 +    rename node=parent numeric_value=branch character_value=misschar;
17878 +  run;
17881 +  proc sort data=abovetext; by parent branch; run;
17882 +  proc sort data=tempmissing; by parent branch; run;
17883 +  proc sort data=&EM_USER_OUTNODES out=tempoutnodes; by parent branch; run;
17885 +  data tempoutnodes;
17886 +    merge abovetext tempoutNodes(drop=abovetext) tempmissing(in=_a);
17887 +    by parent branch;
17888 +    length traintotal validtotal 8;
17889 +    retain traintotal validtotal;
17891 +    if _a then do;
17892 +      if ^MISSING(abovetext) then do;
17893 +        abovetext= strip(abovetext)||" %sysfunc(sasmsg(sashelp.dmine, tree_ormiss_vlabel, noquote))";
17894 +      end;
17895 +      else do;
17896 +        abovetext = " %sysfunc(sasmsg(sashelp.dmine, tree_missonly_vlabel, noquote))";
17897 +      end;
17898 +    end;
17899 +    if MISSING(abovetext) then abovetext="%sysfunc(sasmsg(sashelp.dmine, tree_nonmiss_vlabel, noquote))";
17901 +    if node=1 then do;
17902 +      traintotal = N;
17903 +      validtotal=VN;
17904 +    end;
17906 +    drop role rank stat misschar belowtext;
17907 +  run;
17908 +  proc sort data=tempoutnodes; by node; run;
17909 +  proc sort data=belowtext; by node; run;
17911 +  data tempoutnodes;
17912 +    merge tempoutnodes belowtext;
17913 +    by node;
17915 +  run;
17917 +  /* determine if adjusted counts exists; if so, use these vs true counts */
17918 +  %let adjusted = N;
17919 +  %let npriors = 0;
17920 +  data _null_ ;
17921 +    set &EM_USER_outstats(where=(STATNAME="NPRIORS")) end=eof ;
17922 +    if eof then do ;
17923 +      call symput("npriors" , strip(put(_N_,best.))) ;
17924 +    end;
17925 +  run;
17926 +  %if &npriors gt 0 %then %let adjusted=Y;
17929 +  /* create a table with targetUsed and targetLevel columns for each node */
17930 +  data temptarmeta;
17931 +    set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL'
17932 +    %if &multipleTar eq N %then %do;
17933 +      AND USE in ('D', 'Y')
17934 +    %end;
17935 +    ));
17936 +    length TARGET $32;
17937 +    Target=name;
17938 +    keep target level;
17939 +  run;
17941 +  %if &multipleTar eq Y %then %do;
17942 +    data temptargetused;
17943 +      set &EM_USER_OUTSTATS(where=(STATNAME="TARGET"));
17944 +      keep node target;
17945 +    run;
17946 +    proc sort data=temptargetused; by target; run;
17947 +    proc sort data=temptarmeta; by target; run;
17948 +    data temptargetused;
17949 +      merge temptargetused(in=_a) temptarmeta(in=_b rename=(level=tarlevel));
17950 +      by target;
17951 +      if _a and _b;
17952 +    run;
17953 +  %end;
17954 +  %else %do;
17955 +    data temptargetused;
17956 +      set &EM_USER_OUTSTATS;
17957 +      length target $32 tarlevel $10;
17958 +      target="%EM_TARGET";
17959 +      tarlevel="%EM_TARGET_LEVEL";
17960 +      keep node target tarlevel;
17961 +    run;
17962 +    proc sort data=temptargetused nodupkey; by node; run;
17963 +  %end;
17965 +  /* merge this infomration back into outstats, keeping only stats for the target used in the tree */
17966 +  proc sort data=&EM_USER_OUTSTATS out=tempoutstats; by node; run;
17967 +  proc sort data=temptargetused; by node; run;
17970 +  /* create tables for all interval targets as well as all class targets */
17971 +  data tempinterval tempclass;
17972 +    merge tempoutstats temptargetused( rename=(target=targetused));
17973 +    by node;
17974 +    %if "&multipleTar" eq "Y" %then %do;
17975 +      if ((missing(Target)) OR (target=targetused ));
17976 +    %end;
17978 +    if tarlevel="INTERVAL" then output tempinterval;
17979 +    else output tempclass;
17980 +  run;
17982 +  /* iniitalize intTarget and classTarget flags */
17983 +  %let em_intNobs =0;
17984 +  %let em_classNobs = 0;
17985 +  %let em_intTarget= N;
17986 +  %let em_classTarget= N;
17988 +  proc sql;
17989 +    reset noprint;
17990 +    select count(*) into :em_intNobs from tempinterval;
17991 +  quit;
17992 +  proc sql;
17993 +    reset noprint;
17994 +    select count(*) into :em_classNobs from tempclass;
17995 +  quit;
17997 +  %if &em_intNobs gt 0 %then %let em_intTarget=Y;
17998 +  %if &em_classNobs gt 0 %then %let em_classTarget=Y;
18000 +  /* retrieve all information for interval targets */
18001 +  %if &em_intTarget eq Y %then %do;
18003 +    /* determine if leaf variable exists */
18004 +    %let dsid=%sysfunc(open(tempinterval,i));
18005 +    %let leafexists=%sysfunc(varnum(&dsid,LEAF));
18006 +    %let rc=%sysfunc(close(&dsid));
18008 +    proc transpose data=tempinterval
18009 +      %if &leafexists %then %do;
18010 +        (drop=leaf)
18011 +      %end;
18012 +      %if &validexist %then %do;
18013 +       out=tempinterval(keep=NODE N VALID: N PREDICTION VALID: PREDICTION RASE VALID: RASE rename=(VALID__N=VN VALID__PREDICTION=VPREDICTION VALID__RASE=VRASE)) ;
18014 +      %end;
18015 +      %else %do;
18016 +         out=tempinterval(keep=NODE N PREDICTION RASE ) ;
18017 +      %end;
18018 +      by node;
18019 +      id statname;
18020 +    run;
18021 +    data tempinterval;
18022 +      set tempinterval;
18023 +      if missing(N) then delete;
18024 +    run;
18025 +  %end;
18027 +  /* retrieve all information for class targets */
18028 +  %if &em_classTarget eq Y %then %do;
18029 +    proc sort data=tempclass; by node category; run;
18030 +    %if &validflag eq N %then %do;
18031 +      data tempn(keep=NODE STATVALUE) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET )
18032 +           tempprofit(KEEP=NODE STATVALUE CATEGORY  ) temploss(KEEP=NODE STATVALUE CATEGORY  );
18033 +    %end;
18034 +    %else %do;
18035 +     data tempn(keep=NODE STATVALUE STATNAME) temppredict(Keep=NODE CATEGORY) tempprob(keep=NODE STATVALUE CATEGORY TARGET ) tempvprob(keep=NODE STATVALUE CATEGORY TARGET )
18036 +          tempprofit(KEEP=NODE STATVALUE STATNAME CATEGORY ) temploss(KEEP=NODE STATVALUE STATNAME CATEGORY );
18037 +    %end;
18038 +      set tempclass;
18040 +      %if &validflag eq N %then %do;
18041 +        %if "&adjusted" eq "N" %then %do;
18042 +          if statname="N" then output tempn;
18043 +        %end;
18044 +        %else %do;
18045 +          if statname="NPRIORS" then output tempn;
18046 +        %end;
18047 +        else if statname="PREDICTION" then output temppredict;
18048 +        else if statname="PROBABILITY" then output tempprob;
18049 +        else if statname="ALTERNATIVE PROFIT" then output tempprofit;
18050 +        else if statname="ALTERNATIVE LOSS" then output temploss;
18051 +      %end;
18052 +      %else %do;
18053 +        %if "&adjusted" eq "N" %then %do;
18054 +          if ((statname="N") OR (statname="VALID: N")) then output tempn;
18055 +        %end;
18056 +        %else %do;
18057 +          if ((statname="NPRIORS") or (statname="VALID: NPRIORS") ) then output tempn;
18058 +        %end;
18059 +        else if statname="PREDICTION" then output temppredict;
18060 +        else if statname="PROBABILITY" then output tempprob;
18061 +        else if statname="VALID: PROBABILITY" then output tempvprob;
18062 +        else if ((statname="ALTERNATIVE PROFIT") or (statname="VALID: ALTERNATIVE PROFIT")) then output tempprofit;
18063 +        else if ((statname="ALTERNATIVE LOSS") OR (statname="VALID: ALTERNATIVE LOSS")) then output temploss;
18064 +      %end;
18065 +    run;
18068 +    /* determine if profit/loss exists in tempprofit */
18069 +    %let em_profitflag=0;
18070 +    %let em_lossflag=0;
18071 +    proc sql;
18072 +      reset noprint;
18073 +      select count(*) into :em_profitflag from tempprofit;
18074 +    quit;
18075 +    proc sql;
18076 +      reset noprint;
18077 +      select count(*) into :em_lossflag from temploss;
18078 +    quit;
18080 +    %if &validFlag eq Y %then %do;
18081 +      proc transpose data=tempn
18082 +        %if "&adjusted" eq "N" %then %do;
18083 +           out=tempn(keep=node N VALID__N rename=(VALID__N=VN));
18084 +        %end;
18085 +        %else %do;
18086 +           out=tempn(keep=node NPRIORS VALID__NPRIORS rename=( VALID__NPRIORS=VNPRIORS));
18087 +        %end;
18088 +        by node;
18089 +        id statname;
18090 +      run;
18091 +      %if &em_profitflag ne 0 %then %do;
18092 +        proc transpose data=tempprofit out=tempprofit;
18093 +          by node category;
18094 +          id statname ;
18095 +        run;
18096 +      %end;
18097 +      %if &em_lossflag ne 0 %then %do;
18098 +        proc transpose data=temploss out=temploss;
18099 +          by node category;
18100 +          id statname ;
18101 +        run;
18102 +      %end;
18103 +      data tempprob;
18104 +        merge tempprob tempvprob(rename=(statvalue=vstatvalue));
18105 +        by node
18106 +        %if &multipleTar eq Y %then %do;
18107 +          target
18108 +        %end;
18109 +        category;
18110 +      run;
18111 +    %end;
18113 +    /* store percentcorrect value */
18114 +    data temppredict;
18115 +      merge tempprob temppredict(in=_a);
18116 +      by node category;
18117 +      if _a then do;
18118 +        percentCorrect = statvalue;
18119 +        %if &validFlag eq Y %then %do;
18120 +          vpercentCorrect= vstatvalue;
18121 +        %end;
18122 +      end;
18123 +      label percentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_percentcorrect_vlabel, noquote))"
18124 +      %if &validFlag eq Y %then %do;
18125 +         vpercentCorrect="%sysfunc(sasmsg(sashelp.dmine, rpt_vpercentcorrect_vlabel, noquote))"
18126 +      %end;
18127 +      ;
18128 +      if missing(percentCorrect) then delete;
18129 +      drop target;
18130 +    run;
18132 +    /* build profittext */
18133 +    %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18134 +      data tempprofittext(keep= node profittext profitloss);
18135 +        length profittext $800 profitloss 8.;
18136 +        retain profittext profitloss;
18138 +        merge tempprob
18139 +        %if &em_profitflag ne 0 %then %do;
18140 +          tempprofit
18141 +        %end;
18142 +        %else %if &em_lossflag ne 0 %then %do;
18143 +          temploss
18144 +        %end;
18145 +        ;
18146 +        by node category;
18148 +        /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18149 +        %let profittype = &EM_PROPERTY_PROFITLOSS;
18150 +        %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_PROFITLOSS" eq "EVENT"))  %then %do;
18151 +          %let profittype = ALL;
18152 +        %end;
18154 +        /* create the profitloss variable for nodecolor if selected */
18155 +        label profitloss="%sysfunc(sasmsg(sashelp.dmine, rpt_profitloss_vlabel, noquote))";
18157 +        %if "&profittype" eq "ALL" %then %do;
18158 +          if strip(CATEGORY)="&targetEvent" then do;
18159 +            profitloss=statvalue;
18160 +          end;
18161 +          if first.node then do;
18162 +            %if &validFlag eq N %then %do;
18163 +             %if &em_profitflag ne 0 %then %do;
18164 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18165 +             %end;
18166 +             %if &em_lossflag ne 0 %then %do;
18167 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18168 +             %end;
18169 +            %end;
18170 +            %else %do;
18171 +             %if &em_profitflag ne 0 %then %do;
18172 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18172!+;
18173 +             %end;
18174 +             %if &em_lossflag ne 0 %then %do;
18175 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18176 +             %end;
18177 +            %end;
18178 +          end;
18179 +          else if last.node then do;
18180 +            %if &validFlag eq N %then %do;
18181 +             %if &em_profitflag ne 0 %then %do;
18182 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18183 +             %end;
18184 +             %if &em_lossflag ne 0 %then %do;
18185 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18186 +             %end;
18187 +             /*if CATEGORY="&targetEvent" then do;
18188 +               profitloss=statvalue;
18189 +             end;*/
18190 +            %end;
18191 +            %else %do;
18192 +             %if &em_profitflag ne 0 %then %do;
18193 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18193!+14.&EM_PROPERTY_SPLITPRECISION);
18194 +                if CATEGORY="&targetEvent" then do;
18195 +                 profitloss=ALTERNATIVE_PROFIT;
18196 +                end;
18197 +             %end;
18198 +             %if &em_lossflag ne 0 %then %do;
18199 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18199!+14.&EM_PROPERTY_SPLITPRECISION);
18200 +                if CATEGORY="&targetEvent" then do;
18201 +                  profitloss=ALTERNATIVE_LOSS;
18202 +                end;
18203 +             %end;
18204 +            %end;
18205 +            output;
18206 +          end;
18207 +          else do;
18208 +            %if &validFlag eq N %then %do;
18209 +             %if &em_profitflag ne 0 %then %do;
18210 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18211 +             %end;
18212 +             %if &em_lossflag ne 0 %then %do;
18213 +                 profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18214 +             %end;
18215 +            %end;
18216 +            %else %do;
18217 +             %if &em_profitflag ne 0 %then %do;
18218 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT,
18218!+14.&EM_PROPERTY_SPLITPRECISION);
18219 +             %end;
18220 +             %if &em_lossflag ne 0 %then %do;
18221 +                profittext=strip(profittext)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS,
18221!+14.&EM_PROPERTY_SPLITPRECISION);
18222 +             %end;
18223 +            %end;
18224 +          end;
18225 +        %end;
18226 +        %else %if (("&profittype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18227 +          if strip(CATEGORY) = "&targetevent" then do;
18228 +            %if &validFlag eq N %then %do;
18229 +             %if &em_profitflag ne 0 %then %do;
18230 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18231 +             %end;
18232 +             %if &em_lossflag ne 0 %then %do;
18233 +                 profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(STATVALUE, 14.&EM_PROPERTY_SPLITPRECISION);
18234 +             %end;
18235 +             profitloss=statvalue;
18236 +            %end;
18237 +            %else %do;
18238 +             %if &em_profitflag ne 0 %then %do;
18239 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_profit_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_PROFIT, 14.&EM_PROPERTY_SPLITPRECISION)
18239!+;
18240 +                profitloss=ALTERNATIVE_PROFIT;
18241 +             %end;
18242 +             %if &em_lossflag ne 0 %then %do;
18243 +                profittext="%sysfunc(sasmsg(sashelp.dmine, rpt_loss_vlabel, noquote )): "||strip(CATEGORY)||": "||"09"x||put(ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VALID__ALTERNATIVE_LOSS, 14.&EM_PROPERTY_SPLITPRECISION);
18244 +                profitloss=ALTERNATIVE_LOSS;
18245 +             %end;
18246 +            %end;
18247 +            output;
18248 +          end;
18249 +        %end;
18250 +        %else %if (("&profittype" eq "NONE") AND ("&targetEvent" ne "" )) %then %do;
18251 +          if strip(CATEGORY) = "&targetevent" then do;
18252 +            %if &validFlag eq N %then %do;
18253 +             profitloss=statvalue;
18254 +            %end;
18255 +            %else %do;
18256 +             %if &em_profitflag ne 0 %then %do;
18257 +                profitloss=ALTERNATIVE_PROFIT;
18258 +             %end;
18259 +             %if &em_lossflag ne 0 %then %do;
18260 +                profitloss=ALTERNATIVE_LOSS;
18261 +             %end;
18262 +            %end;
18263 +            output;
18264 +          end;
18265 +        %end;
18266 +      run;
18267 +    %end;
18269 +    data tempprob(keep= node probtext);
18270 +      length probtext $800;
18271 +      retain probtext;
18272 +      set tempprob ;
18273 +      by node;
18275 +      /* EVENT ONLY IS NOT AVAILALBE FOR MULTIPLE TARGETS AS ONLY PRIMARY TARGET IS IN EM_TARGETDECINFO TO RETRIEVE EVENT LEVEL */
18276 +      %let probtype = &EM_PROPERTY_TARGET;
18277 +      %if ((&multipleTar eq Y) AND ("&EM_PROPERTY_TARGET" eq "EVENT"))  %then %do;
18278 +        %let probtype = ALL;
18279 +      %end;
18281 +      %if "&probtype" eq "ALL" %then %do;
18282 +        if first.node then do;
18283 +          %if &validFlag eq N %then %do;
18284 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18285 +          %end;
18286 +          %else %do;
18287 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18288 +          %end;
18289 +        end;
18290 +        else if last.node then do;
18291 +          %if &validFlag eq N %then %do;
18292 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18293 +          %end;
18294 +          %else %do;
18295 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18296 +          %end;
18297 +          output;
18298 +        end;
18299 +        else do;
18300 +          %if &validFlag eq N %then %do;
18301 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18302 +          %end;
18303 +          %else %do;
18304 +            probtext=strip(probtext)||"0A"x||strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18305 +          %end;
18306 +        end;
18307 +      %end;
18308 +      %else %if (("&probtype" eq "EVENT") AND ("&targetEvent" ne "" )) %then %do;
18309 +        if strip(CATEGORY) = "&targetevent" then do;
18310 +          %if &validFlag eq N %then %do;
18311 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2);
18312 +          %end;
18313 +          %else %do;
18314 +            probtext=strip(CATEGORY)||": "||"09"x||put(statvalue, percent10.2)||"09"x||put(vstatvalue, percent10.2);
18315 +          %end;
18316 +          output;
18317 +        end;
18318 +      %end;
18319 +      %else %if "&probtype" eq "NONE" %then %do;
18320 +        if last.node then do;
18321 +          output;
18322 +        end;
18323 +      %end;
18324 +    run;
18325 +  %end;
18327 +  proc sort data=tempoutnodes out=tempoutnodes; by node; run;
18329 +  %let oldexists=0;
18330 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) %then %do;
18331 +     data old_tree_plot;
18332 +        set &EM_USER_TREE_PLOT(keep=node nodecolor);
18333 +        rename nodecolor=oldnodecolor;
18334 +     run;
18336 +     proc sort data=old_tree_plot;
18337 +        by node;
18338 +     run;
18340 +     %let oldexists=1;
18341 +  %end;
18343 +  data &EM_USER_TREE_PLOT;
18344 +    length textall $800;
18345 +    merge tempoutnodes temptargetused
18347 +    %if &em_intTarget eq Y %then %do;
18348 +      tempinterval
18349 +    %end;
18351 +    %if &em_classTarget eq Y %then %do;
18353 +      %if &validFlag eq N %then %do;
18354 +        tempn(rename=(statvalue=N))
18355 +      %end;
18356 +      %else %do;
18357 +        tempn
18358 +      %end;
18360 +      temppredict tempprob
18362 +      %if ((&em_profitflag ne 0) OR (&em_lossflag ne 0)) %then %do;
18363 +        tempprofittext
18364 +      %end;
18365 +    %end;
18366 +    ;
18367 +    by node;
18369 +    /* build nodetext based on user selection */
18370 +    textall="";
18372 +    %if &em_intTarget eq Y %then %do;
18373 +    if tarlevel="INTERVAL" then do;
18374 +      /* Nodeid */
18375 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18376 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18377 +      %end;
18379 +      /* Target identifier if multiple targets are used */
18380 +      %if "&multipleTar" eq "Y" %then %do;
18381 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18382 +      %end;
18384 +      %if &validFlag eq Y %then %do;
18385 +         /* Column labels displayed in validflag eq Y only */
18386 +         %if (("&EM_PROPERTY_AVG" eq "Y") OR ("&EM_PROPERTY_RASE" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18387 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18387!+noquote ))";
18388 +         %end;
18390 +         /* Average values */
18391 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18392 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VPREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18393 +         %end;
18395 +         /* RASE */
18396 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18397 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION)||"09"x||put(VRASE, 14.&EM_PROPERTY_SPLITPRECISION);
18398 +         %end;
18400 +         /* Count */
18401 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18402 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N)||"09"x||strip(VN);
18403 +         %end;
18404 +      %end;
18405 +      %else %do;
18406 +         /* Average values */
18407 +         %if "&EM_PROPERTY_AVG" eq "Y" %then %do;
18408 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote)): "||"09"x||put(PREDICTION, 14.&EM_PROPERTY_SPLITPRECISION);
18409 +         %end;
18411 +         /* RASE */
18412 +         %if "&EM_PROPERTY_RASE" eq "Y" %then %do;
18413 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rase_vlabel, noquote)): "||"09"x||put(RASE, 14.&EM_PROPERTY_SPLITPRECISION);
18414 +         %end;
18416 +         /* Count */
18417 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18418 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(N);
18419 +         %end;
18420 +      %end;
18422 +      /* nodecolor */
18423 +      %if "&EM_PROPERTY_INTCOLORBY" eq "AVG" %then %do;
18424 +        nodecolor=PREDICTION;
18425 +      %end;
18426 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "RASE" %then %do;
18427 +        nodecolor=RASE;
18428 +      %end;
18429 +      %else %if "&EM_PROPERTY_INTCOLORBY" eq "SINGLE" %then %do;
18430 +        nodecolor=1;
18431 +      %end;
18433 +    end;
18434 +    %end;
18435 +    %if &em_classTarget eq Y %then %do;
18436 +    if tarlevel^="INTERVAL" then  do;
18438 +      /* Nodeid */
18439 +      %if "&EM_PROPERTY_SHOWNODEID" eq "Y" %then %do;
18440 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_nodeId_vlabel, noquote )): "||"09"x||strip(Node);
18441 +      %end;
18442 +      /* Target identifier if multiple targets are used */
18443 +      %if "&multipleTar" eq "Y" %then %do;
18444 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_target_title, noquote, )) "||"09"x||strip(target);
18445 +      %end;
18447 +      /* Predicted values */
18448 +      %if "&EM_PROPERTY_PRED" eq "Y" %then %do;
18449 +        textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_pls_score_predvalue, noquote, )): "||"09"x||strip(CATEGORY);
18450 +      %end;
18452 +      /* Column labels displayed in validflag eq Y only */
18453 +      %if "&ValidFlag" eq "Y" %then %do;
18454 +        %if (("&EM_PROPERTY_TARGET" ne "NONE") OR ("&EM_PROPERTY_PROFITLOSS" ne "NONE") OR ("&EM_PROPERTY_PERCENTCORRECT" eq "Y") OR ("&EM_PROPERTY_COUNT" eq "Y")) %then %do;
18455 +           textall=strip(textall)||"0A"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_rptstatistic_vlabel, noquote)) "||"09"x||"%sysfunc(sasmsg(sashelp.dmine, rpt_train_vlabel , noquote ))" ||"09"x|| "%sysfunc(sasmsg(sashelp.dmine, rpt_validate_vlabel ,
18455!+noquote ))";
18456 +        %end;
18457 +      %end;
18459 +      /* Target Values */
18460 +      %if "&EM_PROPERTY_TARGET" ne "NONE" %then %do;
18461 +        textall=strip(textall)||"0A"x||strip(probtext);
18462 +      %end;
18464 +      /* include profit or loss for all target levels */
18465 +      %if ( "&EM_PROPERTY_PROFITLOSS" ne "NONE" AND ((&em_profitflag ne 0) OR (&em_lossflag ne 0))) %then %do;
18466 +        textall=strip(textall)||"0A"x||strip(profittext);
18467 +      %end;
18469 +      %if &validFlag eq N %then %do;
18470 +        /* Percent Correct */
18471 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18472 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2));
18473 +        %end;
18475 +         /* Count */
18476 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18477 +          %if "&adjusted" eq "N" %then %do;
18478 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.));
18479 +          %end;
18480 +          %else %do;
18481 +            textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS, 15.&EM_PROPERTY_SPLITPRECISION));
18482 +          %end;
18483 +         %end;
18484 +      %end;
18485 +      %else %do;
18486 +        /* Percent Correct */
18487 +        %if "&EM_PROPERTY_PERCENTCORRECT" eq "Y" %then %do;
18488 +          textall=strip(textall)||"0A"x||"Percent Correct: "||"09"x||strip(put(percentcorrect, percent10.2))||"09"x||strip(put(vpercentcorrect, percent10.2));
18489 +        %end;
18491 +         /* Count */
18492 +         %if "&EM_PROPERTY_COUNT" eq "Y" %then %do;
18493 +          %if "&adjusted" eq "N" %then %do;
18494 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(N, best12.))||"09"x||strip(put(VN, best12.));
18495 +          %end;
18496 +          %else %do;
18497 +           textall=strip(textall)||"0A"x||" %sysfunc(sasmsg(sashelp.dmine, rpt_rptcount_vlabel, noquote )): "||"09"x||strip(put(NPRIORS,15.&EM_PROPERTY_SPLITPRECISION))||"09"x||strip(put(VNPRIORS,15.&EM_PROPERTY_SPLITPRECISION));
18498 +          %end;
18499 +         %end;
18500 +      %end;
18502 +      /* nodecolor */
18503 +      %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTEVENT" %then %do;
18504 +       %if &multipleTar ne Y %then %do;
18505 +        nodecolor=&predTarget;
18506 +       %end;
18507 +       %else %do;
18508 +         nodecolor=percentcorrect;
18509 +       %end;
18510 +      %end;
18511 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PERCENTCORRECT" %then %do;
18512 +        nodecolor=percentcorrect;
18513 +      %end;
18514 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "SINGLE" %then %do;
18515 +        nodecolor=1;
18516 +      %end;
18517 +      %else %if "&EM_PROPERTY_CLASSCOLORBY" eq "PROFITLOSS" %then %do;
18518 +        %if ((&em_profitflag eq 0) AND (&em_lossflag eq 0)) %then %do;
18519 +          nodecolor=percentcorrect;
18520 +        %end;
18521 +        %else %do;
18522 +          nodecolor=profitloss;
18523 +        %end;
18524 +      %end;
18526 +    end;
18527 +    %end;
18528 +    %if &em_intTarget eq Y %then %do;
18529 +     drop  PREDICTION  TARGET TARLEVEL
18530 +     %if &ValidFlag eq Y %then %do;
18531 +         VPREDICTION
18532 +     %end;
18533 +     ;
18534 +    %end;
18535 +    %if &em_classTarget eq Y %then %do;
18536 +     drop CATEGORY PROBTEXT  TARGET TARLEVEL STATVALUE
18537 +     %if &ValidFlag eq Y %then %do;
18538 +         VSTATVALUE
18539 +     %end;
18540 +     ;
18541 +    %end;
18543 +  run;
18545 +  /* add leaf index information to plotds - based on primary target only*/
18546 +  %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18547 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18548 +      set &EM_USER_OUTSTATS;
18549 +      if ((statname="PROBABILITY"
18550 +      %if &validexist %then %do;
18551 +       or statname="VALID: PROBABILITY"
18552 +      %end;
18553 +      ) AND (CATEGORY="&TARGETEVENT")
18554 +      %if "&multipleTar" eq "Y" %then %do;
18555 +        AND (Target="%EM_TARGET")
18556 +      %end;
18557 +      );
18558 +    run;
18560 +    %if &validexist %then %do;
18561 +      proc sort data=tempprob; by node; run;
18562 +      %let vpredTarget = V%substr(&predTarget, 2);
18563 +      proc transpose data=tempprob out=tempprob(keep=NODE PROBABILITY VALID__PROBABILITY rename=(PROBABILITY=&predTarget VALID__PROBABILITY=&vpredTarget));
18564 +         by node;
18565 +         id statname;
18566 +      run;
18567 +    %end;
18568 +  %end;
18569 +  %else %do;
18570 +    data tempprob(keep=node statname statvalue rename=(statvalue=&predTarget));
18571 +      set &EM_USER_OUTSTATS;
18572 +      if ((statname="PREDICTION"
18573 +      %if &validexist %then %do;
18574 +       or statname="VALID: PREDICTION"
18575 +      %end;
18576 +      )
18577 +      %if "&multipleTar" eq "Y" %then %do;
18578 +        AND (Target="%EM_TARGET")
18579 +      %end;
18580 +      );
18581 +    run;
18582 +    %if &validexist %then %do;
18583 +      proc sort data=tempprob; by node; run;
18584 +      %let vpredTarget = V%substr(&predTarget, 2);
18585 +      proc transpose data=tempprob out=tempprob(keep=NODE PREDICTION VALID__PREDICTION rename=(PREDICTION=&predTarget VALID__PREDICTION=&vpredTarget));
18586 +         by node;
18587 +         id statname;
18588 +      run;
18589 +    %end;
18590 +  %end;
18592 +  proc sort data=tempprob; by node; run;
18593 +  data tempoutnodes;
18594 +    merge tempoutnodes tempprob;
18595 +    by node;
18596 +  run;
18598 +  proc sort data=tempoutnodes out=tempnodes; by descending &predTarget; run;
18599 +  data tempnodes;
18600 +    retain traintotal validtotal;
18601 +    set tempnodes(where=(leaf ne . ));
18602 +    tprob=round(&predTarget, .01);
18603 +    %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18604 +      percevent_train=round(tprob*100, .01);
18605 +    %end;
18606 +    %else %do;
18607 +      percevent_train=tprob;
18608 +    %end;
18610 +    perc_train=round((n/traintotal)*100, 0.01);
18611 +    /* leafwidth already has a *10 multiplier */
18612 +    if missing(perc_train) then perc_train = round(linkwidth*10, 0.01);
18614 +    %if &validexist %then %do;
18615 +      %let vpredTarget = V%substr(&predTarget,2);
18616 +      vprob=round(&vpredTarget, .01);
18617 +      %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18618 +        percevent_valid=round(vprob*100, .01);
18619 +      %end;
18620 +      %else %do;
18621 +        percevent_valid=vprob;
18622 +      %end;
18623 +      perc_valid=round((vn/validtotal)*100, .01);
18624 +    %end;
18626 +    index=_N_;
18627 +    keep node index tprob perc_train percevent_train
18628 +    %if &validexist %then %do;
18629 +        vprob percevent_valid perc_valid
18630 +    %end;
18631 +    ;
18632 +  run;
18633 +  proc sort data=tempnodes; by node; run;
18634 +  data &EM_USER_TREE_PLOT;
18635 +    merge &EM_USER_TREE_PLOT tempnodes %if &oldexists %then old_tree_plot;;
18636 +    by node;
18637 +    if missing(node) then delete;
18638 +    %if &oldexists %then %do;
18639 +      if missing(nodecolor) then nodecolor=oldnodecolor;
18640 +      drop oldnodecolor;
18641 +    %end;
18642 +    abovetext = compbl(abovetext);
18644 +    /* add variable labels */
18645 +    label textall      = "%sysfunc(sasmsg(sashelp.dmine, rpt_textall_vlabel, noquote))"
18646 +          parent       = "%sysfunc(sasmsg(sashelp.dmine, rpt_parentId_vlabel, noquote))"
18647 +          node         = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodeid_vlabel, noquote))"
18648 +          abovetext    = "%sysfunc(sasmsg(sashelp.dmine, rpt_abovetext_vlabel, noquote))"
18649 +          traintotal   = "%sysfunc(sasmsg(sashelp.dmine, rpt_traintotal_vlabel, noquote))"
18650 +          nodecolor    = "%sysfunc(sasmsg(sashelp.dmine, rpt_nodecolor_vlabel, noquote))"
18652 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18653 +            tprob        = "%sysfunc(sasmsg(sashelp.dmine, rpt_prob_vlabel, noquote, %nrbquote(&targetEvent)))"
18654 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_train_vlabel, noquote))"
18655 +            perc_train      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
18656 +          %end;
18657 +          %else %do;
18658 +            tprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_average_vlabel, noquote))"
18659 +            percevent_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_train_vlabel, noquote))"
18660 +            perc_train = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_train_vlabel, noquote))"
18661 +          %end;
18662 +          index           = "%sysfunc(sasmsg(sashelp.dmine, meta_index_vlabel, noquote))"
18664 +          validtotal      = "%sysfunc(sasmsg(sashelp.dmine, rpt_validtotal_vlabel, noquote))"
18665 +          VN              = "%sysfunc(sasmsg(sashelp.dmine, rpt_validn_vlabel, noquote))"
18666 +          %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18667 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_vprob_vlabel, noquote, %nrbquote(&targetEvent)))"
18668 +            perc_valid      = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
18669 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_percevent_valid_vlabel, noquote))"
18670 +          %end;
18671 +          %else %do;
18672 +            vprob           = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel, noquote))"
18673 +            perc_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_valid_vlabel, noquote))"
18674 +            percevent_valid = "%sysfunc(sasmsg(sashelp.dmine, rpt_perc_int_valid_vlabel, noquote))"
18675 +          %end;
18676 +    ;
18677 +  run;
18679 +  /* delete temporary tables */
18680 +  proc datasets lib=work nolist;
18681 +    delete abovetext belowtext tempoutnodes tempmissing temp tempnodes tempstats;
18682 +  run;
18684 +%mend em_tree_makePlotDs;
18688 +%macro em_tree_report;
18690 +   /* report properties */
18691 +   %em_checkmacro(name=EM_PROPERTY_Precision, value=4, global=Y);
18692 +   %em_checkmacro(name=EM_PROPERTY_SplitPrecision, value=4, global=Y);
18693 +   %em_checkmacro(name=EM_PROPERTY_ClassColorBy, value=PERCENTCORRECT, global=Y);
18694 +   %em_checkmacro(name=EM_PROPERTY_IntColorBy, value=AVG, global=Y);
18695 +   %em_checkmacro(name=EM_PROPERTY_ShowNodeId, value=Y, global=Y);
18696 +   %em_checkmacro(name=EM_PROPERTY_ShowValid, value=Y, global=Y);
18697 +   %em_checkmacro(name=EM_PROPERTY_Pred, value=N, global=Y);
18698 +   %em_checkmacro(name=EM_PROPERTY_Target, value=ALL, global=Y);
18699 +   %em_checkmacro(name=EM_PROPERTY_Count, value=Y, global=Y);
18700 +   %em_checkmacro(name=EM_PROPERTY_PercentCorrect, value=N, global=Y);
18701 +   %em_checkmacro(name=EM_PROPERTY_ProfitLoss, value=NONE, global=Y);
18702 +   %em_checkmacro(name=EM_PROPERTY_AVG, value=Y, global=Y);
18703 +   %em_checkmacro(name=EM_PROPERTY_RASE, value=N, global=Y);
18705 +   %let validexist=0;
18706 +   %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) or %sysfunc(exist(&EM_IMPORT_VALIDATE,VIEW)))) %then %do;
18707 +     %let validexist=1;
18708 +   %end;
18710 +   /* determine if multiple targets will be processed */
18711 +   %let em_tree_multipleTargets=N;
18712 +   %let em_tree_numTarget=1;
18713 +   %if "&EM_PROPERTY_USEMULTIPLETARGET" eq "Y" %then %do;
18714 +      /* determine if there are any ordinal target variables - if so, multiple targets are not supported */
18715 +      %if &EM_NUM_ORDINAL_TARGET gt 0 %then %do;
18716 +         %let em_tree_multipleTargets=N;
18717 +      %end;
18718 +      %else %do;
18719 +        data _null_;
18720 +          set &EM_DATA_VARIABLESET(where=(ROLE='TARGET' AND LEVEL^='ORDINAL')) end=eof;
18721 +          if eof then
18722 +            call symput('em_tree_numTarget', strip(put(_N_, BEST.)));
18723 +        run;
18725 +        %if &em_tree_numTarget gt 1 %then %do;
18726 +           %let em_tree_multipleTargets=Y;
18727 +        %end;
18728 +     %end;
18729 +   %end;
18731 +  %if "&em_tree_multipleTargets" eq "N" %then %do;
18733 +   /* variable importance */
18734 +   %EM_GETNAME(key=OUTIMPORT, type=DATA);
18735 +   %if %sysfunc(exist(&EM_USER_OUTIMPORT)) eq 1 %then %do;
18737 +     /* determine if vars exists - properties could indicate they are they but freeze=Y would mean the node wasn't retrained */
18738 +     /* and the columns may not be generated                                                                                 */
18739 +     %let em_tree_cvexists=;
18740 +     %let em_tree_surrexists=.;
18741 +     data _null_;
18742 +       set &EM_USER_OUTIMPORT (obs=2) end=eof;
18743 +       if eof then do ;
18744 +        call symput("em_tree_cvexists" , strip(put(cvimportance,best.))) ;
18745 +        call symput("em_tree_surrexists", strip(put(nsurrogates, best.)));
18746 +       end;
18747 +     run;
18749 +     data &EM_USER_OUTIMPORT;
18750 +         set &EM_USER_OUTIMPORT;
18751 +         /* format columns based on Precison value specified */
18752 +         format importance 15.&EM_PROPERTY_PRECISION
18753 +              %if &validexist %then %do;
18754 +                vimportance ratio 15.&EM_PROPERTY_PRECISION
18755 +              %end;
18756 +              %if "&EM_TREE_CVEXISTS" ne "." %then %do;
18757 +                cvimportance vimportance ratio 15.&EM_PROPERTY_PRECISION
18758 +              %end;
18759 +         ;
18760 +     run;
18762 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_variableImportance_title  , NOQUOTE))";
18763 +     proc print data=&EM_USER_OUTIMPORT
18764 +        %if "&EM_TREE_SURREXISTS" ne "." %then %do;
18765 +          (where=((nrules>0) OR (nsurrogates>0)))
18766 +        %end;
18767 +        %else %do;
18768 +           (where=(nrules>0))
18769 +        %end;
18770 +        label noobs
18771 +        ;
18772 +     run;
18773 +     title10;
18775 +   %end;
18777 +   /* Sequence */
18778 +   %EM_GETNAME(key=OUTSEQ, type=DATA);
18779 +   %EM_GETNAME(key=OUTOBSIMP, type=DATA);
18780 +   data _null_ ;
18781 +      set &EM_USER_outseq (obs=2) end=eof ;
18782 +      if eof then do ;
18783 +        call symput("em_tree_xase" , strip(put(_XASE_,best.))) ;
18784 +        call symput("em_tree_vase" , strip(put(_VASE_, best.)));
18785 +        call symput("em_tree_seq"  , strip(put(_SEQUENCE_, best.)));
18786 +        call symput("em_tree_vseq"  , strip(put(_VSEQUENCE_, best.)));
18787 +        call symput("em_tree_aprof" , strip(put(_APROF_, best.)));
18788 +        call symput("em_tree_aloss" , strip(put(_ALOSS_, best.)));
18789 +        call symput("em_tree_prior" , strip(put(_PASE_, best.)));
18790 +      end;
18791 +    run;
18793 +   %if %sysfunc(exist(&EM_USER_OUTSEQ)) eq 1 %then %do;
18794 +      data &EM_USER_OUTSEQ;
18795 +      %if (("&EM_PROPERTY_CV" eq "Y") AND ("&em_tree_xase" ne ".")) %then %do;
18796 +        set &EM_USER_OUTSEQ(rename=(_XASE_=_VASE_ _XMAX_=_VMAX_ _XSSE_=_VSSE_ _XRASE_=_VRASE_
18797 +        %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18798 +           _XMISC_=_VMISC_
18799 +        %end;
18800 +        %if "&em_tree_aprof" ne "."  %then %do;
18801 +           _XAPROF_=_VAPROF_
18802 +           _XPROF_ = _VPROF_
18803 +        %end;
18804 +        %if "&em_tree_aloss" ne "."  %then %do;
18805 +           _XALOSS_=_VALOSS_
18806 +        %end;
18807 +        %if "&EM_TREE_PRIOR" ne "." %then %do;
18808 +           _XPASE_ = _VPASE_
18809 +           _XPMISC_ = _VPMISC_
18810 +        %end;
18812 +        ));
18813 +     %end;
18814 +     %else %do;
18815 +        set &EM_USER_OUTSEQ;
18816 +     %end;
18818 +     format _ASE_  _ASSESS_ _MAX_ _SSE_ _RASE_  15.&EM_PROPERTY_PRECISION
18819 +         %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18820 +            _MISC_   15.&EM_PROPERTY_PRECISION
18821 +         %end;
18822 +         %if "&EM_TREE_PRIOR" ne "." %then %do;
18823 +            _PASE_  15.&EM_PROPERTY_PRECISION
18824 +            _PMISC_ 15.&EM_PROPERTY_PRECISION
18825 +         %end;
18826 +         %if (("&EM_PROPERTY_CV" eq "Y") AND (("&em_tree_xase" ne ".") or ("&em_tree_vase" ne "."))) %then %do;
18827 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_ _COST_COMPLEXITY_ 15.&EM_PROPERTY_PRECISION
18828 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18829 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
18830 +            %end;
18831 +            %if "&EM_TREE_PRIOR" ne "." %then %do;
18832 +              _VPASE_  15.&EM_PROPERTY_PRECISION
18833 +              _VPMISC_ 15.&EM_PROPERTY_PRECISION
18834 +            %end;
18835 +         %end;
18836 +         %if (("&EM_PROPERTY_CV" eq "N") AND &validexist) %then %do;
18837 +            _VASE_  _VASSESS_ _VMAX_ _VSSE_ _VRASE_  15.&EM_PROPERTY_PRECISION
18838 +            %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18839 +               _VMISC_ 15.&EM_PROPERTY_PRECISION
18840 +            %end;
18841 +         %end;
18842 +         %if "&em_tree_seq" ne "." %then %do;
18843 +           _SEQUENCE_ 15.&EM_PROPERTY_PRECISION
18844 +         %end;
18845 +         %if "&em_tree_vseq" ne "." %then %do;
18846 +           _VSEQUENCE_  15.&EM_PROPERTY_PRECISION
18847 +         %end;
18848 +         %if "&em_tree_aprof" ne "." %then %do;
18849 +           _APROF_ 15.&EM_PROPERTY_PRECISION
18850 +           _PROF_ 15.&EM_PROPERTY_PRECISION
18851 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
18852 +             _VAPROF_ 15.&EM_PROPERTY_PRECISION
18853 +             _VPROF_ 15.&EM_PROPERTY_PRECISION
18854 +           %end;
18855 +         %end;
18856 +         %else %if "&em_tree_aloss" ne "." %then %do;
18857 +           _ALOSS_  15.&EM_PROPERTY_PRECISION
18858 +           %if (("&EM_PROPERTY_CV" eq "Y") OR &validexist) %then %do;
18859 +             _VALOSS_ 15.&EM_PROPERTY_PRECISION
18860 +           %end;
18861 +         %end;
18862 +      ;
18863 +    run;
18864 +   %end;
18866 +   /* Observation Based Importance */
18867 +   %if (  ("&EM_PROPERTY_OBSIMPORTANCE" eq "Y") AND ( %sysfunc(exist(&EM_USER_OUTOBSIMP)) eq 1)) %then %do;
18869 +      /* need to check for 0 obs */
18870 +      %let dsid = %sysfunc(open(&EM_USER_OUTOBSIMP));
18871 +      %let onobs=%sysfunc(attrn(&dsid,NOBS));
18872 +      %let rc=%sysfunc(close(&dsid));
18874 +      %if &onobs %then %do;
18875 +         proc sort data=&EM_USER_OUTOBSIMP; by _INPUT1_; run;
18876 +         proc sort data=&em_data_variableset out=_tempvars; by NAME; run;
18878 +         data &EM_USER_OUTOBSIMP;
18879 +           merge _tempvars(rename=(NAME=_INPUT1_) keep=NAME LABEL) &EM_USER_OUTOBSIMP(in=_a)  ;
18880 +           if _a;
18881 +           by _INPUT1_;
18882 +           format  _ASE_ _MAX_ _SSE_ _RASE_ 15.&EM_PROPERTY_PRECISION
18883 +                   %if "%EM_TARGET_LEVEL" ne "INTERVAL" %then %do;
18884 +                     _MISC_ 15.&EM_PROPERTY_PRECISION
18885 +                   %end;
18886 +                   ;
18887 +         run;
18888 +         %EM_REPORT(key=OUTOBSIMP, viewtype=DATA, block=MODEL, description=OBSIMPFIT, autodisplay=N);
18889 +      %end;
18890 +   %end;
18892 +  %end;
18894 +  /* create dataset to support tree diagram and icicle plot */
18895 +  %EM_GETNAME(key=TREE_PLOT, type=DATA);
18896 +  %em_tree_makePlotDs(multipleTar = &em_tree_multipleTargets);
18898 +  /* display tree diagram */
18899 +  %em_report(key=TREE_PLOT, viewtype=DTree, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL, abovetext=ABOVETEXT, belowText=BELOWTEXT,
18900 +             nodesize=N, nodecolor=NODECOLOR, linkwidth=LINKWIDTH,  block=MODEL, description=TREE, autodisplay=Y);
18902 +  /* display icicle diagram */
18903 +  %em_report(key=TREE_PLOT, viewtype=Icicle, id=NODE, parent=PARENT, nodetext=NODETEXT, tipText=TEXTALL,
18904 +             nodesize=N, nodecolor=NODECOLOR, block=MODEL, description=ICICLE, autodisplay=Y);
18906 +  /* Leaf Statistics Plot */
18907 +  %em_report(key=TREE_PLOT, viewtype=AREABAR, x=NODE, y=PERCEVENT_TRAIN, WIDTH=PERC_TRAIN,block=MODEL, description=VARWIDTH, autodisplay=N);
18909 +  /* print leaf information to output window */
18910 +  %if %sysfunc(exist(&EM_USER_TREE_PLOT)) eq 1 %then %do;
18912 +     proc sort data=&EM_USER_TREE_PLOT out=t;
18913 +       by descending N;
18914 +     run;
18916 +     /* determine if vn is present in the data -- combinations of decisions/partition/cv cause the proc not to generate this stat */
18917 +     %local vn;
18918 +     data _null_;
18919 +       set t (obs=2) end=eof;
18920 +       if eof then do;
18921 +         call symput("vn", strip(put(vn, best.)));
18922 +       end;
18923 +     run;
18925 +     data t;
18926 +       set t;
18927 +       label N="%sysfunc(sasmsg(sashelp.dmine, rpt_trainingobs_vlabel  , NOQUOTE))"
18928 +             DEPTH="%sysfunc(sasmsg(sashelp.dmine, rpt_depth_vlabel  , NOQUOTE))"
18929 +       %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
18930 +            tprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainaverage_vlabel  , NOQUOTE))"
18931 +            RASE="%sysfunc(sasmsg(sashelp.dmine, rpt_trainrase_vlabel  , NOQUOTE))"
18932 +       %end;
18933 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
18934 +            VN="%sysfunc(sasmsg(sashelp.dmine, rpt_validobs_vlabel  , NOQUOTE))"
18935 +           %if "%EM_TARGET_LEVEL" eq "INTERVAL" %then %do;
18936 +              vprob = "%sysfunc(sasmsg(sashelp.dmine, rpt_validaverage_vlabel  , NOQUOTE))"
18937 +              VRASE="%sysfunc(sasmsg(sashelp.dmine, rpt_validrase_vlabel  , NOQUOTE))"
18938 +          %end;
18939 +       %end;
18940 +       ;
18941 +     run;
18943 +     /* determine if rase is found in t */
18944 +    %let dsid=%sysfunc(open(t,i));
18945 +    %let raseexists=%sysfunc(varnum(&dsid,RASE));
18946 +    %let rc=%sysfunc(close(&dsid));
18948 +     title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_treeleafreport_title  , NOQUOTE))";
18949 +     proc print data=t noobs label;
18950 +       where tprob ne .;
18951 +       var node depth N tprob
18952 +       %if (("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1)) %then %do;
18953 +         %if "&vn" ne "." %then %do;
18954 +           VN
18955 +         %end;
18956 +         vprob
18957 +       %end;
18958 +       %if &raseexists %then %do;
18959 +            RASE
18960 +            %if ( ("&EM_IMPORT_VALIDATE" ne "") AND (%sysfunc(exist(&EM_IMPORT_VALIDATE)) eq 1) AND ("&EM_PROPERTY_CV" eq "N")) %then %do;
18961 +              VRASE
18962 +            %end;
18963 +       %end;
18964 +       ;
18965 +     run;
18966 +     title10;
18967 +  %end;
18969 +  /* create plots that are done during training of node */
18970 +  /* display iterative plot, including reference line */
18971 +  %if "&em_Tree_multipleTargets" eq "N" %then %do;
18972 +   /* %if &nleaves eq  %then %do; */
18973 +      %EM_GETNAME(key=OUTTOPOLOGY, type=DATA);
18974 +      data _null_;
18975 +        set &EM_USER_OUTTOPOLOGY end=eof;
18976 +        if eof then do;
18977 +          call symput('nleaves', LEAF);
18978 +        end;
18979 +      run;
18980 +   /* %end; */
18982 +    %EM_REPORT(KEY=OUTSEQ, VIEWTYPE=ITERATIONPLOT, block=MODEL,  X=_NW_, XRef=&Nleaves, autodisplay=N, Description=SUBTREE);
18983 +    /*%EM_REPORT(view=1, Y=_ASE_); */
18984 +  %end;
18986 +  /* display leaf statistics */
18987 +  %EM_REPORT(KEY=TREE_PLOT, VIEWTYPE=RESPONSEBAR, block=MODEL, view=1, X=INDEX, Y1=tprob, y2=vprob, where=%nrbquote(INDEX ne .), autodisplay=Y, Description=LEAFSTATS);
18989 +  /* stats by node if multiple targets = Y */
18990 +  %EM_GETNAME(key=OUTSTATS, type=DATA);
18991 +  %if "&em_tree_multipleTargets" eq "Y" %then %do;
18992 +    data &EM_USER_OUTSTATS;
18993 +      set &EM_USER_OUTSTATS;
18995 +     * if STATNAME="TARGET" then delete;
18996 +     * if STATNAME="PREDICTION" and STATVALUE=. then delete;
18997 +      drop leaf;
18998 +    run;
18999 +    %EM_REPORT(key=OUTSTATS, viewtype=DATA, block=MODEL, description=OUTSTATS, autodisplay=N);
19001 +  %end;
19002 +  %else %do;
19003 +    /* add outstats and outdescribe to spk but not results */
19004 +    %EM_REPORT(viewtype=, key=OUTSTATS);
19005 +  %end;
19007 +%mend em_tree_report;
NOTE: %INCLUDE (level 1) ending.
NOTE: Fileref TEMP has been deassigned.
 
NOTE: Variable cvimportance is uninitialized.
NOTE: Variable nsurrogates is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 9 observations read from the data set EMWS1.TREE2_OUTIMPORT.
NOTE: The data set EMWS1.TREE2_OUTIMPORT has 9 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_OUTIMPORT.
      WHERE nrules>0;
NOTE: The PROCEDURE PRINT printed page 3.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Variable _XASE_ is uninitialized.
NOTE: Variable _SEQUENCE_ is uninitialized.
NOTE: Variable _VSEQUENCE_ is uninitialized.
NOTE: Variable _APROF_ is uninitialized.
NOTE: Variable _ALOSS_ is uninitialized.
NOTE: Variable _PASE_ is uninitialized.
NOTE: There were 2 observations read from the data set EMWS1.TREE2_OUTSEQ.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set EMWS1.TREE2_OUTSEQ.
NOTE: The data set EMWS1.TREE2_OUTSEQ has 4 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_CHURN_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='VARIABLE');
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and (STAT='LABEL');
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is empty.
NOTE: The data set WORK.BELOWTEXT2 has 0 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: There were 0 observations read from the data set WORK.BELOWTEXT2.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set EMWS1.TREE2_OUTRULES.
      WHERE (ROLE='PRIMARY') and STAT in ('INTERVAL', 'NOMINAL', 'ORDINAL');
NOTE: The data set WORK.ABOVETEXT has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 3 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      155:103   204:136   247:102   247:125   279:104   313:104   355:103   355:126   398:104
NOTE: Character values have been converted to numeric values at the places given by: (Line):(Column).
      414:99
NOTE: There were 3 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 6 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: There were 71 observations read from the data set EMWS1.TREE2_OUTRULES.
NOTE: The data set WORK.TEMPMISSING has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: The data set WORK.ABOVETEXT has 6 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPMISSING has 3 observations and 6 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE2_OUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 16 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 6 observations read from the data set WORK.ABOVETEXT.
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.TEMPMISSING.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 17 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 17 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.BELOWTEXT has 3 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 3 observations read from the data set WORK.BELOWTEXT.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 0 observations read from the data set EMWS1.TREE2_OUTSTATS.
      WHERE STATNAME='NPRIORS';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 1 observations read from the data set EMWS1.TREE2_VARIABLESET.
      WHERE (ROLE='TARGET') and (LEVEL not = 'ORDINAL') and USE in ('D', 'Y');
NOTE: The data set WORK.TEMPTARMETA has 1 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPTARGETUSED has 42 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: 35 observations with duplicate key values were deleted.
NOTE: The data set WORK.TEMPTARGETUSED has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPOUTSTATS has 42 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Input data set is already sorted, no sorting done.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPOUTSTATS.
NOTE: There were 7 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: The data set WORK.TEMPINTERVAL has 42 observations and 6 variables.
NOTE: The data set WORK.TEMPCLASS has 0 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: PROCEDURE SQL used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 7 observations and 7 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set WORK.TEMPINTERVAL has 7 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      942:196   958:204   958:221
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPTARGETUSED.
NOTE: There were 7 observations read from the data set WORK.TEMPINTERVAL.
NOTE: The data set EMWS1.TREE2_TREE_PLOT has 7 observations and 22 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 42 observations read from the data set EMWS1.TREE2_OUTSTATS.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 14 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 14 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 3 variables.
NOTE: PROCEDURE TRANSPOSE used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPPROB has 7 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: There were 7 observations read from the data set WORK.TEMPPROB.
NOTE: The data set WORK.TEMPOUTNODES has 7 observations and 18 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.TEMPOUTNODES.
NOTE: The data set WORK.TEMPNODES has 7 observations and 18 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
      WHERE leaf not = .;
NOTE: The data set WORK.TEMPNODES has 4 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
NOTE: The data set WORK.TEMPNODES has 4 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE2_TREE_PLOT.
NOTE: There were 4 observations read from the data set WORK.TEMPNODES.
NOTE: The data set EMWS1.TREE2_TREE_PLOT has 7 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: The file WORK.TEMP (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: The file WORK.TEMPSTATS (memtype=DATA) was not found, but appears on a DELETE statement.
NOTE: Deleting WORK.ABOVETEXT (memtype=DATA).
NOTE: Deleting WORK.BELOWTEXT (memtype=DATA).
NOTE: Deleting WORK.TEMPOUTNODES (memtype=DATA).
NOTE: Deleting WORK.TEMPMISSING (memtype=DATA).
NOTE: Deleting WORK.TEMPNODES (memtype=DATA).
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
 
NOTE: The data set WORK.EM_USER_REPORT has 132 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 132 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 264 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 264 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 397 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set EMWS1.TREE2_TREE_PLOT.
NOTE: The data set WORK.T has 7 observations and 29 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 2 observations read from the data set WORK.T.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 7 observations read from the data set WORK.T.
NOTE: The data set WORK.T has 7 observations and 29 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 4 observations read from the data set WORK.T.
      WHERE tprob not = .;
NOTE: The PROCEDURE PRINT printed page 4.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: Numeric values have been converted to character values at the places given by: (Line):(Column).
      316:141
NOTE: There were 7 observations read from the data set EMWS1.TREE2_OUTTOPOLOGY.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 397 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 529 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 529 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 662 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
NOTE: There were 662 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.00 seconds
 
 
19008
19009  *------------------------------------------------------------*;
19010  * End REPORT: Tree2;
19011  *------------------------------------------------------------*;
 
19012  /* Reset EM Options */
19013  options formchar="|----|+|---+=|-/\<>*";
19014  options nocenter ls=256 ps=10000;
19015  goptions reset=all device=GIF NODISPLAY;
 
19016  proc sort data=WORK.EM_USER_REPORT;
19017  by ID VIEW;
19018  run;
 
NOTE: There were 794 observations read from the data set WORK.EM_USER_REPORT.
NOTE: The data set WORK.EM_USER_REPORT has 794 observations and 4 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19019  proc sort data=EMWS1.Part_CMeta_TRAIN out=WORK.SUBSETINMETA;
19020  by NAME;
19021  run;
 
NOTE: There were 13 observations read from the data set EMWS1.PART_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 13 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19022  proc sort data=EMWS1.Tree2_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
19023  by NAME;
19024  run;
 
NOTE: There were 13 observations read from the data set EMWS1.TREE2_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 13 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19025  data WORK.ASSESS_META;
19026  merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
19027  by NAME;
19028  run;
 
NOTE: There were 13 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 13 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 13 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
19029  data EM_temp_assessMeta;
19030  set EMWS1.Tree2_CMeta_TRAIN;
19031  where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
19032  run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
19033  data EM_temp_assessdata;
19034  set EMWS1.Tree2_TRAIN(keep=
19035  P_Churn
19036  R_Churn
19037  V_Churn
19038  _WARN_
19039  Churn
19040  );
19041  run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE2_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
NOTE: There were 108 observations read from the data set EMWS1.PART_TRAIN.
NOTE: There were 108 observations read from the data set EMWS1.TREE2_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 108 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.01 seconds
 
 
 
 
 
 
 
 
 
23372   data EM_temp_assessMeta;
23373   set EMWS1.Tree2_CMeta_TRAIN;
23374   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST');
23375   run;
 
NOTE: There were 4 observations read from the data set EMWS1.TREE2_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 4 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
23376   data EM_temp_assessdata;
23377   set EMWS1.Tree2_VALIDATE(keep=
23378   P_Churn
23379   R_Churn
23380   V_Churn
23381   _WARN_
23382   Churn
23383   );
23384   run;
 
NOTE: Variable _WARN_ is uninitialized.
NOTE: View EMWS1.TREE2_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.00 seconds
 
NOTE: There were 46 observations read from the data set EMWS1.PART_VALIDATE.
NOTE: There were 46 observations read from the data set EMWS1.TREE2_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 46 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.04 seconds
      cpu time            0.00 seconds
 
 
 
 
 
 
 
 
 
27725   %let _cn = %sysfunc(getoption(CENTER));
27726   options nocenter;
27727   proc print data=EMWS1.Tree2_EMREPORTFIT noobs label;
27728   var STAT LABEL TRAIN
27729   VALIDATE
27730   TEST
27731   ;
27732   by TARGET TARGETLABEL;
27733   title9 ' ';
27734   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
27735   run;
 
NOTE: There were 7 observations read from the data set EMWS1.TREE2_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 5.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27736   title10;
27737   options &_cn;
 
27738   proc datasets library=EMWS1 nolist;
27739   modify Tree2_EMRANK;
27740   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
27741   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
27742   run;
 
NOTE: MODIFY was successful for EMWS1.TREE2_EMRANK.DATA.
27743   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
27744   %let _cn = %sysfunc(getoption(CENTER));
27745   options nocenter;
27746   proc print data=EMWS1.Tree2_EMRANK label noobs;
27747   var
27748   decile N _targetMean_ _meanP_;
27749   by
27750   notsorted DATAROLE
27751   notsorted TARGET
27752   notsorted TARGETLABEL
27753   ;
27754   title9 ' ';
27755   title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
27756   run;
 
NOTE: There were 8 observations read from the data set EMWS1.TREE2_EMRANK.
NOTE: The PROCEDURE PRINT printed page 6.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
27757   title10;
27758   options &_cn;
 
27759   proc datasets library=EMWS1 nolist;
27760   modify Tree2_EMSCOREDIST;
27761   label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,      NOQUOTE))";
27762   label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))";
27763   run;
 
NOTE: MODIFY was successful for EMWS1.TREE2_EMSCOREDIST.DATA.
27764   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
